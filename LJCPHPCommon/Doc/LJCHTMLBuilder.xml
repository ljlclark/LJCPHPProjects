<?xml version="1.0" encoding="utf-8" ?>
<!-- Copyright(c) Lester J. Clark and Contributors. -->
<!-- Licensed under the MIT License. -->
<!-- LJCHTMLBuilder.xml -->
<items>
  <LJCHTMLBuilder>
    <summary>
      Represents a built string value.
    </summary>
    <remarks>
      The LJCHTMLBuilder class is designed for creating HTML text. It is similar
      in principle to the StringBuilder class which is designed for creating
      strings.&lt;br /&gt;
      &lt;br /&gt;

      The LJCHTMLBuilder class - like the StringBuilder class - stores the text
      internally. The text is retrieved with the ToString() method.&lt;br /&gt;
      &lt;br /&gt;

      &lt;b&gt;Add Text Methods&lt;/b&gt;&lt;br /&gt;
      The "Add" methods are similar to StringBuilder methods:&lt;br /&gt;
      AddLine() - StringBuilder.AppendLine()&lt;br /&gt;
      AddText() - StringBuilder.Append()&lt;br /&gt;
      "Add" methods add text to the builder unmodified except for AddLine()
      which appends a newline.&lt;br /&gt;
      &lt;br /&gt;

      &lt;b&gt;Append Text Methods&lt;/b&gt;&lt;br /&gt;
      Line(), Text()&lt;br /&gt;
      "Append" methods add the potentially indented and wrapped text to the
      builder.&lt;br /&gt;
      The Text() method creates the added text without an ending newline This
      behavior is done for consistency and it allows the developer to append to
      the existing text.&lt;br /&gt;
      "Append" methods start the text with a newline if the builder already has
      text, param allowNewLine = true and builder text does not end with a
      newline.&lt;br /&gt;
      The Line() and Text() methods should have the addIndent property set to
      false if it applies text retrieved with a "Get" method as the "Get" method
      has already applied the indent.&lt;br /&gt;
      &lt;br /&gt;

      The AddIndent() method manually controls the current indent count.
      The indent string length is calculated with the properties
      (IndentCount * IndentCharCount) and can be retrieved with the
      IndentLength property.&lt;br /&gt;
      &lt;br /&gt;

      &lt;b&gt;Get Text Methods&lt;/b&gt;&lt;br /&gt;
      GetLine(), GetText()&lt;br /&gt;
      All "Get" methods create and return the potentialy indented and
      wrapped text but do not add it to the builder.&lt;br /&gt;
      &lt;br /&gt;

      &lt;b&gt;Append Element Methods&lt;/b&gt;&lt;br /&gt;
      Begin(), Create(), End()&lt;br /&gt;
      These methods append element tags and content. Begin() automatically
      increments the IndentCount by 1. Create() also increments the IndentCount
      by 1 if the isEmpty parameter is false and the close parameter is false.
      End() automatically decrements the IndentCount by 1 if the IndentCount
      is currently greater than zero.&lt;br /&gt;
      The "Append" element methods create the added text without an ending
      newline. This behavior is done for consistency and it allows the developer
      to append to the existing text.&lt;br /&gt;
      "Append" methods start the text with a newline if the builder already has
      text, param allowNewLine = true and builder text does not end with a
      newline.&lt;br /&gt;
      &lt;br /&gt;

      &lt;b&gt;Other Append Element Methods&lt;/b&gt;&lt;br /&gt;
      Link(), Meta(), Metas(), Script()&lt;br /&gt;
      These methods also append elements but do not change the IndentCount
      value.&lt;br /&gt;
      The "Append" element methods create the added text without an ending
      newline. This behavior is done for consistency and it allows the developer
      to append to the existing text.&lt;br /&gt;
      "Append" methods start the text with a newline if the builder already has
      text, param allowNewLine = true and builder text does not end with a
      newline.&lt;br /&gt;
      &lt;br /&gt;

      &lt;b&gt;Get Element Methods&lt;/b&gt;&lt;br /&gt;
      GetBegin(), GetCreate(), GetEnd(), GetLink(), GetMeta(), GetMetas()
      , GetScript()&lt;br /&gt;
      All "Get" methods create and return the potentialy indented and wrapped
      text but do not add it to the builder.
    </remarks>
  </LJCHTMLBuilder>
  <!-- Data Class Methods -->
  <ToString>
    <summary>
      Retrieves the HTML text.
    </summary>
    <returns>The HTML text.</returns>
  </ToString>
  <!-- Methods -->
  <AddIndent>
    <summary>
      Changes the IndentCount by the provided value.
    </summary>
    <param name="$increment">
      The amount to increment or decrement the indent count.
    </param>
    <returns>The current indent count.</returns>
    <code>
      // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
      $hb = new LJCHTMLBuilder();

      // Example Method:
      // The builder keeps track of the current number of indents.
      // Adds 1 indent by default.
      $hb-&gt;AddIndent();

      // Adds text without modification.
      $hb-&gt;AddText("This text is not indented.");

      // Starts the text with a newline if the builder already has text
      // and param allowNewLine = true and builder text does not end with
      // a newline.
      // The text begins with the current indent string if param
      // addIndent = true.
      // Defaults: addIndent = true, allowNewLine = true.
      $hb-&gt;Text("This text is indented.");

      // No Indent
      $hb-&gt;Text("Not indented.", false);

      // Do not start a newline.
      $hb-&gt;Text(" No start with newline.", false, false);
      $result = hb-&gt;ToString();

      // result:
      // This text is not indented.
      //   This text is indented.
      // Not indented. No start with newline.
    </code>
  </AddIndent>
  <!-- Append Text Methods (4) -->
  <AddLine>
    <summary>
      Adds a text line without modification.
    </summary>
    <param name="$text">The add text.</param>
    <returns>The added text line.</returns>
    <remarks>
      AddLine() is an "Append" method. It adds the unmodified text line to the
      builder.
    </remarks>
    <code>
      // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
      $hb = new LJCHTMLBuilder();

      // Example Method:
      // Adds text that ends with a newline.
      $hb-&gt;AddLine("This is an appended line.");

      $hb-&gt;AddText(":");
      $result = $hb-&gt;ToString();

      // result:
      // This is an appended line.
      // :
    </code>
  </AddLine>
  <AddText>
    <summary>
      Adds text without modification.
    </summary>
    <param name="$text">The add text.</param>
    <returns>The added text.</returns>
    <remarks>
      AddText() is an "Append" method. It adds the unmodified text to the builder.
    </remarks>
    <code>
      // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
      $hb = new LJCHTMLBuilder();

      // Example Method:
      // Adds text without modification.
      $hb-&gt;AddText("This is some appended text.");
      $result = $hb-&gt;ToString();

      // result:
      // This is some appended text.
    </code>
  </AddText>
  <Line>
    <summary>
      Adds a modified text line to the builder.
    </summary>
    <param name="$text">The add text.</param>
    <param name="$addIndent">Indicates if the element can be indented.</param>
    <param name="$allowNewLine">Indicates if a new line can be added.</param>
    <returns>The potentially indented and wrapped new text value.</returns>
    <remarks>
      Line() is an "Append" method. It creates the text with GetText() and adds
      a new line after the text. The text is then added to the builder.
      &lt;br /&gt;
      Line() works the same as Text() except it appends a new line.
    </remarks>
    <code>
      // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
      $hb = new LJCHTMLBuilder();

      $hb-&gt;Text("This is an appended line.");

      // The builder keeps track of the current number of indents.
      $hb-&gt;AddIndent();

      // Example Method:
      // Starts the text with a newline if the builder already has text
      // and param allowNewLine = true and builder text does not end with
      // a newline.
      // The text begins with the current indent string if param
      // addIndent = true.
      // Ends the text with a newline.
      // Defaults: addIndent = true, allowNewLine = true.
      $hb-&gt;Line();

      $hb-&gt;Text("This is an indented line.");
      $result = $hb-&gt;ToString();

      // result:
      // This is an appended line.
      //
      //   This is an indented line.
    </code>
  </Line>
  <Text>
    <summary>
      Adds modified text to the builder.
    </summary>
    <param name="$text">The add text.</param>
    <param name="$addIndent">Indicates if the element can be indented.</param>
    <param name="$allowNewLine">Indicates if a new line can be added.</param>
    <returns>The potentially indented and wrapped new text value.</returns>
    <remarks>
      Text() is an "Append" method. It creates the text with GetText() and adds
      it to the builder.&lt;br /&gt;
      Note: One should set the "addIndent" parameter to false when adding text
      to the builder after getting the text with a "GetText" method. This is
      because the the indent has already been added with the "GetText"
      method.
    </remarks>
    <code>
      // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
      $hb = new LJCHTMLBuilder();

      $hb-&gt;Text("This is an appended line.");

      // The builder keeps track of the current number of indents.
      $hb-&gt;AddIndent();

      // Example Method:
      // Starts the text with a newline if the builder already has text
      // and param allowNewLine = true and builder text does not end with
      // a newline.
      // The text begins with the current indent string if param
      // addIndent = true.
      // Defaults: addIndent = true, allowNewLine = true.
      $hb-&gt;Text("This is an indented line.");
      $result = $hb-&gt;ToString();

      // result:
      // This is an appended line.
      //   This is an indented line.
    </code>
  </Text>
  <!-- Get Text Methods (8) -->
  <EndsWithNewLine>
    <summary>
      Indicates if the builder text ends with a newline.
    </summary>
    <returns>
      true if builder text ends with a newline; otherwise false.
    </returns>
    <code>
      $hb = new LJCHTMLBuilder();

      $retValue = $hb-&gt;EndsWithNewLine();
      $result = $retValue-&gt;ToString();

      // result:
      // False
    </code>
  </EndsWithNewLine>
  <StartWithNewLine>
    <summary>
      Allow text to start with a newline.
    </summary>
    <param name="$allowNewLine">Indicates if a new line can be added.</param>
    <returns>true if allowed to start with a newline; otherwise false.</returns>
    <code>
      $hb = new LJCHTMLBuilder();

      $retValue = hb-&gt;StartWithNewLine(true);
      $result = retValue-&gt;ToString();

      // result:
      // False
    </code>
  </StartWithNewLine>
  <GetAttribs>
    <summary>
      Gets the attributes text.
    </summary>
    <param name="$htmlAttribs">The attributes collection.</param>
    <param name="$textState">The current text state values.</param>
    <returns>The attributes text.</returns>
    <remarks>
      The returned text does not end with a new line. This allows for additions
      after the text.&lt;br /&gt;
      Begin, Create and End text will start with a new line if the builder text
      already has a value.&lt;br /&gt;
    </remarks>
    <code>
      // Root Method Begin
      $textState = new TextState();

      // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
      $hb = new LJCHTMLBuilder(textState);

      $attribs = new LJCAttributes();
      $attribs->Add("class", "Selector");
      $hb-&gt;Begin("div", $textState, $attribs);
      $hb-&gt;End("div", $textState);
      $result = $hb-&gt;ToString();

      // result:
      // &amp;lt;div class="Selector"&amp;gt;
      // &amp;lt;div&amp;gt;
    </code>
  </GetAttribs>
  <GetIndented>
    <summary>
      Gets a new potentially indented line.
    </summary>
    <param name="$text">The add text.</param>
    <returns>The potentially indented new text value.</returns>
    <code>
      // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
      $hb = new LJCHTMLBuilder();

      // Example Method:
      $result = hb-&gt;GetIndented("This text is NOT indented.");
      $hb-&gt;AddText($result);

      // The builder keeps track of the current number of indents.
      $hb-&gt;AddIndent(2);
      $hb-&gt;AddLine();
      $result = $hb-&gt;GetIndented("This text is indented.");
      $hb-&gt;AddText($result);
      $result = $hb-&gt;ToString();

      // result:
      // This text is NOT indented.
      //     This text is indented.
    </code>
  </GetIndented>
  <GetIndentString>
    <summary>
      Returns the current indent string.
    </summary>
    <returns>The current indent string.</returns>
    <code>
      // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
      $hb = new LJCHTMLBuilder();

      $hb-&gt;AddIndent(1);

      // Example Method:
      $result = hb-&gt;GetIndentString();
      $hb-&gt;AddText($result);

      $hb-&gt;AddText(":");
      $result = hb-&gt;ToString();

      // result:
      //   :
    </code>
  </GetIndentString>
  <GetLine>
    <summary>
      Gets a modified text line.
    </summary>
    <param name="$text">The text value.</param>
    <param name="$addIndent">Indicates if the element can be indented.</param>
    <param name="$allowNewLine">Indicates if a new line can be added.</param>
    <returns>The potentially indented and wrapped new text value.</returns>
    <remarks>
      GetLine() is a "GetString" method. It creates and returns the potentially
      indented and wrapped text. It will start the returned text with a new line
      if the builder already has text.&lt;br /&gt;
      It appends a new line to the returned text.
      The applied indent is the product of the class properties IndentCount
      and IndentCharCount. (IndentCount * IndentCharCount).&lt;br /&gt;
      The "addIndent" parameter defaults to true. Set it to false to prevent
      indenting the line further.&lt;br /&gt;
      The "allowNewLine" parameter defaults to true. Set it to false to prevent
      starting with a new line.&lt;br /&gt;
      Wraps the text with a newline if the WrapEnabled parameter is true and the
      line length is greater than LineLimit.&lt;br /&gt;
      GetLine() works the same as GetText() except it appends a new line.
    </remarks>
    <code>
      // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
      $hb = new LJCHTMLBuilder();

      $hb-&gt;AddText("This is an appended line.");

      // The builder keeps track of the current number of indents.
      $hb-&gt;AddIndent();

      // Example Method:
      // Starts the text with a newline if the builder already has text
      // and param allowNewLine = true and builder text does not end with
      // a newline.
      // The text begins with the current indent string if param
      // addIndent = true.
      // Ends the text with a newline.
      // Defaults: addIndent = true, allowNewLine = true.
      $text = $hb-&gt;GetLine();
      $hb-&gt;AddText($text);

      $hb-&gt;Text(":");
      $result = hb-&gt;ToString();

      // result:
      // This is an appended line.
      //
      // :
    </code>
  </GetLine>
  <GetText>
    <summary>
      Gets potentially indented and wrapped text.
    </summary>
    <param name="$text">The text value.</param>
    <param name="$addIndent">Indicates if the element can be indented.</param>
    <param name="$allowNewLine">Indicates if a new line can be added.</param>
    <returns>The potentially indented and wrapped new text value.</returns>
    <remarks>
      GetText() is a "GetString" method. It creates and returns the potentially
      indented and wrapped text. It will start the returned text with a new line
      if the builder already has text.&lt;br /&gt;
      The applied indent is the product of the class properties IndentCount
      and IndentCharCount. (IndentCount * IndentCharCount).&lt;br /&gt;
      The "addIndent" parameter defaults to true. Set it to false to prevent
      indenting the line further.&lt;br /&gt;
      The "allowNewLine" parameter defaults to true. Set it to false to prevent
      starting with a new line.&lt;br /&gt;
      Wraps the text with a newline if the WrapEnabled parameter is true and the
      line length is greater than LineLimit.
    </remarks>
    <code>
      // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
      $hb = new LJCHTMLBuilder();

      $hb-&gt;Text("This is an appended line.");

      // The builder keeps track of the current number of indents.
      $hb-&gt;AddIndent();

      // Example Method:
      // Starts the text with a newline if the builder already has text
      // and param allowNewLine = true and builder text does not end with
      // a newline.
      // The text begins with the current indent string if param
      // addIndent = true.
      // Defaults: addIndent = true, allowNewLine = true.
      $text = $hb-&gt;GetText("This is an indented line.");
      $hb-&gt;AddText($text);
      $result = $hb-&gt;ToString();

      // result:
      // This is an appended line.
      //   This is an indented line.
    </code>
  </GetText>
  <!-- Append Element Methods (7) -->
  <Begin>
    <summary>
      Appends the element begin tag.
    </summary>
    <param name="$name">The element name.</param>
    <param name="$textState">The current text state values.</param>
    <param name="$attribs">The element attributes.</param>
    <param name="$addIndent">
      Indicates if the element can be indented.
    </param>
    <param name="childIndent">
      Indicates if the child elements should be indented.
    </param>
    <returns>The added element begin tag.</returns>
    <remarks>
      Begin() is an "Append" method. It creates the element opening tag with
      GetCreate() and adds it to the builder.
      The appended text does not end with a new line. This allows for additions
      after the text.&lt;br /&gt;
      The added text will start with a new line if the builder text already has
      a value.
    </remarks>
    <code>
      // Root Method Begin
      $textState = new LJCTextState();

      // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
      $hb = new LJCHTMLBuilder($textState);

      $attribs = $hb-&gt;StartAttribs();

      // Example Method:
      // Starts the text with a newline if the builder already has text
      // and param allowNewLine = true and builder text does not end with
      // a newline.
      // The text begins with the current indent string if param
      // addIndent = true.
      // Defaults: addIndent = true, allowNewLine = true.
      $hb-&gt;Begin("html", $textState, $attribs);

      $hb-&gt;End("html", $textState);
      $result = $hb-&gt;ToString();

      // result:
      // &amp;lt;html lang=\"en\" xmlns=\"http://www.w3.org/1999/xhtml\"&amp;gt;
      // &amp;lt;/html&amp;gt;
    </code>
  </Begin>
  <Create>
    <summary>
      Appends an element.
    </summary>
    <param name="$name">The element name.</param>
    <param name="$text">The element content text.</param>
    <param name="$textState">The current text state values.</param>
    <param name="$htmlAttribs">The element attributes.</param>
    <param name="$addIndent">
      Indicates if the element can be indented.
    </param>
    <param name="childIndent">
      Indicates if the child elements should be indented.
    </param>
    <param name="isEmpty">Indicates if an empty element.</param>
    <param name="close">Indicates if the element will be closed.</param>
    <returns>The added HTML element.</returns>
    <remarks>
      Create() is an "Append" method. It creates the element text with
      GetCreate() and adds it to the builder.
      The appended text does not end with a new line. This allows for additions
      after the text.&lt;br /&gt;
      The added text will start with a new line if the builder text already has
      a value.
    </remarks>
    <code>
      // Root Method Begin
      $textState = new LJCTextState();

      // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
      $hb = new LJCHTMLBuilder($textState);

      // Example Method:
      $attribs = $hb-&gt;StartAttribs();
      // Defaults: close = true.
      $hb-&gt;Create("html", null, $textState, $attribs);
      $result = $hb-&gt;ToString();

      // result:
      // &amp;lt;html lang=\"en\" xmlns=\"http://www.w3.org/1999/xhtml\"&amp;gt;&amp;lt;html&amp;gt;
    </code>
  </Create>
  <End>
    <summary>
      Appends the element end tag.
    </summary>
    <param name="$name">The element name.</param>
    <param name="$textState">The current text state values.</param>"
    <param name="$addIndent">
      Indicates if the element can be indented.
    </param>
    <returns>The added element end tag.</returns>
    <remarks>
      End() is an "Append" method. It creates the element text with GetEnd()
      and adds it to the builder.<br />
      The appended text does not end with a new line. This allows for additions
      after the text.<br />
      The added text will start with a new line if the builder text already has
      a value.
    </remarks>
    <code>
      // Root Method Begin
      $textState = new LJCTextState();

      // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
      $hb = new LJCHTMLBuilder($textState);

      // Example Method:
      $result = $hb-&gt;GetEnd("html", $textState);

      // result:
      // &amp;lt;/html&amp;gt;
    </code>
  </End>
  <!-- Get Element Methods (9) -->
  <AddChildIndent>
    <summary>
      Adds the new (child) indents.
    </summary>
    <param name="$createText">The previously created text.</param>
    <param name="$textState">The TextState object.</param>
    <remarks>
      Adds an indent for following child elements.&lt;br /&gt;
      The indent will only be added if the createText length &gt; 0 and the
      textState.ChildIndentCount &gt; 0.
    </remarks>
    <code>
      // Root Method Begin
      $textState = new LJCTextState();

      $result = self::CustomBegin("body", $textState);

      // result:
      // &amp;lt;body&amp;gt;

      private static string CustomBegin(string $name, LJCTextState $textState
      , LJCAttributes $attribs = null, bool $addIndent = true
      , bool $childIndent = true)
      {
        // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
        $hb = new LJCHTMLBuilder($textState);

        $createText = hb-&gt;GetBegin(name, $textState, $attribs, $addIndent
          , $childIndent);
        // Use NoIndent after a "GetText" method.
        $hb-&gt;Text($createText, $NoIndent);
        // Use AddChildIndent after beginning an element.
        $hb-&gt;AddChildIndent($createText, $textState);
        $result = $hb-&gt;ToString();

        // Append Method
        //hb-&gt;UpdateState($textState);
        return result;
      }
    </code>
  </AddChildIndent>
  <GetBegin>
    <summary>
      Gets the element begin tag.
    </summary>
    <param name="$name">The element name.</param>
    <param name="$textState">The current text state values.</param>
    <param name="$htmlAttribs">The element attributes.</param>
    <param name="$addIndent">
      Indicates if the element can be indented.
    </param>
    <param name="childIndent">
      Indicates if the child indent should be applied.
    </param>"
    <returns>The HTML element begin tag.</returns>
    <remarks>
      GetBegin() is an "GetText" method which creates the element opening tag
      with GetCreate() and returns the text value.&lt;br /&gt;
      Note: One should set the "addIndent" parameter to false when adding text
      to the builder after getting the text with a "GetText" method. This is
      because the the indent has already been added with the "GetText"
      method.
    </remarks>
    <code>
      // Root Method Begin
      $textState = new LJCTextState();

      // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
      $hb = new LJCHTMLBuilder();

      // Example Method:
      // Starts the text with a newline if the builder already has text
      // and param allowNewLine = true and builder text does not end with
      // a newline.
      // The text begins with the current indent string if param
      // addIndent = true.
      // Defaults: addIndent = true, allowNewLine = true.
      $result = $hb-&gt;GetBegin("body", $textState);

      // result:
      // &amp;lt;body&amp;gt;
    </code>
  </GetBegin>
  <GetCreate>
    <summary>
      Gets an element.
    </summary>
    <param name="$name">The element name.</param>
    <param name="$text">The element content text.</param>
    <param name="$textState">The current text state values.</param>
    <param name="$htmlAttribs">The element attributes.</param>
    <param name="$addIndent">
      Indicates if the element can be indented.
    </param>
    <param name="childIndent">
      Indicates if the child indent should be applied.
    </param>"
    <param name="isEmpty">Indicates if an empty element.</param>
    <param name="close">Indicates if the element will be closed.</param>
    <returns>The HTML element.</returns>
    <remarks>
      GetCreate() is a "GetText" method which creates the element or element
      opening tag and returns the text value. It is called from other element
      create methods.&lt;br /&gt;
      The addIndent parameter defaults to true, which starts the text with the
      current indent string.&lt;br /&gt;
      The isEmpty element defaults to false, which does not add the empty
      element slash.&lt;br /&gt;
      If isEmpty is true, the empty element slash is added and the close
      parameter is ignored. The element will not include the closing tag.
      &lt;br /&gt;
      The ChildIndentCount is incremented if the element is not empty and
      not closed.
    </remarks>
    <code>
      // Root Method Begin
      $textState = new LJCTextState();

      // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
      $hb = new HTMLBuilder($textState);

      // Example Method:
      // Defaults: close = true.
      $hb-&gt;Create("head", null, $textState);
      $result = $hb-&gt;ToString();

      // result:
      // &amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;
    </code>
  </GetCreate>
  <GetEnd>
    <summary>
      Gets the element end tag.
    </summary>
    <param name="$name">The element name.</param>
    <param name="$textState">The current text state values.</param>
    <param name="$addIndent">
      Indicates if the element can be indented.
    </param>
    <returns>The element end tag.</returns>
    <remarks>
      GetEnd() is a "GetText" method which creates the element closing tag
      and returns the text value.
    </remarks>
    <code>
      // Root Method Begin
      $textState = new LJCTextState();

      // Defaults: IndentCharCount = 2, LineLimit = 80, WrapEnabled = false.
      $hb = new LJCHTMLBuilder($textState);

      // Example Method:
      // Defaults: close = true.
      $hb-&gt;End("head", $textState);
      $result = $hb-&gt;ToString();

      // result:
      // &amp;lt;/head&amp;gt;
    </code>
  </GetEnd>
  <!-- Get Element Attribs Methods (3) -->
  <Attribs>
    <summary>
      Gets common element attributes.
    </summary>
    <param name="$className">The class attribute.</param>
    <param name="$id">The id attribute.</param>
    <returns>The common element attributes collection.</returns>
    <code>
      // Root Method Begin
      $textState = new LJCTextState();

      $hb = new LJCHTMLBuilder(textState);

      // Example Method:
      $className = "className";
      $id = "id";
      Attributes $attribs = $hb-&gt;Attribs($className, $id);
    </code>
  </Attribs>
  <StartAttribs>
    <summary>
      Creates the HTML start attributes.
    </summary>
    <returns>The HTML start attributes.</returns>
    <code>
      // Root Method Begin
      $textState = new LJCTextState();

      $hb = new LJCHTMLBuilder($textState);

      // Example Method:
      $attribs = $hb-&gt;StartAttribs();

      $result = $hb-&gt;GetAttribs($attribs, $textState);

      // result:
      // lang=\"en\" xmlns=\"http://www.w3.org/1999/xhtml"
    </code>
  </StartAttribs>
  <TableAttribs>
    <summary>
      Gets common table attributes.
    </summary>
    <param name="$border">The border attribute.</param>
    <param name="$cellSpacing">The cellspacing attribute</param>
    <param name="$cellPadding">The cellpadding attribute</param>
    <param name="$className">The class attribute.</param>
    <param name="$id">The id attribute.</param>
    <returns>The common table attributes.</returns>
    <code>
      // Root Method Begin
      $textState = new LJCTextState();

      $hb = new LJCHTMLBuilder($textState);

      // Example Method:
      $border = 1;
      $cellspacing = 2;
      $cellpadding = 3;
      // Defaults: border = 1, cellspacing = 0, cellpadding = 2.
      $attribs = $hb-&gt;TableAttribs($border, $cellspacing, $cellpadding);

      $result = $hb-&gt;GetAttribs($attribs, $textState);

      // result:
      // border="1" cellspacing="2" cellpadding="3"
    </code>
  </TableAttribs>
</items>