---------------
LJCComments.SetComment line:
|	/// <summary>Contains Classes to represent a Collection.</summary>
|
LJCComments.SetComment comment:
|Contains Classes to represent a Collection.|
**
LJCDocDataGen.ProcessLib summary:
|Contains Classes to represent a Collection.|
Remarks
---------------
LJCComments.SetComment line:
|	/// <include path='items/LJCCollectionBase/*' file='Doc/LJCCollectionBase.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// Represents a Collection of objects.
|
LJCComments.SetComment isContinue:
| Represents a Collection of objects.
|
---------------
LJCComments.SetComment line:
|/// Testing include of cr/lf.
|
LJCComments.SetComment isContinue:
| Testing include of cr/lf.
|
---------------
LJCComments.SetComment line:
|/// </summary>|
LJCComments.SetComment isContinue
---------------
LJCComments.SetComment line:
|/// <remarks>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// The LJCCollectionBase class provides the code that can be inherited to
|
LJCComments.SetComment isContinue:
| The LJCCollectionBase class provides the code that can be inherited to
|
---------------
LJCComments.SetComment line:
|/// create a strongly typed Collection.
|
LJCComments.SetComment isContinue:
| create a strongly typed Collection.
|
---------------
LJCComments.SetComment line:
|/// &lt;p&gt;
|
LJCComments.SetComment isContinue:
| &lt;p&gt;
|
---------------
LJCComments.SetComment line:
|/// It accomplishes this by implementing IteratorAggregate which provides
|
LJCComments.SetComment isContinue:
| It accomplishes this by implementing IteratorAggregate which provides
|
---------------
LJCComments.SetComment line:
|/// "foreach" functionality and Countable which provides "count" functionality.
|
LJCComments.SetComment isContinue:
| "foreach" functionality and Countable which provides "count" functionality.
|
---------------
LJCComments.SetComment line:
|/// &lt;/p&gt;
|
LJCComments.SetComment isContinue:
| &lt;/p&gt;
|
---------------
LJCComments.SetComment line:
|/// &lt;p&gt;
|
LJCComments.SetComment isContinue:
| &lt;p&gt;
|
---------------
LJCComments.SetComment line:
|/// A strongly typed collection class would extend (inherit) from this base
|
LJCComments.SetComment isContinue:
| A strongly typed collection class would extend (inherit) from this base
|
---------------
LJCComments.SetComment line:
|/// class  and add an AddObject() method that would require the strongly typed
|
LJCComments.SetComment isContinue:
| class  and add an AddObject() method that would require the strongly typed
|
---------------
LJCComments.SetComment line:
|/// object collection element. This is what makes the collection strongly
|
LJCComments.SetComment isContinue:
| object collection element. This is what makes the collection strongly
|
---------------
LJCComments.SetComment line:
|/// typed.
|
LJCComments.SetComment isContinue:
| typed.
|
---------------
LJCComments.SetComment line:
|/// &lt;/p&gt;
|
LJCComments.SetComment isContinue:
| &lt;/p&gt;
|
---------------
LJCComments.SetComment line:
|/// &lt;p&gt;
|
LJCComments.SetComment isContinue:
| &lt;p&gt;
|
---------------
LJCComments.SetComment line:
|/// The strongly typed collection class would also provide a Get() method
|
LJCComments.SetComment isContinue:
| The strongly typed collection class would also provide a Get() method
|
---------------
LJCComments.SetComment line:
|/// that could retrieve the internal array element by key.
|
LJCComments.SetComment isContinue:
| that could retrieve the internal array element by key.
|
---------------
LJCComments.SetComment line:
|/// &lt;/p&gt;
|
LJCComments.SetComment isContinue:
| &lt;/p&gt;
|
---------------
LJCComments.SetComment line:
|/// For an example of how this works, see class: LJCDBAccessLib-LJCDbColumns.
|
LJCComments.SetComment isContinue:
| For an example of how this works, see class: LJCDBAccessLib-LJCDbColumns.
|
---------------
LJCComments.SetComment line:
|/// </remarks>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
ClassName:
|LJCCollectionBase|
**
LJCDocDataGen.ProcessClass summary:
|
 Represents a Collection of objects.
 Testing include of cr/lf.
|
Syntax:
|class LJCCollectionBase implements IteratorAggregate, Countable|
Remarks:
|
 The LJCCollectionBase class provides the code that can be inherited to
 create a strongly typed Collection.
 &amp;lt;p&amp;gt;
 It accomplishes this by implementing IteratorAggregate which provides
 &quot;foreach&quot; functionality and Countable which provides &quot;count&quot; functionality.
 &amp;lt;/p&amp;gt;
 &amp;lt;p&amp;gt;
 A strongly typed collection class would extend (inherit) from this base
 class  and add an AddObject() method that would require the strongly typed
 object collection element. This is what makes the collection strongly
 typed.
 &amp;lt;/p&amp;gt;
 &amp;lt;p&amp;gt;
 The strongly typed collection class would also provide a Get() method
 that could retrieve the internal array element by key.
 &amp;lt;/p&amp;gt;
 For an example of how this works, see class: LJCDBAccessLib-LJCDbColumns.
|
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/AddItem/*' file='Doc/LJCCollectionBase.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Adds an object and key value.</summary>|
LJCComments.SetComment comment:
|Adds an object and key value.|
---------------
LJCComments.SetComment line:
|///     <param name="$item">The object to be added to the collection.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$key">The element key.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The added item.</returns>|
LJCComments.SetComment comment:
|The added item.|
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCCollectionLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCCollectionLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // Add to class that extends LJCCollectionBase|
LJCComments.SetComment isContinue:
| // Add to class that extends LJCCollectionBase|
---------------
LJCComments.SetComment line:
|/// // Adds an object and key value.|
LJCComments.SetComment isContinue:
| // Adds an object and key value.|
---------------
LJCComments.SetComment line:
|/// public function AddObject(ObjectItem $item, $key = null)|
LJCComments.SetComment isContinue:
| public function AddObject(ObjectItem $item, $key = null)|
---------------
LJCComments.SetComment line:
|/// {|
LJCComments.SetComment isContinue:
| {|
---------------
LJCComments.SetComment line:
|///   if (null == $key)|
LJCComments.SetComment isContinue:
|   if (null == $key)|
---------------
LJCComments.SetComment line:
|///   {|
LJCComments.SetComment isContinue:
|   {|
---------------
LJCComments.SetComment line:
|///     $key = $item->Name;|
LJCComments.SetComment isContinue:
|     $key = $item->Name;|
---------------
LJCComments.SetComment line:
|///   }|
LJCComments.SetComment isContinue:
|   }|
---------------
LJCComments.SetComment line:
|///   $retValue = $this->&lt;b&gt;AddItem&lt;/b&gt;($item, $key);|
LJCComments.SetComment isContinue:
|   $retValue = $this->&lt;b&gt;AddItem&lt;/b&gt;($item, $key);|
---------------
LJCComments.SetComment line:
|///   return $retValue;|
LJCComments.SetComment isContinue:
|   return $retValue;|
---------------
LJCComments.SetComment line:
|/// }|
LJCComments.SetComment isContinue:
| }|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|AddItem|
**
LJCDocDataGen.ProcessFunction summary:
|Adds an object and key value.|
Syntax:
|protected function AddItem($item, $key = null)|
Returns:
|The added item.|
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCCollectionLib.php&quot;;
 
 // Add to class that extends LJCCollectionBase
 // Adds an object and key value.
 public function AddObject(ObjectItem $item, $key = null)
 {
   if (null == $key)
   {
     $key = $item-&gt;Name;
   }
   $retValue = $this-&gt;&amp;lt;b&amp;gt;AddItem&amp;lt;/b&amp;gt;($item, $key);
   return $retValue;
 }|
---------------
LJCComments.SetComment line:
|		/// <include path='items/GetItem/*' file='Doc/LJCCollectionBase.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Get the item by Key value.</summary>|
LJCComments.SetComment comment:
|Get the item by Key value.|
---------------
LJCComments.SetComment line:
|///     <param name="$key">The element key.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$throwError">Indicates if an error should be thrown if the key is not found.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The object with the matching key value.</returns>|
LJCComments.SetComment comment:
|The object with the matching key value.|
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCCollectionLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCCollectionLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // Add to class that extends LJCCollectionBase|
LJCComments.SetComment isContinue:
| // Add to class that extends LJCCollectionBase|
---------------
LJCComments.SetComment line:
|/// // Get the item by Key value.|
LJCComments.SetComment isContinue:
| // Get the item by Key value.|
---------------
LJCComments.SetComment line:
|/// public function Get($key)|
LJCComments.SetComment isContinue:
| public function Get($key)|
---------------
LJCComments.SetComment line:
|/// {|
LJCComments.SetComment isContinue:
| {|
---------------
LJCComments.SetComment line:
|///   $retValue = $this->&lt;b&gt;GetItem&lt;/b&gt;($key, $throwError);|
LJCComments.SetComment isContinue:
|   $retValue = $this->&lt;b&gt;GetItem&lt;/b&gt;($key, $throwError);|
---------------
LJCComments.SetComment line:
|///   return $retValue;|
LJCComments.SetComment isContinue:
|   return $retValue;|
---------------
LJCComments.SetComment line:
|/// }|
LJCComments.SetComment isContinue:
| }|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|GetItem|
**
LJCDocDataGen.ProcessFunction summary:
|Get the item by Key value.|
Syntax:
|protected function GetItem($key, bool $throwError = true)|
Returns:
|The object with the matching key value.|
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCCollectionLib.php&quot;;
 
 // Add to class that extends LJCCollectionBase
 // Get the item by Key value.
 public function Get($key)
 {
   $retValue = $this-&gt;&amp;lt;b&amp;gt;GetItem&amp;lt;/b&amp;gt;($key, $throwError);
   return $retValue;
 }|
---------------
LJCComments.SetComment line:
|		/// <summary>Gets an indexed array of keys.</summary>
|
LJCComments.SetComment comment:
|Gets an indexed array of keys.|
---------------
LJCComments.SetComment line:
|		/// <returns>The indexed keys array.</returns>
|
LJCComments.SetComment comment:
|The indexed keys array.|
FunctionName:
|GetKeys|
**
LJCDocDataGen.ProcessFunction summary:
|Gets an indexed array of keys.|
Syntax:
|public function GetKeys() : array|
Returns:
|The indexed keys array.|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <summary>Gets an indexed array of objects.</summary>
|
LJCComments.SetComment comment:
|Gets an indexed array of objects.|
---------------
LJCComments.SetComment line:
|		/// <returns>The indexed values array.</returns>
|
LJCComments.SetComment comment:
|The indexed values array.|
FunctionName:
|GetValues|
**
LJCDocDataGen.ProcessFunction summary:
|Gets an indexed array of objects.|
Syntax:
|public function GetValues() : array|
Returns:
|The indexed values array.|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/HasKey/*' file='Doc/LJCCollectionBase.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Indicates if a key already exists.</summary>|
LJCComments.SetComment comment:
|Indicates if a key already exists.|
---------------
LJCComments.SetComment line:
|///     <param name="$key">The element key.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>True if the key already exists, otherwise false.</returns>|
LJCComments.SetComment comment:
|True if the key already exists, otherwise false.|
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCCollectionLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCCollectionLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // $collection extends LJCCollectionBase|
LJCComments.SetComment isContinue:
| // $collection extends LJCCollectionBase|
---------------
LJCComments.SetComment line:
|/// $key = "KeyName";|
LJCComments.SetComment isContinue:
| $key = "KeyName";|
---------------
LJCComments.SetComment line:
|/// if ($collection->HasKey($key))|
LJCComments.SetComment isContinue:
| if ($collection->HasKey($key))|
---------------
LJCComments.SetComment line:
|/// {|
LJCComments.SetComment isContinue:
| {|
---------------
LJCComments.SetComment line:
|///   throw new Exception("Key: {$key} already in use.");|
LJCComments.SetComment isContinue:
|   throw new Exception("Key: {$key} already in use.");|
---------------
LJCComments.SetComment line:
|/// }|
LJCComments.SetComment isContinue:
| }|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|HasKey|
**
LJCDocDataGen.ProcessFunction summary:
|Indicates if a key already exists.|
Syntax:
|public function HasKey($key) : bool|
Returns:
|True if the key already exists, otherwise false.|
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCCollectionLib.php&quot;;
 
 // $collection extends LJCCollectionBase
 $key = &quot;KeyName&quot;;
 if ($collection-&gt;HasKey($key))
 {
   throw new Exception(&quot;Key: {$key} already in use.&quot;);
 }|
---------------
LJCComments.SetComment line:
|		/// <include path='items/Remove/*' file='Doc/LJCCollectionBase.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Remove the item by Key value.</summary>|
LJCComments.SetComment comment:
|Remove the item by Key value.|
---------------
LJCComments.SetComment line:
|///     <param name="$key">The element key.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$throwError">Indicates if an error should be thrown if the key is not found.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCCollectionLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCCollectionLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // $collection extends LJCCollectionBase|
LJCComments.SetComment isContinue:
| // $collection extends LJCCollectionBase|
---------------
LJCComments.SetComment line:
|/// $collection->Remove("KeyName");|
LJCComments.SetComment isContinue:
| $collection->Remove("KeyName");|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|Remove|
**
LJCDocDataGen.ProcessFunction summary:
|Remove the item by Key value.|
Syntax:
|public function Remove($key, bool $throwError = true) : void|
Returns
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCCollectionLib.php&quot;;
 
 // $collection extends LJCCollectionBase
 $collection-&gt;Remove(&quot;KeyName&quot;);|
---------------
LJCComments.SetComment line:
|		/// <summary>Allows Count(object).</summary>
|
LJCComments.SetComment comment:
|Allows Count(object).|
---------------
LJCComments.SetComment line:
|		/// <returns>The element count.</returns>
|
LJCComments.SetComment comment:
|The element count.|
FunctionName:
|count|
**
LJCDocDataGen.ProcessFunction summary:
|Allows Count(object).|
Syntax:
|public function count() : int|
Returns:
|The element count.|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <summary>Allows foreach()</summary>
|
LJCComments.SetComment comment:
|Allows foreach()|
FunctionName:
|getIterator|
**
LJCDocDataGen.ProcessFunction summary:
|Allows foreach()|
Syntax:
|public function getIterator() : Traversable|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <summary>The elements array.</summary>
|
LJCComments.SetComment comment:
|The elements array.|
PropertyName:
|$Item|
**
LJCDocDataGen.ProcessProperty summary:
|The elements array.|
Syntax:
|protected array $Items = [];|
Returns
Remarks
---------------
LJCComments.SetComment line:
|	/// <summary>The Common PHP Class Library</summary>
|
LJCComments.SetComment comment:
|The Common PHP Class Library|
**
LJCDocDataGen.ProcessLib summary:
|The Common PHP Class Library|
Remarks
---------------
LJCComments.SetComment line:
|	/// <summary>Contains common functions.</summary>
|
LJCComments.SetComment comment:
|Contains common functions.|
ClassName:
|LJCCommon|
**
LJCDocDataGen.ProcessClass summary:
|Contains common functions.|
Syntax:
|class LJCCommon|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/StrPos/*' file='Doc/LJCCommon.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Gets the first index for the search value.</summary>|
LJCComments.SetComment comment:
|Gets the first index for the search value.|
---------------
LJCComments.SetComment line:
|///     <param name="$text">The text to be searched.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$find">The search value.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$start">The search start index.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$exact">Indicates if a case sensitive search is performed.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The integer index value.</returns>|
LJCComments.SetComment comment:
|The integer index value.|
---------------
LJCComments.SetComment line:
|/// <remarks>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// The integer -1 is returned if the search value is not found.
|
LJCComments.SetComment isContinue:
| The integer -1 is returned if the search value is not found.
|
---------------
LJCComments.SetComment line:
|/// &lt;br /&gt;
|
LJCComments.SetComment isContinue:
| &lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// &lt;br /&gt;
|
LJCComments.SetComment isContinue:
| &lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// This alternative for PHP strpos() always returns an integer. It can be
|
LJCComments.SetComment isContinue:
| This alternative for PHP strpos() always returns an integer. It can be
|
---------------
LJCComments.SetComment line:
|/// simply tested for success $index &gt;= 0 or failure $index &lt; 0.
|
LJCComments.SetComment isContinue:
| simply tested for success $index &gt;= 0 or failure $index &lt; 0.
|
---------------
LJCComments.SetComment line:
|/// </remarks>|
LJCComments.SetComment isContinue
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCCommonLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCCommonLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // $index = 5|
LJCComments.SetComment isContinue:
| // $index = 5|
---------------
LJCComments.SetComment line:
|/// $index = LJCCommon::StrPos("This here.", "Here");|
LJCComments.SetComment isContinue:
| $index = LJCCommon::StrPos("This here.", "Here");|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // $index = -1|
LJCComments.SetComment isContinue:
| // $index = -1|
---------------
LJCComments.SetComment line:
|/// $index = LJCCommon::StrPos("This here.", "Here", exact: true);|
LJCComments.SetComment isContinue:
| $index = LJCCommon::StrPos("This here.", "Here", exact: true);|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|StrPos|
**
LJCDocDataGen.ProcessFunction summary:
|Gets the first index for the search value.|
Syntax:
|public static function StrPos(?string $text, ?string $find&lt;br /&gt;, int $start = 0, bool $exact = false) : int|
Returns:
|The integer index value.|
Remarks:
|
 The integer -1 is returned if the search value is not found.
 &amp;lt;br /&amp;gt;
 &amp;lt;br /&amp;gt;
 This alternative for PHP strpos() always returns an integer. It can be
 simply tested for success $index &amp;gt;= 0 or failure $index &amp;lt; 0.
|
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCCommonLib.php&quot;;
 
 // $index = 5
 $index = LJCCommon::StrPos(&quot;This here.&quot;, &quot;Here&quot;);
 
 // $index = -1
 $index = LJCCommon::StrPos(&quot;This here.&quot;, &quot;Here&quot;, exact: true);|
---------------
LJCComments.SetComment line:
|		/// <include path='items/StrRPos/*' file='Doc/LJCCommon.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Gets the last index for the search value.</summary>|
LJCComments.SetComment comment:
|Gets the last index for the search value.|
---------------
LJCComments.SetComment line:
|///     <param name="$text">The text to be searched.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$find">The search value.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$start">The search start index.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$exact">Indicates if a case sensitive search is performed.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The integer index value.</returns>|
LJCComments.SetComment comment:
|The integer index value.|
---------------
LJCComments.SetComment line:
|/// <remarks>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// The integer -1 is returned if the search value is not found. It can be
|
LJCComments.SetComment isContinue:
| The integer -1 is returned if the search value is not found. It can be
|
---------------
LJCComments.SetComment line:
|/// simply tested for success $index &gt;= 0 or failure $index &lt; 0.
|
LJCComments.SetComment isContinue:
| simply tested for success $index &gt;= 0 or failure $index &lt; 0.
|
---------------
LJCComments.SetComment line:
|/// &lt;br /&gt;
|
LJCComments.SetComment isContinue:
| &lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// &lt;br /&gt;
|
LJCComments.SetComment isContinue:
| &lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// This alternative for PHP strpos() always returns an integer.
|
LJCComments.SetComment isContinue:
| This alternative for PHP strpos() always returns an integer.
|
---------------
LJCComments.SetComment line:
|/// </remarks>|
LJCComments.SetComment isContinue
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCCommonLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCCommonLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // $index = 13|
LJCComments.SetComment isContinue:
| // $index = 13|
---------------
LJCComments.SetComment line:
|/// $index = LJCCommon::StrRPos("This here is here.", "Here");|
LJCComments.SetComment isContinue:
| $index = LJCCommon::StrRPos("This here is here.", "Here");|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // $index = -1|
LJCComments.SetComment isContinue:
| // $index = -1|
---------------
LJCComments.SetComment line:
|/// $index = LJCCommon::StrRPos("This here is here.", "Here", exact: true);|
LJCComments.SetComment isContinue:
| $index = LJCCommon::StrRPos("This here is here.", "Here", exact: true);|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|StrRPos|
**
LJCDocDataGen.ProcessFunction summary:
|Gets the last index for the search value.|
Syntax:
|public static function StrRPos(?string $text, ?string $find&lt;br /&gt;, int $start = 0, bool $exact = false) : int|
Returns:
|The integer index value.|
Remarks:
|
 The integer -1 is returned if the search value is not found. It can be
 simply tested for success $index &amp;gt;= 0 or failure $index &amp;lt; 0.
 &amp;lt;br /&amp;gt;
 &amp;lt;br /&amp;gt;
 This alternative for PHP strpos() always returns an integer.
|
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCCommonLib.php&quot;;
 
 // $index = 13
 $index = LJCCommon::StrRPos(&quot;This here is here.&quot;, &quot;Here&quot;);
 
 // $index = -1
 $index = LJCCommon::StrRPos(&quot;This here is here.&quot;, &quot;Here&quot;, exact: true);|
---------------
LJCComments.SetComment line:
|		/// <summary>Returns a text value as boolean.</summary>
|
LJCComments.SetComment comment:
|Returns a text value as boolean.|
FunctionName:
|GetBool|
**
LJCDocDataGen.ProcessFunction summary:
|Returns a text value as boolean.|
Syntax:
|public static function GetBool(?string $text) : bool|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/GetDebugFileName/*' file='Doc/LJCCommon.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Gets the Debug file name.</summary>|
LJCComments.SetComment comment:
|Gets the Debug file name.|
---------------
LJCComments.SetComment line:
|///     <param name="$folder">The folder name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$fileName">The file name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The Debug file spec.</returns>|
LJCComments.SetComment comment:
|The Debug file spec.|
---------------
LJCComments.SetComment line:
|/// <remarks>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// This function takes a folder name and a file name. It makes sure the
|
LJCComments.SetComment isContinue:
| This function takes a folder name and a file name. It makes sure the
|
---------------
LJCComments.SetComment line:
|/// folder exists and returns the text "folder/fileName" with the extension
|
LJCComments.SetComment isContinue:
| folder exists and returns the text "folder/fileName" with the extension
|
---------------
LJCComments.SetComment line:
|/// "txt".
|
LJCComments.SetComment isContinue:
| "txt".
|
---------------
LJCComments.SetComment line:
|/// </remarks>|
LJCComments.SetComment isContinue
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCCommonLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCCommonLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // $debugFileSpec = "Debug\SourceFile.txt"|
LJCComments.SetComment isContinue:
| // $debugFileSpec = "Debug\SourceFile.txt"|
---------------
LJCComments.SetComment line:
|/// $debugFileSpec = LJCCommon::GetDebugFileName("Debug", "SourceFile.php");|
LJCComments.SetComment isContinue:
| $debugFileSpec = LJCCommon::GetDebugFileName("Debug", "SourceFile.php");|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|GetDebugFileName|
**
LJCDocDataGen.ProcessFunction summary:
|Gets the Debug file name.|
Syntax:
|public static function GetDebugFileName(string $folder, string $fileName)|
Returns:
|The Debug file spec.|
Remarks:
|
 This function takes a folder name and a file name. It makes sure the
 folder exists and returns the text &quot;folder/fileName&quot; with the extension
 &quot;txt&quot;.
|
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCCommonLib.php&quot;;
 
 // $debugFileSpec = &quot;Debug\SourceFile.txt&quot;
 $debugFileSpec = LJCCommon::GetDebugFileName(&quot;Debug&quot;, &quot;SourceFile.php&quot;);|
---------------
LJCComments.SetComment line:
|		/// <include path='items/GetDelimitedString/*' file='Doc/LJCCommon.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Gets the string between the delimiters.</summary>|
LJCComments.SetComment comment:
|Gets the string between the delimiters.|
---------------
LJCComments.SetComment line:
|///     <param name="$text">The text to be parsed.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$beginDelimiter">The beginning delimiter.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$endDelimiter">The ending delimiter.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$lTrim">Indicates if the parsed value is to be left trimmed.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$rTrim">Indicates if the parsed value is to be right trimmed.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The parsed value.</returns>|
LJCComments.SetComment comment:
|The parsed value.|
---------------
LJCComments.SetComment line:
|/// <remarks>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// Returns null if the begin delimiter is not found.
|
LJCComments.SetComment isContinue:
| Returns null if the begin delimiter is not found.
|
---------------
LJCComments.SetComment line:
|/// &lt;br /&gt;
|
LJCComments.SetComment isContinue:
| &lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// &lt;br /&gt;
|
LJCComments.SetComment isContinue:
| &lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// Includes to the end of the string if the end delimiter is null
|
LJCComments.SetComment isContinue:
| Includes to the end of the string if the end delimiter is null
|
---------------
LJCComments.SetComment line:
|/// or not found.
|
LJCComments.SetComment isContinue:
| or not found.
|
---------------
LJCComments.SetComment line:
|/// </remarks>|
LJCComments.SetComment isContinue
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCCommonLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCCommonLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // $text = "here"|
LJCComments.SetComment isContinue:
| // $text = "here"|
---------------
LJCComments.SetComment line:
|/// $text = LJCCommon::GetDelimitedString("This | here |.", "|", "|");|
LJCComments.SetComment isContinue:
| $text = LJCCommon::GetDelimitedString("This | here |.", "|", "|");|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|GetDelimitedString|
**
LJCDocDataGen.ProcessFunction summary:
|Gets the string between the delimiters.|
Syntax:
|public static function GetDelimitedString(string $text, string $beginDelimiter&lt;br /&gt;, ?string $endDelimiter, bool $lTrim = true, bool $rTrim = true) : ?string|
Returns:
|The parsed value.|
Remarks:
|
 Returns null if the begin delimiter is not found.
 &amp;lt;br /&amp;gt;
 &amp;lt;br /&amp;gt;
 Includes to the end of the string if the end delimiter is null
 or not found.
|
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCCommonLib.php&quot;;
 
 // $text = &quot;here&quot;
 $text = LJCCommon::GetDelimitedString(&quot;This | here |.&quot;, &quot;|&quot;, &quot;|&quot;);|
---------------
LJCComments.SetComment line:
|		/// <include path='items/GetFileName/*' file='Doc/LJCCommon.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Gets the FileName from the file spec.</summary>|
LJCComments.SetComment comment:
|Gets the FileName from the file spec.|
---------------
LJCComments.SetComment line:
|///     <param name="$fileSpec">The file specification.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The file name.</returns>|
LJCComments.SetComment comment:
|The file name.|
---------------
LJCComments.SetComment line:
|/// <remarks>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// Parses from the last "/" to the following ".".
|
LJCComments.SetComment isContinue:
| Parses from the last "/" to the following ".".
|
---------------
LJCComments.SetComment line:
|/// &lt;br /&gt;
|
LJCComments.SetComment isContinue:
| &lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// &lt;br /&gt;
|
LJCComments.SetComment isContinue:
| &lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// Includes to the end of the string if the "." is not found.
|
LJCComments.SetComment isContinue:
| Includes to the end of the string if the "." is not found.
|
---------------
LJCComments.SetComment line:
|/// </remarks>|
LJCComments.SetComment isContinue
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCCommonLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCCommonLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // $text = "File"|
LJCComments.SetComment isContinue:
| // $text = "File"|
---------------
LJCComments.SetComment line:
|/// $text = LJCCommon::GetFileName("../Folder/File.txt");|
LJCComments.SetComment isContinue:
| $text = LJCCommon::GetFileName("../Folder/File.txt");|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|GetFileName|
**
LJCDocDataGen.ProcessFunction summary:
|Gets the FileName from the file spec.|
Syntax:
|public static function GetFileName(string $fileSpec) : string|
Returns:
|The file name.|
Remarks:
|
 Parses from the last &quot;/&quot; to the following &quot;.&quot;.
 &amp;lt;br /&amp;gt;
 &amp;lt;br /&amp;gt;
 Includes to the end of the string if the &quot;.&quot; is not found.
|
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCCommonLib.php&quot;;
 
 // $text = &quot;File&quot;
 $text = LJCCommon::GetFileName(&quot;../Folder/File.txt&quot;);|
---------------
LJCComments.SetComment line:
|		/// <include path='items/GetFileSpecPath/*' file='Doc/LJCCommon.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Gets the Path from the file spec.</summary>|
LJCComments.SetComment comment:
|Gets the Path from the file spec.|
---------------
LJCComments.SetComment line:
|///     <param name="$fileSpec">The file specification.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The file path.</returns>|
LJCComments.SetComment comment:
|The file path.|
---------------
LJCComments.SetComment line:
|/// <remarks>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// Parses to the last "/".
|
LJCComments.SetComment isContinue:
| Parses to the last "/".
|
---------------
LJCComments.SetComment line:
|/// </remarks>|
LJCComments.SetComment isContinue
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCCommonLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCCommonLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // $text = "../Folder"|
LJCComments.SetComment isContinue:
| // $text = "../Folder"|
---------------
LJCComments.SetComment line:
|/// $text = LJCCommon::GetFileSpecPath("../Folder/File.txt");|
LJCComments.SetComment isContinue:
| $text = LJCCommon::GetFileSpecPath("../Folder/File.txt");|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|GetFileSpecPath|
**
LJCDocDataGen.ProcessFunction summary:
|Gets the Path from the file spec.|
Syntax:
|public static function GetFileSpecPath(string $fileSpec) : string|
Returns:
|The file path.|
Remarks:
|
 Parses to the last &quot;/&quot;.
|
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCCommonLib.php&quot;;
 
 // $text = &quot;../Folder&quot;
 $text = LJCCommon::GetFileSpecPath(&quot;../Folder/File.txt&quot;);|
---------------
LJCComments.SetComment line:
|		/// <include path='items/GetIndexedDebugFileName/*' file='Doc/LJCCommon.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Gets the indexed Debug file name.</summary>|
LJCComments.SetComment comment:
|Gets the indexed Debug file name.|
---------------
LJCComments.SetComment line:
|///     <param name="$folder">The folder name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$fileName">The file name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The indexed Debug file spec.</returns>|
LJCComments.SetComment comment:
|The indexed Debug file spec.|
---------------
LJCComments.SetComment line:
|/// <remarks>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// This function takes a folder name and a file name. It makes sure the
|
LJCComments.SetComment isContinue:
| This function takes a folder name and a file name. It makes sure the
|
---------------
LJCComments.SetComment line:
|/// folder exists and returns the text "folder/fileName$index" with the
|
LJCComments.SetComment isContinue:
| folder exists and returns the text "folder/fileName$index" with the
|
---------------
LJCComments.SetComment line:
|/// extension "txt".
|
LJCComments.SetComment isContinue:
| extension "txt".
|
---------------
LJCComments.SetComment line:
|/// &lt;br /&gt;
|
LJCComments.SetComment isContinue:
| &lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// &lt;br /&gt;
|
LJCComments.SetComment isContinue:
| &lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// The variable $index in the example file name indicates a unique index
|
LJCComments.SetComment isContinue:
| The variable $index in the example file name indicates a unique index
|
---------------
LJCComments.SetComment line:
|/// value that does not already exist on disk. It begins checking with an
|
LJCComments.SetComment isContinue:
| value that does not already exist on disk. It begins checking with an
|
---------------
LJCComments.SetComment line:
|/// index value of 1.
|
LJCComments.SetComment isContinue:
| index value of 1.
|
---------------
LJCComments.SetComment line:
|/// </remarks>|
LJCComments.SetComment isContinue
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCCommonLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCCommonLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // $debugFileSpec = "Debug\SourceFile1.txt"|
LJCComments.SetComment isContinue:
| // $debugFileSpec = "Debug\SourceFile1.txt"|
---------------
LJCComments.SetComment line:
|/// $debugFileSpec = LJCCommon::GetIndexedDebugFileName("Debug"|
LJCComments.SetComment isContinue:
| $debugFileSpec = LJCCommon::GetIndexedDebugFileName("Debug"|
---------------
LJCComments.SetComment line:
|///   , "SourceFile.php");|
LJCComments.SetComment isContinue:
|   , "SourceFile.php");|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|GetIndexedDebugFileName|
**
LJCDocDataGen.ProcessFunction summary:
|Gets the indexed Debug file name.|
Syntax:
|public static function GetIndexedDebugFileName(string $folder&lt;br /&gt;, string $fileName)	: string|
Returns:
|The indexed Debug file spec.|
Remarks:
|
 This function takes a folder name and a file name. It makes sure the
 folder exists and returns the text &quot;folder/fileName$index&quot; with the
 extension &quot;txt&quot;.
 &amp;lt;br /&amp;gt;
 &amp;lt;br /&amp;gt;
 The variable $index in the example file name indicates a unique index
 value that does not already exist on disk. It begins checking with an
 index value of 1.
|
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCCommonLib.php&quot;;
 
 // $debugFileSpec = &quot;Debug\SourceFile1.txt&quot;
 $debugFileSpec = LJCCommon::GetIndexedDebugFileName(&quot;Debug&quot;
   , &quot;SourceFile.php&quot;);|
---------------
LJCComments.SetComment line:
|		/// <summary>Get string tokens.</summary>
|
LJCComments.SetComment comment:
|Get string tokens.|
---------------
LJCComments.SetComment line:
|		/// <param name="$text">The string value.</param>
|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|		/// <param name="$splitString">The split string value.</param>
|
LJCComments.SetComment comment
FunctionName:
|GetTokens|
**
LJCDocDataGen.ProcessFunction summary:
|Get string tokens.|
Syntax:
|public static function GetTokens(string $text, ?string $splitString = null)|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <summary>Creates the specified folder if it does not already exist.</summary>
|
LJCComments.SetComment comment:
|Creates the specified folder if it does not already exist.|
---------------
LJCComments.SetComment line:
|		/// <param name="$folder">The folder name.</param>
|
LJCComments.SetComment comment
FunctionName:
|MkDir|
**
LJCDocDataGen.ProcessFunction summary:
|Creates the specified folder if it does not already exist.|
Syntax:
|public static function MkDir(string $folder)|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/Scrub/*' file='Doc/LJCCommon.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Returns a scrubbed external value.</summary>|
LJCComments.SetComment comment:
|Returns a scrubbed external value.|
---------------
LJCComments.SetComment line:
|///     <param name="$text">The text to be scrubbed.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The scrubbed value.</returns>|
LJCComments.SetComment comment:
|The scrubbed value.|
---------------
LJCComments.SetComment line:
|/// <remarks>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// Trims the text, strips slashes and converts HTML characters to HTML
|
LJCComments.SetComment isContinue:
| Trims the text, strips slashes and converts HTML characters to HTML
|
---------------
LJCComments.SetComment line:
|/// entities.
|
LJCComments.SetComment isContinue:
| entities.
|
---------------
LJCComments.SetComment line:
|/// </remarks>|
LJCComments.SetComment isContinue
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCCommonLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCCommonLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // $text = "&amp;amp;lt;tag&amp;amp;gt;"|
LJCComments.SetComment isContinue:
| // $text = "&amp;amp;lt;tag&amp;amp;gt;"|
---------------
LJCComments.SetComment line:
|/// $text = LJCCommon::Scrub(" &amp;lt;/tag&amp;gt; ");|
LJCComments.SetComment isContinue:
| $text = LJCCommon::Scrub(" &amp;lt;/tag&amp;gt; ");|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|Scrub|
**
LJCDocDataGen.ProcessFunction summary:
|Returns a scrubbed external value.|
Syntax:
|public static function Scrub(string $text) : string|
Returns:
|The scrubbed value.|
Remarks:
|
 Trims the text, strips slashes and converts HTML characters to HTML
 entities.
|
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCCommonLib.php&quot;;
 
 // $text = &quot;&amp;amp;amp;lt;tag&amp;amp;amp;gt;&quot;
 $text = LJCCommon::Scrub(&quot; &amp;amp;lt;/tag&amp;amp;gt; &quot;);|
---------------
LJCComments.SetComment line:
|		/// <include path='items/SetSessionValue/*' file='Doc/LJCCommon.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Assigns a session value and returns the value.</summary>|
LJCComments.SetComment comment:
|Assigns a session value and returns the value.|
---------------
LJCComments.SetComment line:
|///     <param name="$name">The session value name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$value">The session value.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The session value.</returns>|
LJCComments.SetComment comment:
|The session value.|
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCCommonLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCCommonLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // $dbServer = "localhost"|
LJCComments.SetComment isContinue:
| // $dbServer = "localhost"|
---------------
LJCComments.SetComment line:
|/// $dbServer = LJCCommon::SetSessionValue("dbServer", "localhost");|
LJCComments.SetComment isContinue:
| $dbServer = LJCCommon::SetSessionValue("dbServer", "localhost");|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|SetSessionValue|
**
LJCDocDataGen.ProcessFunction summary:
|Assigns a session value and returns the value.|
Syntax:
|public static function SetSessionValue(string $name, $value)|
Returns:
|The session value.|
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCCommonLib.php&quot;;
 
 // $dbServer = &quot;localhost&quot;
 $dbServer = LJCCommon::SetSessionValue(&quot;dbServer&quot;, &quot;localhost&quot;);|
---------------
LJCComments.SetComment line:
|	/// <summary>The PDO Data Manager Library</summary>
|
LJCComments.SetComment comment:
|The PDO Data Manager Library|
**
LJCDocDataGen.ProcessLib summary:
|The PDO Data Manager Library|
Remarks
---------------
LJCComments.SetComment line:
|	/// <include path='items/LJCDataManager/*' file='Doc/LJCDataManager.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Provides Standard DB Table methods.</summary>|
LJCComments.SetComment comment:
|Provides Standard DB Table methods.|
---------------
LJCComments.SetComment line:
|/// <remarks>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// The DataManager class provides a higher level of abstraction on top of the
|
LJCComments.SetComment isContinue:
| The DataManager class provides a higher level of abstraction on top of the
|
---------------
LJCComments.SetComment line:
|/// DataAccess class.
|
LJCComments.SetComment isContinue:
| DataAccess class.
|
---------------
LJCComments.SetComment line:
|/// &lt;p&gt;
|
LJCComments.SetComment isContinue:
| &lt;p&gt;
|
---------------
LJCComments.SetComment line:
|/// It does not require the developer to create SQL statements. Instead the
|
LJCComments.SetComment isContinue:
| It does not require the developer to create SQL statements. Instead the
|
---------------
LJCComments.SetComment line:
|/// developer can use strongly typed DataObjects, KeyColumn definitions, Join
|
LJCComments.SetComment isContinue:
| developer can use strongly typed DataObjects, KeyColumn definitions, Join
|
---------------
LJCComments.SetComment line:
|/// definitions and Included PropertyNames arrays to interact with the
|
LJCComments.SetComment isContinue:
| definitions and Included PropertyNames arrays to interact with the
|
---------------
LJCComments.SetComment line:
|/// database.
|
LJCComments.SetComment isContinue:
| database.
|
---------------
LJCComments.SetComment line:
|/// &lt;/p&gt;
|
LJCComments.SetComment isContinue:
| &lt;/p&gt;
|
---------------
LJCComments.SetComment line:
|/// &lt;p&gt;
|
LJCComments.SetComment isContinue:
| &lt;p&gt;
|
---------------
LJCComments.SetComment line:
|/// The DataManager retrieves the Table SchemaColumn Definitions from the
|
LJCComments.SetComment isContinue:
| The DataManager retrieves the Table SchemaColumn Definitions from the
|
---------------
LJCComments.SetComment line:
|/// database. It uses these definitions to create the SQL statements and
|
LJCComments.SetComment isContinue:
| database. It uses these definitions to create the SQL statements and
|
---------------
LJCComments.SetComment line:
|/// modifies them based on KeyColumn definitions, Join definitions and
|
LJCComments.SetComment isContinue:
| modifies them based on KeyColumn definitions, Join definitions and
|
---------------
LJCComments.SetComment line:
|/// PropertyNames arrays.
|
LJCComments.SetComment isContinue:
| PropertyNames arrays.
|
---------------
LJCComments.SetComment line:
|/// &lt;/p&gt;
|
LJCComments.SetComment isContinue:
| &lt;/p&gt;
|
---------------
LJCComments.SetComment line:
|/// The retrieved data can be mapped into strongly typed DataObjects using the
|
LJCComments.SetComment isContinue:
| The retrieved data can be mapped into strongly typed DataObjects using the
|
---------------
LJCComments.SetComment line:
|/// methods CreateDataCollection() and CreateDataObject().
|
LJCComments.SetComment isContinue:
| methods CreateDataCollection() and CreateDataObject().
|
---------------
LJCComments.SetComment line:
|/// </remarks>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
ClassName:
|LJCDataManager|
**
LJCDocDataGen.ProcessClass summary:
|Provides Standard DB Table methods.|
Syntax:
|class LJCDataManager|
Remarks:
|
 The DataManager class provides a higher level of abstraction on top of the
 DataAccess class.
 &amp;lt;p&amp;gt;
 It does not require the developer to create SQL statements. Instead the
 developer can use strongly typed DataObjects, KeyColumn definitions, Join
 definitions and Included PropertyNames arrays to interact with the
 database.
 &amp;lt;/p&amp;gt;
 &amp;lt;p&amp;gt;
 The DataManager retrieves the Table SchemaColumn Definitions from the
 database. It uses these definitions to create the SQL statements and
 modifies them based on KeyColumn definitions, Join definitions and
 PropertyNames arrays.
 &amp;lt;/p&amp;gt;
 The retrieved data can be mapped into strongly typed DataObjects using the
 methods CreateDataCollection() and CreateDataObject().
|
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/construct/*' file='Doc/LJCDataManager.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Initializes a class instance with the provided values.</summary>|
LJCComments.SetComment comment:
|Initializes a class instance with the provided values.|
---------------
LJCComments.SetComment line:
|///     <param name="$connectionValues">The DB Connection values.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$tableName">The table name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDataManagerLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDataManagerLib.php";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDBAccessLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDBAccessLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $database = "DatabaseName";|
LJCComments.SetComment isContinue:
| $database = "DatabaseName";|
---------------
LJCComments.SetComment line:
|/// $userID = "UserID";|
LJCComments.SetComment isContinue:
| $userID = "UserID";|
---------------
LJCComments.SetComment line:
|/// $password = "Password":|
LJCComments.SetComment isContinue:
| $password = "Password":|
---------------
LJCComments.SetComment line:
|/// $connectionValues = new LJCConnectionValues("localhost", $database, $userID|
LJCComments.SetComment isContinue:
| $connectionValues = new LJCConnectionValues("localhost", $database, $userID|
---------------
LJCComments.SetComment line:
|///   , $password);|
LJCComments.SetComment isContinue:
|   , $password);|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $tableName = "TableName";|
LJCComments.SetComment isContinue:
| $tableName = "TableName";|
---------------
LJCComments.SetComment line:
|/// $manager = new LJCDataManager($connectionValues, $tableName);|
LJCComments.SetComment isContinue:
| $manager = new LJCDataManager($connectionValues, $tableName);|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|construct|
**
LJCDocDataGen.ProcessFunction summary:
|Initializes a class instance with the provided values.|
Syntax:
|public function __construct($connectionValues, string $tableName)|
Returns
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCDataManagerLib.php&quot;;
 require_once &quot;$webCommonPath/LJCDBAccessLib.php&quot;;
 
 $database = &quot;DatabaseName&quot;;
 $userID = &quot;UserID&quot;;
 $password = &quot;Password&quot;:
 $connectionValues = new LJCConnectionValues(&quot;localhost&quot;, $database, $userID
   , $password);
 
 $tableName = &quot;TableName&quot;;
 $manager = new LJCDataManager($connectionValues, $tableName);|
---------------
LJCComments.SetComment line:
|		/// <include path='items/Add/*' file='Doc/LJCDataManager.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Adds the record for the provided values.</summary>|
LJCComments.SetComment comment:
|Adds the record for the provided values.|
---------------
LJCComments.SetComment line:
|///     <param name="$dataColumns">The data columns.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The count of affected records.</returns>|
LJCComments.SetComment comment:
|The count of affected records.|
---------------
LJCComments.SetComment line:
|/// <remarks>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// The Add() method uses the values from the $dataColumns collection
|
LJCComments.SetComment isContinue:
| The Add() method uses the values from the $dataColumns collection
|
---------------
LJCComments.SetComment line:
|/// parameter to insert a record into the database.
|
LJCComments.SetComment isContinue:
| parameter to insert a record into the database.
|
---------------
LJCComments.SetComment line:
|/// </remarks>|
LJCComments.SetComment isContinue
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDataManagerLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDataManagerLib.php";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDBAccessLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDBAccessLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // See constructor for how to create $connectionValues.|
LJCComments.SetComment isContinue:
| // See constructor for how to create $connectionValues.|
---------------
LJCComments.SetComment line:
|/// $tableName = "TableName";|
LJCComments.SetComment isContinue:
| $tableName = "TableName";|
---------------
LJCComments.SetComment line:
|/// $manager = new LJCDataManager($connectionValues, $tableName);|
LJCComments.SetComment isContinue:
| $manager = new LJCDataManager($connectionValues, $tableName);|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $dataColumns = new LJCDbColumns();|
LJCComments.SetComment isContinue:
| $dataColumns = new LJCDbColumns();|
---------------
LJCComments.SetComment line:
|/// $dataColumns->Add("Name", value:"NameValue");|
LJCComments.SetComment isContinue:
| $dataColumns->Add("Name", value:"NameValue");|
---------------
LJCComments.SetComment line:
|/// $affectedCount = $manager->Add($dataColumns);|
LJCComments.SetComment isContinue:
| $affectedCount = $manager->Add($dataColumns);|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // $manager->SQL =|
LJCComments.SetComment isContinue:
| // $manager->SQL =|
---------------
LJCComments.SetComment line:
|/// // insert into TableName|
LJCComments.SetComment isContinue:
| // insert into TableName|
---------------
LJCComments.SetComment line:
|/// //  (|
LJCComments.SetComment isContinue:
| //  (|
---------------
LJCComments.SetComment line:
|/// //   Name|
LJCComments.SetComment isContinue:
| //   Name|
---------------
LJCComments.SetComment line:
|/// //  )|
LJCComments.SetComment isContinue:
| //  )|
---------------
LJCComments.SetComment line:
|/// //  values|
LJCComments.SetComment isContinue:
| //  values|
---------------
LJCComments.SetComment line:
|/// //  (|
LJCComments.SetComment isContinue:
| //  (|
---------------
LJCComments.SetComment line:
|/// //   Name = 'NameValue'|
LJCComments.SetComment isContinue:
| //   Name = 'NameValue'|
---------------
LJCComments.SetComment line:
|/// //  )|
LJCComments.SetComment isContinue:
| //  )|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|Add|
**
LJCDocDataGen.ProcessFunction summary:
|Adds the record for the provided values.|
Syntax:
|public function Add(LJCDbColumns $dataColumns) : int|
Returns:
|The count of affected records.|
Remarks:
|
 The Add() method uses the values from the $dataColumns collection
 parameter to insert a record into the database.
|
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCDataManagerLib.php&quot;;
 require_once &quot;$webCommonPath/LJCDBAccessLib.php&quot;;
 
 // See constructor for how to create $connectionValues.
 $tableName = &quot;TableName&quot;;
 $manager = new LJCDataManager($connectionValues, $tableName);
 
 $dataColumns = new LJCDbColumns();
 $dataColumns-&gt;Add(&quot;Name&quot;, value:&quot;NameValue&quot;);
 $affectedCount = $manager-&gt;Add($dataColumns);
 
 // $manager-&gt;SQL =
 // insert into TableName
 //  (
 //   Name
 //  )
 //  values
 //  (
 //   Name = &#039;NameValue&#039;
 //  )|
---------------
LJCComments.SetComment line:
|		/// <include path='items/Delete/*' file='Doc/LJCDataManager.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Deletes the records for the provided values.</summary>|
LJCComments.SetComment comment:
|Deletes the records for the provided values.|
---------------
LJCComments.SetComment line:
|///     <param name="$keyColumns">The where clause key columns.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The count of affected records.</returns>|
LJCComments.SetComment comment:
|The count of affected records.|
---------------
LJCComments.SetComment line:
|/// <remarks>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// The Delete() method deletes records in the database.
|
LJCComments.SetComment isContinue:
| The Delete() method deletes records in the database.
|
---------------
LJCComments.SetComment line:
|/// &lt;p&gt;
|
LJCComments.SetComment isContinue:
| &lt;p&gt;
|
---------------
LJCComments.SetComment line:
|/// The $keyColumns collection parameter contains the data for the where
|
LJCComments.SetComment isContinue:
| The $keyColumns collection parameter contains the data for the where
|
---------------
LJCComments.SetComment line:
|/// clause.
|
LJCComments.SetComment isContinue:
| clause.
|
---------------
LJCComments.SetComment line:
|/// &lt;/p&gt;
|
LJCComments.SetComment isContinue:
| &lt;/p&gt;
|
---------------
LJCComments.SetComment line:
|/// The $keyColumns parameter is required and must have collection elements
|
LJCComments.SetComment isContinue:
| The $keyColumns parameter is required and must have collection elements
|
---------------
LJCComments.SetComment line:
|/// or the Delete will not be executed.
|
LJCComments.SetComment isContinue:
| or the Delete will not be executed.
|
---------------
LJCComments.SetComment line:
|/// </remarks>|
LJCComments.SetComment isContinue
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDataManagerLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDataManagerLib.php";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDBAccessLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDBAccessLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // See constructor for how to create $connectionValues.|
LJCComments.SetComment isContinue:
| // See constructor for how to create $connectionValues.|
---------------
LJCComments.SetComment line:
|/// $tableName = "TableName";|
LJCComments.SetComment isContinue:
| $tableName = "TableName";|
---------------
LJCComments.SetComment line:
|/// $manager = new LJCDataManager($connectionValues, $tableName);|
LJCComments.SetComment isContinue:
| $manager = new LJCDataManager($connectionValues, $tableName);|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $keyColumns = new DbColumns();|
LJCComments.SetComment isContinue:
| $keyColumns = new DbColumns();|
---------------
LJCComments.SetComment line:
|/// $keyColumns->Add("ID", value:1);|
LJCComments.SetComment isContinue:
| $keyColumns->Add("ID", value:1);|
---------------
LJCComments.SetComment line:
|/// $affectedCount = $manager->Delete($keyColumns);|
LJCComments.SetComment isContinue:
| $affectedCount = $manager->Delete($keyColumns);|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // $manager->SQL =|
LJCComments.SetComment isContinue:
| // $manager->SQL =|
---------------
LJCComments.SetComment line:
|/// // delete from TableName|
LJCComments.SetComment isContinue:
| // delete from TableName|
---------------
LJCComments.SetComment line:
|/// // where TableName.ID = 1;|
LJCComments.SetComment isContinue:
| // where TableName.ID = 1;|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|Delete|
**
LJCDocDataGen.ProcessFunction summary:
|Deletes the records for the provided values.|
Syntax:
|public function Delete(LJCDbColumns $keyColumns) : int|
Returns:
|The count of affected records.|
Remarks:
|
 The Delete() method deletes records in the database.
 &amp;lt;p&amp;gt;
 The $keyColumns collection parameter contains the data for the where
 clause.
 &amp;lt;/p&amp;gt;
 The $keyColumns parameter is required and must have collection elements
 or the Delete will not be executed.
|
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCDataManagerLib.php&quot;;
 require_once &quot;$webCommonPath/LJCDBAccessLib.php&quot;;
 
 // See constructor for how to create $connectionValues.
 $tableName = &quot;TableName&quot;;
 $manager = new LJCDataManager($connectionValues, $tableName);
 
 $keyColumns = new DbColumns();
 $keyColumns-&gt;Add(&quot;ID&quot;, value:1);
 $affectedCount = $manager-&gt;Delete($keyColumns);
 
 // $manager-&gt;SQL =
 // delete from TableName
 // where TableName.ID = 1;|
---------------
LJCComments.SetComment line:
|		/// <include path='items/Load/*' file='Doc/LJCDataManager.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Loads the records for the provided values.</summary>|
LJCComments.SetComment comment:
|Loads the records for the provided values.|
---------------
LJCComments.SetComment line:
|///     <param name="$keyColumns">The where clause key columns.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$propertyNames">The included column property names.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>An array of data records.</returns>|
LJCComments.SetComment comment:
|An array of data records.|
---------------
LJCComments.SetComment line:
|/// <remarks>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// Loads records from the database.
|
LJCComments.SetComment isContinue:
| Loads records from the database.
|
---------------
LJCComments.SetComment line:
|/// &lt;p&gt;
|
LJCComments.SetComment isContinue:
| &lt;p&gt;
|
---------------
LJCComments.SetComment line:
|/// The $keyColumns collection parameter contains the data for the where
|
LJCComments.SetComment isContinue:
| The $keyColumns collection parameter contains the data for the where
|
---------------
LJCComments.SetComment line:
|/// clause.
|
LJCComments.SetComment isContinue:
| clause.
|
---------------
LJCComments.SetComment line:
|/// &lt;/p&gt;
|
LJCComments.SetComment isContinue:
| &lt;/p&gt;
|
---------------
LJCComments.SetComment line:
|/// The optional $propertyNames array parameter contains the names of the
|
LJCComments.SetComment isContinue:
| The optional $propertyNames array parameter contains the names of the
|
---------------
LJCComments.SetComment line:
|/// properties that will be retrieved. All columns are retrieved if it is
|
LJCComments.SetComment isContinue:
| properties that will be retrieved. All columns are retrieved if it is
|
---------------
LJCComments.SetComment line:
|/// null.
|
LJCComments.SetComment isContinue:
| null.
|
---------------
LJCComments.SetComment line:
|/// </remarks>|
LJCComments.SetComment isContinue
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDataManagerLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDataManagerLib.php";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDBAccessLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDBAccessLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // See constructor for how to create $connectionValues.|
LJCComments.SetComment isContinue:
| // See constructor for how to create $connectionValues.|
---------------
LJCComments.SetComment line:
|/// $tableName = "TableName";|
LJCComments.SetComment isContinue:
| $tableName = "TableName";|
---------------
LJCComments.SetComment line:
|/// $manager = new LJCDataManager($connectionValues, $tableName);|
LJCComments.SetComment isContinue:
| $manager = new LJCDataManager($connectionValues, $tableName);|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $propertyNames = [];|
LJCComments.SetComment isContinue:
| $propertyNames = [];|
---------------
LJCComments.SetComment line:
|/// $propertyNames[] = "ID";|
LJCComments.SetComment isContinue:
| $propertyNames[] = "ID";|
---------------
LJCComments.SetComment line:
|/// $propertyNames[] = "Name";|
LJCComments.SetComment isContinue:
| $propertyNames[] = "Name";|
---------------
LJCComments.SetComment line:
|/// $affectedCount = $manager->Load(null, $propertyNames);|
LJCComments.SetComment isContinue:
| $affectedCount = $manager->Load(null, $propertyNames);|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // $manager->SQL =|
LJCComments.SetComment isContinue:
| // $manager->SQL =|
---------------
LJCComments.SetComment line:
|/// // select|
LJCComments.SetComment isContinue:
| // select|
---------------
LJCComments.SetComment line:
|/// //   TableName.ID,|
LJCComments.SetComment isContinue:
| //   TableName.ID,|
---------------
LJCComments.SetComment line:
|/// //   TableName.Name|
LJCComments.SetComment isContinue:
| //   TableName.Name|
---------------
LJCComments.SetComment line:
|/// // from TableName;|
LJCComments.SetComment isContinue:
| // from TableName;|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|Load|
**
LJCDocDataGen.ProcessFunction summary:
|Loads the records for the provided values.|
Syntax:
|public function Load(?LJCDbColumns $keyColumns, array $propertyNames = null&lt;br /&gt;, LJCJoins $joins = null)	: ?array|
Returns:
|An array of data records.|
Remarks:
|
 Loads records from the database.
 &amp;lt;p&amp;gt;
 The $keyColumns collection parameter contains the data for the where
 clause.
 &amp;lt;/p&amp;gt;
 The optional $propertyNames array parameter contains the names of the
 properties that will be retrieved. All columns are retrieved if it is
 null.
|
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCDataManagerLib.php&quot;;
 require_once &quot;$webCommonPath/LJCDBAccessLib.php&quot;;
 
 // See constructor for how to create $connectionValues.
 $tableName = &quot;TableName&quot;;
 $manager = new LJCDataManager($connectionValues, $tableName);
 
 $propertyNames = [];
 $propertyNames[] = &quot;ID&quot;;
 $propertyNames[] = &quot;Name&quot;;
 $affectedCount = $manager-&gt;Load(null, $propertyNames);
 
 // $manager-&gt;SQL =
 // select
 //   TableName.ID,
 //   TableName.Name
 // from TableName;|
---------------
LJCComments.SetComment line:
|		/// <include path='items/Retrieve/*' file='Doc/LJCDataManager.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Retrieves the record for the provided values.</summary>|
LJCComments.SetComment comment:
|Retrieves the record for the provided values.|
---------------
LJCComments.SetComment line:
|///     <param name="$keyColumns">The where clause key columns.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$propertyNames">The included column property names.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>An array of record columns.</returns>|
LJCComments.SetComment comment:
|An array of record columns.|
---------------
LJCComments.SetComment line:
|/// <remarks>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// Retrieves a single record from the database.
|
LJCComments.SetComment isContinue:
| Retrieves a single record from the database.
|
---------------
LJCComments.SetComment line:
|/// &lt;p&gt;
|
LJCComments.SetComment isContinue:
| &lt;p&gt;
|
---------------
LJCComments.SetComment line:
|/// The $keyColumns collection parameter contains the data for the where
|
LJCComments.SetComment isContinue:
| The $keyColumns collection parameter contains the data for the where
|
---------------
LJCComments.SetComment line:
|/// clause.
|
LJCComments.SetComment isContinue:
| clause.
|
---------------
LJCComments.SetComment line:
|/// &lt;/p&gt;
|
LJCComments.SetComment isContinue:
| &lt;/p&gt;
|
---------------
LJCComments.SetComment line:
|/// The optional $propertyNames array parameter contains the names of the
|
LJCComments.SetComment isContinue:
| The optional $propertyNames array parameter contains the names of the
|
---------------
LJCComments.SetComment line:
|/// properties that will be retrieved. All columns are retrieved if it is
|
LJCComments.SetComment isContinue:
| properties that will be retrieved. All columns are retrieved if it is
|
---------------
LJCComments.SetComment line:
|/// null.
|
LJCComments.SetComment isContinue:
| null.
|
---------------
LJCComments.SetComment line:
|/// </remarks>|
LJCComments.SetComment isContinue
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDataManagerLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDataManagerLib.php";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDBAccessLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDBAccessLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // See constructor for how to create $connectionValues.|
LJCComments.SetComment isContinue:
| // See constructor for how to create $connectionValues.|
---------------
LJCComments.SetComment line:
|/// $tableName = "TableName";|
LJCComments.SetComment isContinue:
| $tableName = "TableName";|
---------------
LJCComments.SetComment line:
|/// $manager = new LJCDataManager($connectionValues, $tableName);|
LJCComments.SetComment isContinue:
| $manager = new LJCDataManager($connectionValues, $tableName);|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $keyColumns = new DbColumns();|
LJCComments.SetComment isContinue:
| $keyColumns = new DbColumns();|
---------------
LJCComments.SetComment line:
|/// $keyColumns->Add("ID", value:1);|
LJCComments.SetComment isContinue:
| $keyColumns->Add("ID", value:1);|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $propertyNames = [];|
LJCComments.SetComment isContinue:
| $propertyNames = [];|
---------------
LJCComments.SetComment line:
|/// $propertyNames[] = "ID";|
LJCComments.SetComment isContinue:
| $propertyNames[] = "ID";|
---------------
LJCComments.SetComment line:
|/// $propertyNames[] = "Name";|
LJCComments.SetComment isContinue:
| $propertyNames[] = "Name";|
---------------
LJCComments.SetComment line:
|/// $row = $manager->Retrieve($keyColumns, $propertyNames);|
LJCComments.SetComment isContinue:
| $row = $manager->Retrieve($keyColumns, $propertyNames);|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // $manager->SQL =|
LJCComments.SetComment isContinue:
| // $manager->SQL =|
---------------
LJCComments.SetComment line:
|/// // select|
LJCComments.SetComment isContinue:
| // select|
---------------
LJCComments.SetComment line:
|/// //   TableName.ID,|
LJCComments.SetComment isContinue:
| //   TableName.ID,|
---------------
LJCComments.SetComment line:
|/// //   TableName.Name|
LJCComments.SetComment isContinue:
| //   TableName.Name|
---------------
LJCComments.SetComment line:
|/// // from TableName|
LJCComments.SetComment isContinue:
| // from TableName|
---------------
LJCComments.SetComment line:
|/// // where TableName.ID = 1;|
LJCComments.SetComment isContinue:
| // where TableName.ID = 1;|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|Retrieve|
**
LJCDocDataGen.ProcessFunction summary:
|Retrieves the record for the provided values.|
Syntax:
|public function Retrieve(LJCDbColumns $keyColumns&lt;br /&gt;, array $propertyNames = null, LJCJoins $joins = null) : ?array|
Returns:
|An array of record columns.|
Remarks:
|
 Retrieves a single record from the database.
 &amp;lt;p&amp;gt;
 The $keyColumns collection parameter contains the data for the where
 clause.
 &amp;lt;/p&amp;gt;
 The optional $propertyNames array parameter contains the names of the
 properties that will be retrieved. All columns are retrieved if it is
 null.
|
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCDataManagerLib.php&quot;;
 require_once &quot;$webCommonPath/LJCDBAccessLib.php&quot;;
 
 // See constructor for how to create $connectionValues.
 $tableName = &quot;TableName&quot;;
 $manager = new LJCDataManager($connectionValues, $tableName);
 
 $keyColumns = new DbColumns();
 $keyColumns-&gt;Add(&quot;ID&quot;, value:1);
 
 $propertyNames = [];
 $propertyNames[] = &quot;ID&quot;;
 $propertyNames[] = &quot;Name&quot;;
 $row = $manager-&gt;Retrieve($keyColumns, $propertyNames);
 
 // $manager-&gt;SQL =
 // select
 //   TableName.ID,
 //   TableName.Name
 // from TableName
 // where TableName.ID = 1;|
---------------
LJCComments.SetComment line:
|		/// <include path='items/Update/*' file='Doc/LJCDataManager.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Updates the records for the provided values.</summary>|
LJCComments.SetComment comment:
|Updates the records for the provided values.|
---------------
LJCComments.SetComment line:
|///     <param name="$keyColumns">The where clause key columns.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$dataColumns">The data columns.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The count of affected records.</returns>|
LJCComments.SetComment comment:
|The count of affected records.|
---------------
LJCComments.SetComment line:
|/// <remarks>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// The Update() method updates records in the database using the values
|
LJCComments.SetComment isContinue:
| The Update() method updates records in the database using the values
|
---------------
LJCComments.SetComment line:
|/// from the $dataColumns collection parameter.
|
LJCComments.SetComment isContinue:
| from the $dataColumns collection parameter.
|
---------------
LJCComments.SetComment line:
|/// &lt;p&gt;
|
LJCComments.SetComment isContinue:
| &lt;p&gt;
|
---------------
LJCComments.SetComment line:
|/// The $keyColumns collection parameter contains the data for the where
|
LJCComments.SetComment isContinue:
| The $keyColumns collection parameter contains the data for the where
|
---------------
LJCComments.SetComment line:
|/// clause.
|
LJCComments.SetComment isContinue:
| clause.
|
---------------
LJCComments.SetComment line:
|/// &lt;/p&gt;
|
LJCComments.SetComment isContinue:
| &lt;/p&gt;
|
---------------
LJCComments.SetComment line:
|/// The $keyColumns parameter is required and must have collection elements
|
LJCComments.SetComment isContinue:
| The $keyColumns parameter is required and must have collection elements
|
---------------
LJCComments.SetComment line:
|/// or the Update will not be executed.
|
LJCComments.SetComment isContinue:
| or the Update will not be executed.
|
---------------
LJCComments.SetComment line:
|/// </remarks>|
LJCComments.SetComment isContinue
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDataManagerLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDataManagerLib.php";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDBAccessLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDBAccessLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // See constructor for how to create $connectionValues.|
LJCComments.SetComment isContinue:
| // See constructor for how to create $connectionValues.|
---------------
LJCComments.SetComment line:
|/// $tableName = "TableName";|
LJCComments.SetComment isContinue:
| $tableName = "TableName";|
---------------
LJCComments.SetComment line:
|/// $manager = new LJCDataManager($connectionValues, $tableName);|
LJCComments.SetComment isContinue:
| $manager = new LJCDataManager($connectionValues, $tableName);|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $keyColumns = new LJCDbColumns();|
LJCComments.SetComment isContinue:
| $keyColumns = new LJCDbColumns();|
---------------
LJCComments.SetComment line:
|/// $keyColumns->Add("ID", value:1);|
LJCComments.SetComment isContinue:
| $keyColumns->Add("ID", value:1);|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $dataColumns = new LJCDbColumns();|
LJCComments.SetComment isContinue:
| $dataColumns = new LJCDbColumns();|
---------------
LJCComments.SetComment line:
|/// $dataColumns->Add("Name", value:"NameValue");|
LJCComments.SetComment isContinue:
| $dataColumns->Add("Name", value:"NameValue");|
---------------
LJCComments.SetComment line:
|/// $affectedCount = $manager->Update($keyColumns, $dataColumns);|
LJCComments.SetComment isContinue:
| $affectedCount = $manager->Update($keyColumns, $dataColumns);|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // $manager->SQL =|
LJCComments.SetComment isContinue:
| // $manager->SQL =|
---------------
LJCComments.SetComment line:
|/// // update TableName|
LJCComments.SetComment isContinue:
| // update TableName|
---------------
LJCComments.SetComment line:
|/// //   set Name = 'NameValue'|
LJCComments.SetComment isContinue:
| //   set Name = 'NameValue'|
---------------
LJCComments.SetComment line:
|/// // where TableName.ID = 1;|
LJCComments.SetComment isContinue:
| // where TableName.ID = 1;|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|Update|
**
LJCDocDataGen.ProcessFunction summary:
|Updates the records for the provided values.|
Syntax:
|public function Update(LJCDbColumns $keyColumns, LJCDbColumns $dataColumns)|
Returns:
|The count of affected records.|
Remarks:
|
 The Update() method updates records in the database using the values
 from the $dataColumns collection parameter.
 &amp;lt;p&amp;gt;
 The $keyColumns collection parameter contains the data for the where
 clause.
 &amp;lt;/p&amp;gt;
 The $keyColumns parameter is required and must have collection elements
 or the Update will not be executed.
|
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCDataManagerLib.php&quot;;
 require_once &quot;$webCommonPath/LJCDBAccessLib.php&quot;;
 
 // See constructor for how to create $connectionValues.
 $tableName = &quot;TableName&quot;;
 $manager = new LJCDataManager($connectionValues, $tableName);
 
 $keyColumns = new LJCDbColumns();
 $keyColumns-&gt;Add(&quot;ID&quot;, value:1);
 
 $dataColumns = new LJCDbColumns();
 $dataColumns-&gt;Add(&quot;Name&quot;, value:&quot;NameValue&quot;);
 $affectedCount = $manager-&gt;Update($keyColumns, $dataColumns);
 
 // $manager-&gt;SQL =
 // update TableName
 //   set Name = &#039;NameValue&#039;
 // where TableName.ID = 1;|
---------------
LJCComments.SetComment line:
|		/// <include path='items/SQLExecute/*' file='Doc/LJCDataManager.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Executes an Add, Delete or Update SQL statement.</summary>|
LJCComments.SetComment comment:
|Executes an Add, Delete or Update SQL statement.|
---------------
LJCComments.SetComment line:
|///     <param name="$sql">The SQL statement.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The count of affected records.</returns>|
LJCComments.SetComment comment:
|The count of affected records.|
LJCComments.SetComment comment
FunctionName:
|SQLExecute|
**
LJCDocDataGen.ProcessFunction summary:
|Executes an Add, Delete or Update SQL statement.|
Syntax:
|public function SQLExecute(string $sql) : int|
Returns:
|The count of affected records.|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/SQLLoad/*' file='Doc/LJCDataManager.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Executes a Select SQL statement.</summary>|
LJCComments.SetComment comment:
|Executes a Select SQL statement.|
---------------
LJCComments.SetComment line:
|///     <param name="$sql">The SQL statement.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>An array of data records.</returns>|
LJCComments.SetComment comment:
|An array of data records.|
LJCComments.SetComment comment
FunctionName:
|SQLLoad|
**
LJCDocDataGen.ProcessFunction summary:
|Executes a Select SQL statement.|
Syntax:
|public function SQLLoad() : ?array|
Returns:
|An array of data records.|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/SQLRetrieve/*' file='Doc/LJCDataManager.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Executes a Select SQL statement.</summary>|
LJCComments.SetComment comment:
|Executes a Select SQL statement.|
---------------
LJCComments.SetComment line:
|///     <param name="$sql">The SQL statement.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>An array of record columns.</returns>|
LJCComments.SetComment comment:
|An array of record columns.|
LJCComments.SetComment comment
FunctionName:
|SQLRetrieve|
**
LJCDocDataGen.ProcessFunction summary:
|Executes a Select SQL statement.|
Syntax:
|public function SQLRetrieve() : ?array|
Returns:
|An array of record columns.|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/CreateDataCollection/*' file='Doc/LJCDataManager.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// Creates an array of typed Data Objects from a DB rows array.
|
LJCComments.SetComment isContinue:
| Creates an array of typed Data Objects from a DB rows array.
|
---------------
LJCComments.SetComment line:
|/// </summary>|
LJCComments.SetComment isContinue
---------------
LJCComments.SetComment line:
|///     <param name="$collection">A Collection Object to use as a template.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$dataObject">A Data Object to use as a template.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$rows">An array of data records.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>An array of Data object records or null if there are no rows.</returns>|
LJCComments.SetComment comment:
|An array of Data object records or null if there are no rows.|
---------------
LJCComments.SetComment line:
|/// <remarks>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// This method provides Object to Relational Mapping (ORM) as it maps an
|
LJCComments.SetComment isContinue:
| This method provides Object to Relational Mapping (ORM) as it maps an
|
---------------
LJCComments.SetComment line:
|/// array  of data records into a collection of strongly  typed data objects.
|
LJCComments.SetComment isContinue:
| array  of data records into a collection of strongly  typed data objects.
|
---------------
LJCComments.SetComment line:
|/// It calls the CreateDataObject() method for each data record and adds the
|
LJCComments.SetComment isContinue:
| It calls the CreateDataObject() method for each data record and adds the
|
---------------
LJCComments.SetComment line:
|/// resulting typed object to the strongly typed collection.
|
LJCComments.SetComment isContinue:
| resulting typed object to the strongly typed collection.
|
---------------
LJCComments.SetComment line:
|/// &lt;p&gt;
|
LJCComments.SetComment isContinue:
| &lt;p&gt;
|
---------------
LJCComments.SetComment line:
|/// The collection must be an object that extends (inherits from)
|
LJCComments.SetComment isContinue:
| The collection must be an object that extends (inherits from)
|
---------------
LJCComments.SetComment line:
|/// LJCCollectionLib.php class LJCCollectionBase and provides an AddObject
|
LJCComments.SetComment isContinue:
| LJCCollectionLib.php class LJCCollectionBase and provides an AddObject
|
---------------
LJCComments.SetComment line:
|/// method with the signature  AddObject(DataObject $item, $key = null); Where
|
LJCComments.SetComment isContinue:
| method with the signature  AddObject(DataObject $item, $key = null); Where
|
---------------
LJCComments.SetComment line:
|/// DataObject is a strongly typed Data Object. See LJCDbAccessLib.php class
|
LJCComments.SetComment isContinue:
| DataObject is a strongly typed Data Object. See LJCDbAccessLib.php class
|
---------------
LJCComments.SetComment line:
|/// LJCDbColumns and LJCDbColumn for examples.
|
LJCComments.SetComment isContinue:
| LJCDbColumns and LJCDbColumn for examples.
|
---------------
LJCComments.SetComment line:
|/// &lt;/p&gt;
|
LJCComments.SetComment isContinue:
| &lt;/p&gt;
|
---------------
LJCComments.SetComment line:
|/// &lt;p&gt;
|
LJCComments.SetComment isContinue:
| &lt;p&gt;
|
---------------
LJCComments.SetComment line:
|/// The AddObject() method should supply a default key value or the method can
|
LJCComments.SetComment isContinue:
| The AddObject() method should supply a default key value or the method can
|
---------------
LJCComments.SetComment line:
|/// be changed to require the programmer to enter it by removing the "= null"
|
LJCComments.SetComment isContinue:
| be changed to require the programmer to enter it by removing the "= null"
|
---------------
LJCComments.SetComment line:
|/// from the method signature.
|
LJCComments.SetComment isContinue:
| from the method signature.
|
---------------
LJCComments.SetComment line:
|/// &lt;/p&gt;
|
LJCComments.SetComment isContinue:
| &lt;/p&gt;
|
---------------
LJCComments.SetComment line:
|/// The DataObject must supply a Clone() method.
|
LJCComments.SetComment isContinue:
| The DataObject must supply a Clone() method.
|
---------------
LJCComments.SetComment line:
|/// </remarks>|
LJCComments.SetComment isContinue
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDataManagerLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDataManagerLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // See constructor for how to create $connectionValues.|
LJCComments.SetComment isContinue:
| // See constructor for how to create $connectionValues.|
---------------
LJCComments.SetComment line:
|/// $manager = new LJCDataManager($connectionValues, "TableName");|
LJCComments.SetComment isContinue:
| $manager = new LJCDataManager($connectionValues, "TableName");|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// class Person|
LJCComments.SetComment isContinue:
| class Person|
---------------
LJCComments.SetComment line:
|/// {|
LJCComments.SetComment isContinue:
| {|
---------------
LJCComments.SetComment line:
|///   public int $ID;|
LJCComments.SetComment isContinue:
|   public int $ID;|
---------------
LJCComments.SetComment line:
|///   public string $Name;|
LJCComments.SetComment isContinue:
|   public string $Name;|
---------------
LJCComments.SetComment line:
|/// }|
LJCComments.SetComment isContinue:
| }|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $rows = $manager->Load(null);|
LJCComments.SetComment isContinue:
| $rows = $manager->Load(null);|
---------------
LJCComments.SetComment line:
|/// $persons = $manager->CreateDataCollection(new Persons(), new Person()|
LJCComments.SetComment isContinue:
| $persons = $manager->CreateDataCollection(new Persons(), new Person()|
---------------
LJCComments.SetComment line:
|///   , $rows);|
LJCComments.SetComment isContinue:
|   , $rows);|
---------------
LJCComments.SetComment line:
|/// foreach ($persons as $person)|
LJCComments.SetComment isContinue:
| foreach ($persons as $person)|
---------------
LJCComments.SetComment line:
|/// {|
LJCComments.SetComment isContinue:
| {|
---------------
LJCComments.SetComment line:
|///   echo $person->ID;|
LJCComments.SetComment isContinue:
|   echo $person->ID;|
---------------
LJCComments.SetComment line:
|///   echo $person->Name;|
LJCComments.SetComment isContinue:
|   echo $person->Name;|
---------------
LJCComments.SetComment line:
|/// }|
LJCComments.SetComment isContinue:
| }|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|CreateDataCollection|
**
LJCDocDataGen.ProcessFunction summary:
|
 Creates an array of typed Data Objects from a DB rows array.
|
Syntax:
|public function CreateDataCollection(object $collection&lt;br /&gt;, object $dataObject, array $rows)|
Returns:
|An array of Data object records or null if there are no rows.|
Remarks:
|
 This method provides Object to Relational Mapping (ORM) as it maps an
 array  of data records into a collection of strongly  typed data objects.
 It calls the CreateDataObject() method for each data record and adds the
 resulting typed object to the strongly typed collection.
 &amp;lt;p&amp;gt;
 The collection must be an object that extends (inherits from)
 LJCCollectionLib.php class LJCCollectionBase and provides an AddObject
 method with the signature  AddObject(DataObject $item, $key = null); Where
 DataObject is a strongly typed Data Object. See LJCDbAccessLib.php class
 LJCDbColumns and LJCDbColumn for examples.
 &amp;lt;/p&amp;gt;
 &amp;lt;p&amp;gt;
 The AddObject() method should supply a default key value or the method can
 be changed to require the programmer to enter it by removing the &quot;= null&quot;
 from the method signature.
 &amp;lt;/p&amp;gt;
 The DataObject must supply a Clone() method.
|
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCDataManagerLib.php&quot;;
 
 // See constructor for how to create $connectionValues.
 $manager = new LJCDataManager($connectionValues, &quot;TableName&quot;);
 
 class Person
 {
   public int $ID;
   public string $Name;
 }
 
 $rows = $manager-&gt;Load(null);
 $persons = $manager-&gt;CreateDataCollection(new Persons(), new Person()
   , $rows);
 foreach ($persons as $person)
 {
   echo $person-&gt;ID;
   echo $person-&gt;Name;
 }|
---------------
LJCComments.SetComment line:
|		/// <include path='items/CreateDataObject/*' file='Doc/LJCDataManager.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Populates a typed Data Object with values from a DB row.</summary>|
LJCComments.SetComment comment:
|Populates a typed Data Object with values from a DB row.|
---------------
LJCComments.SetComment line:
|///     <param name="$dataObject">A Data Object to use as a template.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$row">An array of data columns.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>A data object record.</returns>|
LJCComments.SetComment comment:
|A data object record.|
---------------
LJCComments.SetComment line:
|/// <remarks>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// This method provides Object to Relational Mapping (ORM) as it maps the
|
LJCComments.SetComment isContinue:
| This method provides Object to Relational Mapping (ORM) as it maps the
|
---------------
LJCComments.SetComment line:
|/// data columns to properties in the DataObject and copies the matching
|
LJCComments.SetComment isContinue:
| data columns to properties in the DataObject and copies the matching
|
---------------
LJCComments.SetComment line:
|/// values.
|
LJCComments.SetComment isContinue:
| values.
|
---------------
LJCComments.SetComment line:
|/// &lt;br /&gt;
|
LJCComments.SetComment isContinue:
| &lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// &lt;br /&gt;
|
LJCComments.SetComment isContinue:
| &lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// The data column keys which are the result set column names must match
|
LJCComments.SetComment isContinue:
| The data column keys which are the result set column names must match
|
---------------
LJCComments.SetComment line:
|/// property names in the DataObject.
|
LJCComments.SetComment isContinue:
| property names in the DataObject.
|
---------------
LJCComments.SetComment line:
|/// </remarks>|
LJCComments.SetComment isContinue
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDBAccessLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDBAccessLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // See constructor for how to create $connectionValues.|
LJCComments.SetComment isContinue:
| // See constructor for how to create $connectionValues.|
---------------
LJCComments.SetComment line:
|/// $manager = new LJCDataManager($connectionValues, "TableName");|
LJCComments.SetComment isContinue:
| $manager = new LJCDataManager($connectionValues, "TableName");|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// class Person|
LJCComments.SetComment isContinue:
| class Person|
---------------
LJCComments.SetComment line:
|/// {|
LJCComments.SetComment isContinue:
| {|
---------------
LJCComments.SetComment line:
|///   public int $ID;|
LJCComments.SetComment isContinue:
|   public int $ID;|
---------------
LJCComments.SetComment line:
|///   public ?string $Name;|
LJCComments.SetComment isContinue:
|   public ?string $Name;|
---------------
LJCComments.SetComment line:
|/// }|
LJCComments.SetComment isContinue:
| }|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $keyColumns = new LJCDbColumns();|
LJCComments.SetComment isContinue:
| $keyColumns = new LJCDbColumns();|
---------------
LJCComments.SetComment line:
|/// $keyColumns->Add("ID", value: 1);|
LJCComments.SetComment isContinue:
| $keyColumns->Add("ID", value: 1);|
---------------
LJCComments.SetComment line:
|/// $row = $manager->Retrieve($keyColumns);|
LJCComments.SetComment isContinue:
| $row = $manager->Retrieve($keyColumns);|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $dataObject = new Person();|
LJCComments.SetComment isContinue:
| $dataObject = new Person();|
---------------
LJCComments.SetComment line:
|/// $person = $manager->CreateDataObject($dataObject, $row);|
LJCComments.SetComment isContinue:
| $person = $manager->CreateDataObject($dataObject, $row);|
---------------
LJCComments.SetComment line:
|/// echo $person->ID;|
LJCComments.SetComment isContinue:
| echo $person->ID;|
---------------
LJCComments.SetComment line:
|/// echo $person->Name;|
LJCComments.SetComment isContinue:
| echo $person->Name;|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|CreateDataObject|
**
LJCDocDataGen.ProcessFunction summary:
|Populates a typed Data Object with values from a DB row.|
Syntax:
|public function CreateDataObject($dataObject, array $row)|
Returns:
|A data object record.|
Remarks:
|
 This method provides Object to Relational Mapping (ORM) as it maps the
 data columns to properties in the DataObject and copies the matching
 values.
 &amp;lt;br /&amp;gt;
 &amp;lt;br /&amp;gt;
 The data column keys which are the result set column names must match
 property names in the DataObject.
|
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCDBAccessLib.php&quot;;
 
 // See constructor for how to create $connectionValues.
 $manager = new LJCDataManager($connectionValues, &quot;TableName&quot;);
 
 class Person
 {
   public int $ID;
   public ?string $Name;
 }
 
 $keyColumns = new LJCDbColumns();
 $keyColumns-&gt;Add(&quot;ID&quot;, value: 1);
 $row = $manager-&gt;Retrieve($keyColumns);
 
 $dataObject = new Person();
 $person = $manager-&gt;CreateDataObject($dataObject, $row);
 echo $person-&gt;ID;
 echo $person-&gt;Name;|
---------------
LJCComments.SetComment line:
|		/// <summary>The DbAccess object.</summary>
|
LJCComments.SetComment comment:
|The DbAccess object.|
PropertyName:
|$DbAccess|
**
LJCDocDataGen.ProcessProperty summary:
|The DbAccess object.|
Syntax:
|public LJCDbAccess $DbAccess;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Join definitions.</summary>
|
LJCComments.SetComment comment:
|The Join definitions.|
PropertyName:
|$Joins|
**
LJCDocDataGen.ProcessProperty summary:
|The Join definitions.|
Syntax:
|public ?LJCJoins $Joins;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The OrderBy names.</summary>
|
LJCComments.SetComment comment:
|The OrderBy names.|
PropertyName:
|$OrderByNames|
**
LJCDocDataGen.ProcessProperty summary:
|The OrderBy names.|
Syntax:
|public ?array $OrderByNames;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The column definitions.</summary>
|
LJCComments.SetComment comment:
|The column definitions.|
PropertyName:
|$SchemaColumns|
**
LJCDocDataGen.ProcessProperty summary:
|The column definitions.|
Syntax:
|public LJCDbColumns $SchemaColumns;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The last SQL statement.</summary>
|
LJCComments.SetComment comment:
|The last SQL statement.|
PropertyName:
|$SQL|
**
LJCDocDataGen.ProcessProperty summary:
|The last SQL statement.|
Syntax:
|public ?string $SQL;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The table name.</summary>
|
LJCComments.SetComment comment:
|The table name.|
PropertyName:
|$TableName|
**
LJCDocDataGen.ProcessProperty summary:
|The table name.|
Syntax:
|public string $TableName;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|	/// <include path='items/LJCSQLBuilder/*' file='Doc/LJCSQLBuilder.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// Provides static functions for creating SQL statements.
|
LJCComments.SetComment isContinue:
| Provides static functions for creating SQL statements.
|
---------------
LJCComments.SetComment line:
|/// </summary>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
ClassName:
|LJCSQLBuilder|
**
LJCDocDataGen.ProcessClass summary:
|
 Provides static functions for creating SQL statements.
|
Syntax:
|class LJCSQLBuilder|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/CreateDelete/*' file='Doc/LJCSQLBuilder.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Creates a Delete SQL statement.</summary>|
LJCComments.SetComment comment:
|Creates a Delete SQL statement.|
---------------
LJCComments.SetComment line:
|///     <param name="$tableName">The table name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$keyColumns">The where clause key columns.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The Update SQL statement.</returns>|
LJCComments.SetComment comment:
|The Update SQL statement.|
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDataManagerLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDataManagerLib.php";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDBAccessLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDBAccessLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $keyColumns = new DbColumns();|
LJCComments.SetComment isContinue:
| $keyColumns = new DbColumns();|
---------------
LJCComments.SetComment line:
|/// $keyColumns->Add("ID", value:1);|
LJCComments.SetComment isContinue:
| $keyColumns->Add("ID", value:1);|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $sql = LJCSQLBuilder::CreateDelete("TableName", $keyColumns);|
LJCComments.SetComment isContinue:
| $sql = LJCSQLBuilder::CreateDelete("TableName", $keyColumns);|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // $sql =|
LJCComments.SetComment isContinue:
| // $sql =|
---------------
LJCComments.SetComment line:
|/// // delete from TableName|
LJCComments.SetComment isContinue:
| // delete from TableName|
---------------
LJCComments.SetComment line:
|/// // where TableName.ID = 1|
LJCComments.SetComment isContinue:
| // where TableName.ID = 1|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|CreateDelete|
**
LJCDocDataGen.ProcessFunction summary:
|Creates a Delete SQL statement.|
Syntax:
|public static function CreateDelete(string $tableName&lt;br /&gt;, LJCDbColumns $keyColumns) : string|
Returns:
|The Update SQL statement.|
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCDataManagerLib.php&quot;;
 require_once &quot;$webCommonPath/LJCDBAccessLib.php&quot;;
 
 $keyColumns = new DbColumns();
 $keyColumns-&gt;Add(&quot;ID&quot;, value:1);
 
 $sql = LJCSQLBuilder::CreateDelete(&quot;TableName&quot;, $keyColumns);
 
 // $sql =
 // delete from TableName
 // where TableName.ID = 1|
---------------
LJCComments.SetComment line:
|		/// <include path='items/CreateInsert/*' file='Doc/LJCSQLBuilder.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Creates an Insert SQL statement.</summary>|
LJCComments.SetComment comment:
|Creates an Insert SQL statement.|
---------------
LJCComments.SetComment line:
|///     <param name="$tableName">The table name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$dataColumns">The Data columns.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The Update SQL statement.</returns>|
LJCComments.SetComment comment:
|The Update SQL statement.|
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDataManagerLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDataManagerLib.php";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDBAccessLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDBAccessLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $dataColumns = new DbColumns();|
LJCComments.SetComment isContinue:
| $dataColumns = new DbColumns();|
---------------
LJCComments.SetComment line:
|/// $dataColumns->Add("FirstName", value: "First");|
LJCComments.SetComment isContinue:
| $dataColumns->Add("FirstName", value: "First");|
---------------
LJCComments.SetComment line:
|/// $dataColumns->Add("LastName", value: "Last");|
LJCComments.SetComment isContinue:
| $dataColumns->Add("LastName", value: "Last");|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $sql = LJCSQLBuilder::CreateInsert("TableName", $dataColumns);|
LJCComments.SetComment isContinue:
| $sql = LJCSQLBuilder::CreateInsert("TableName", $dataColumns);|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // $sql =|
LJCComments.SetComment isContinue:
| // $sql =|
---------------
LJCComments.SetComment line:
|/// // update TableName set|
LJCComments.SetComment isContinue:
| // update TableName set|
---------------
LJCComments.SetComment line:
|/// //   FirstName = 'First',|
LJCComments.SetComment isContinue:
| //   FirstName = 'First',|
---------------
LJCComments.SetComment line:
|/// //   LastName = 'Last'|
LJCComments.SetComment isContinue:
| //   LastName = 'Last'|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|CreateInsert|
**
LJCDocDataGen.ProcessFunction summary:
|Creates an Insert SQL statement.|
Syntax:
|public static function CreateInsert(string $tableName&lt;br /&gt;, LJCDbColumns $dataColumns) : string|
Returns:
|The Update SQL statement.|
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCDataManagerLib.php&quot;;
 require_once &quot;$webCommonPath/LJCDBAccessLib.php&quot;;
 
 $dataColumns = new DbColumns();
 $dataColumns-&gt;Add(&quot;FirstName&quot;, value: &quot;First&quot;);
 $dataColumns-&gt;Add(&quot;LastName&quot;, value: &quot;Last&quot;);
 
 $sql = LJCSQLBuilder::CreateInsert(&quot;TableName&quot;, $dataColumns);
 
 // $sql =
 // update TableName set
 //   FirstName = &#039;First&#039;,
 //   LastName = &#039;Last&#039;|
---------------
LJCComments.SetComment line:
|		/// <include path='items/CreateSelect/*' file='Doc/LJCSQLBuilder.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Creates a Select SQL statement.</summary>|
LJCComments.SetComment comment:
|Creates a Select SQL statement.|
---------------
LJCComments.SetComment line:
|///     <param name="$tableName">The table name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$schemaColumns">The table schema definition columns.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$keyColumns">The where clause key columns.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$propertyNames">The included column property names.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$joins">The Collection of Join objects.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The Select SQL statement.</returns>|
LJCComments.SetComment comment:
|The Select SQL statement.|
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDataManagerLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDataManagerLib.php";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDBAccessLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDBAccessLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $schemaColumns = new LJCDbColumns();|
LJCComments.SetComment isContinue:
| $schemaColumns = new LJCDbColumns();|
---------------
LJCComments.SetComment line:
|/// $schemaColumns->Add("ID", null, "int");|
LJCComments.SetComment isContinue:
| $schemaColumns->Add("ID", null, "int");|
---------------
LJCComments.SetComment line:
|/// $schemaColumns->Add("Name");|
LJCComments.SetComment isContinue:
| $schemaColumns->Add("Name");|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $keyColumns = new LJCDbColumns();|
LJCComments.SetComment isContinue:
| $keyColumns = new LJCDbColumns();|
---------------
LJCComments.SetComment line:
|/// $keyColumns->Add("ID", value:1);|
LJCComments.SetComment isContinue:
| $keyColumns->Add("ID", value:1);|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// array $propertyNames = [];|
LJCComments.SetComment isContinue:
| array $propertyNames = [];|
---------------
LJCComments.SetComment line:
|/// $propertyNames[] = "ID";|
LJCComments.SetComment isContinue:
| $propertyNames[] = "ID";|
---------------
LJCComments.SetComment line:
|/// $propertyNames[] = "Name";|
LJCComments.SetComment isContinue:
| $propertyNames[] = "Name";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $joins = new LJCJoins();|
LJCComments.SetComment isContinue:
| $joins = new LJCJoins();|
---------------
LJCComments.SetComment line:
|/// $join = $joins->Add("JoinTableName");|
LJCComments.SetComment isContinue:
| $join = $joins->Add("JoinTableName");|
---------------
LJCComments.SetComment line:
|/// $join->JoinOns->Add("FromColumnName", "ToColumnName");|
LJCComments.SetComment isContinue:
| $join->JoinOns->Add("FromColumnName", "ToColumnName");|
---------------
LJCComments.SetComment line:
|/// $join->Columns->Add("JoinColumnName", "PropertyName", "ResultName");|
LJCComments.SetComment isContinue:
| $join->Columns->Add("JoinColumnName", "PropertyName", "ResultName");|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $sql = LJCSQLBuilder::CreateSelect("TableName", $schemaColumns|
LJCComments.SetComment isContinue:
| $sql = LJCSQLBuilder::CreateSelect("TableName", $schemaColumns|
---------------
LJCComments.SetComment line:
|///   , $keyColumns, $propertyNames, $joins);|
LJCComments.SetComment isContinue:
|   , $keyColumns, $propertyNames, $joins);|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // $sql =|
LJCComments.SetComment isContinue:
| // $sql =|
---------------
LJCComments.SetComment line:
|/// // select|
LJCComments.SetComment isContinue:
| // select|
---------------
LJCComments.SetComment line:
|/// //   TableName.ID,|
LJCComments.SetComment isContinue:
| //   TableName.ID,|
---------------
LJCComments.SetComment line:
|/// //   TableName.Name|
LJCComments.SetComment isContinue:
| //   TableName.Name|
---------------
LJCComments.SetComment line:
|/// //   JoinTableName.JoinColumnName as ResultName|
LJCComments.SetComment isContinue:
| //   JoinTableName.JoinColumnName as ResultName|
---------------
LJCComments.SetComment line:
|/// // from TableName;|
LJCComments.SetComment isContinue:
| // from TableName;|
---------------
LJCComments.SetComment line:
|/// // left join JoinTableName|
LJCComments.SetComment isContinue:
| // left join JoinTableName|
---------------
LJCComments.SetComment line:
|/// //   on ((TableName.FromColumnName = JoinTableName.ToColumnName))|
LJCComments.SetComment isContinue:
| //   on ((TableName.FromColumnName = JoinTableName.ToColumnName))|
---------------
LJCComments.SetComment line:
|/// // where TableName.ID = 1|
LJCComments.SetComment isContinue:
| // where TableName.ID = 1|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|CreateSelect|
**
LJCDocDataGen.ProcessFunction summary:
|Creates a Select SQL statement.|
Syntax:
|public static function CreateSelect(string $tableName&lt;br /&gt;, LJCDbColumns $schemaColumns, ?LJCDbColumns $keyColumns&lt;br /&gt;, array $propertyNames = null, ?LJCJoins $joins = null) : string|
Returns:
|The Select SQL statement.|
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCDataManagerLib.php&quot;;
 require_once &quot;$webCommonPath/LJCDBAccessLib.php&quot;;
 
 $schemaColumns = new LJCDbColumns();
 $schemaColumns-&gt;Add(&quot;ID&quot;, null, &quot;int&quot;);
 $schemaColumns-&gt;Add(&quot;Name&quot;);
 
 $keyColumns = new LJCDbColumns();
 $keyColumns-&gt;Add(&quot;ID&quot;, value:1);
 
 array $propertyNames = [];
 $propertyNames[] = &quot;ID&quot;;
 $propertyNames[] = &quot;Name&quot;;
 
 $joins = new LJCJoins();
 $join = $joins-&gt;Add(&quot;JoinTableName&quot;);
 $join-&gt;JoinOns-&gt;Add(&quot;FromColumnName&quot;, &quot;ToColumnName&quot;);
 $join-&gt;Columns-&gt;Add(&quot;JoinColumnName&quot;, &quot;PropertyName&quot;, &quot;ResultName&quot;);
 
 $sql = LJCSQLBuilder::CreateSelect(&quot;TableName&quot;, $schemaColumns
   , $keyColumns, $propertyNames, $joins);
 
 // $sql =
 // select
 //   TableName.ID,
 //   TableName.Name
 //   JoinTableName.JoinColumnName as ResultName
 // from TableName;
 // left join JoinTableName
 //   on ((TableName.FromColumnName = JoinTableName.ToColumnName))
 // where TableName.ID = 1|
---------------
LJCComments.SetComment line:
|		/// <include path='items/CreateUpdate/*' file='Doc/LJCSQLBuilder.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Creates an Update SQL statement.</summary>|
LJCComments.SetComment comment:
|Creates an Update SQL statement.|
---------------
LJCComments.SetComment line:
|///     <param name="$tableName">The table name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$keyColumns">The where clause key columns.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$dataColumns">The Data columns.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The Update SQL statement.</returns>|
LJCComments.SetComment comment:
|The Update SQL statement.|
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDataManagerLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDataManagerLib.php";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDBAccessLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDBAccessLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $keyColumns = new LJCDbColumns();|
LJCComments.SetComment isContinue:
| $keyColumns = new LJCDbColumns();|
---------------
LJCComments.SetComment line:
|/// $keyColumns->Add("ID", value:1);|
LJCComments.SetComment isContinue:
| $keyColumns->Add("ID", value:1);|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $dataColumns = new DbColumns();|
LJCComments.SetComment isContinue:
| $dataColumns = new DbColumns();|
---------------
LJCComments.SetComment line:
|/// $dataColumns->Add("FirstName", value: "First");|
LJCComments.SetComment isContinue:
| $dataColumns->Add("FirstName", value: "First");|
---------------
LJCComments.SetComment line:
|/// $dataColumns->Add("LastName", value: "Last");|
LJCComments.SetComment isContinue:
| $dataColumns->Add("LastName", value: "Last");|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $sql = LJCSQLBuilder::CreateUpdate("TableName", $keyColumns|
LJCComments.SetComment isContinue:
| $sql = LJCSQLBuilder::CreateUpdate("TableName", $keyColumns|
---------------
LJCComments.SetComment line:
|///   , $dataColumns);|
LJCComments.SetComment isContinue:
|   , $dataColumns);|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // $sql =|
LJCComments.SetComment isContinue:
| // $sql =|
---------------
LJCComments.SetComment line:
|/// // update TableName set|
LJCComments.SetComment isContinue:
| // update TableName set|
---------------
LJCComments.SetComment line:
|/// //   FirstName = 'First',|
LJCComments.SetComment isContinue:
| //   FirstName = 'First',|
---------------
LJCComments.SetComment line:
|/// //   LastName = 'Last'|
LJCComments.SetComment isContinue:
| //   LastName = 'Last'|
---------------
LJCComments.SetComment line:
|/// // where TableName.ID = 1|
LJCComments.SetComment isContinue:
| // where TableName.ID = 1|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|CreateUpdate|
**
LJCDocDataGen.ProcessFunction summary:
|Creates an Update SQL statement.|
Syntax:
|public static function CreateUpdate(string $tableName&lt;br /&gt;, ?LJCDbColumns $keyColumns, LJCDbColumns $dataColumns) : string|
Returns:
|The Update SQL statement.|
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCDataManagerLib.php&quot;;
 require_once &quot;$webCommonPath/LJCDBAccessLib.php&quot;;
 
 $keyColumns = new LJCDbColumns();
 $keyColumns-&gt;Add(&quot;ID&quot;, value:1);
 
 $dataColumns = new DbColumns();
 $dataColumns-&gt;Add(&quot;FirstName&quot;, value: &quot;First&quot;);
 $dataColumns-&gt;Add(&quot;LastName&quot;, value: &quot;Last&quot;);
 
 $sql = LJCSQLBuilder::CreateUpdate(&quot;TableName&quot;, $keyColumns
   , $dataColumns);
 
 // $sql =
 // update TableName set
 //   FirstName = &#039;First&#039;,
 //   LastName = &#039;Last&#039;
 // where TableName.ID = 1|
---------------
LJCComments.SetComment line:
|		/// <include path='items/GetJoinOns/*' file='Doc/LJCSQLBuilder.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Get the JoinOn statements.</summary>|
LJCComments.SetComment comment:
|Get the JoinOn statements.|
---------------
LJCComments.SetComment line:
|///     <param name="$tableName">The request table name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$join">The Join object.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$recursive">Indicates if it is a recursive call.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The JoinOn statements.</returns>|
LJCComments.SetComment comment:
|The JoinOn statements.|
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDataManagerLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDataManagerLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $joins = new LJCJoins();|
LJCComments.SetComment isContinue:
| $joins = new LJCJoins();|
---------------
LJCComments.SetComment line:
|/// $join = $joins->Add("JoinTableName");|
LJCComments.SetComment isContinue:
| $join = $joins->Add("JoinTableName");|
---------------
LJCComments.SetComment line:
|/// $join->JoinOns->Add("FromColumnName", "ToColumnName");|
LJCComments.SetComment isContinue:
| $join->JoinOns->Add("FromColumnName", "ToColumnName");|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|GetJoinOns|
**
LJCDocDataGen.ProcessFunction summary:
|Get the JoinOn statements.|
Syntax:
|public static function GetJoinOns(string $tableName, LJCJoin $join&lt;br /&gt;, bool $recursive = false) : ?string|
Returns:
|The JoinOn statements.|
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCDataManagerLib.php&quot;;
 
 $joins = new LJCJoins();
 $join = $joins-&gt;Add(&quot;JoinTableName&quot;);
 $join-&gt;JoinOns-&gt;Add(&quot;FromColumnName&quot;, &quot;ToColumnName&quot;);|
---------------
LJCComments.SetComment line:
|		/// <summary>Creates the join statement.</summary>
|
LJCComments.SetComment comment:
|Creates the join statement.|
---------------
LJCComments.SetComment line:
|		/// <include path='items/GetJoinStatement/*' file='Doc/LJCSQLBuilder.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Creates the join statement.</summary>|
LJCComments.SetComment comment:
|Creates the join statement.|
---------------
LJCComments.SetComment line:
|///     <param name="$tableName">The request table name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$joins">The Collection of Join objects.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The Join clause.</returns>|
LJCComments.SetComment comment:
|The Join clause.|
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDataManagerLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDataManagerLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $joins = new LJCJoins();|
LJCComments.SetComment isContinue:
| $joins = new LJCJoins();|
---------------
LJCComments.SetComment line:
|/// $join = $joins->Add("JoinTableName");|
LJCComments.SetComment isContinue:
| $join = $joins->Add("JoinTableName");|
---------------
LJCComments.SetComment line:
|/// $join->JoinOns->Add("FromColumnName", "ToColumnName");|
LJCComments.SetComment isContinue:
| $join->JoinOns->Add("FromColumnName", "ToColumnName");|
---------------
LJCComments.SetComment line:
|/// $join->Columns->Add("JoinColumnName", "PropertyName", "ResultName");|
LJCComments.SetComment isContinue:
| $join->Columns->Add("JoinColumnName", "PropertyName", "ResultName");|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $tableName = "TableName";|
LJCComments.SetComment isContinue:
| $tableName = "TableName";|
---------------
LJCComments.SetComment line:
|/// $schemaColumns = $dataManager->SchemaColumns;|
LJCComments.SetComment isContinue:
| $schemaColumns = $dataManager->SchemaColumns;|
---------------
LJCComments.SetComment line:
|/// $sql = "select\r\n";|
LJCComments.SetComment isContinue:
| $sql = "select\r\n";|
---------------
LJCComments.SetComment line:
|/// $sql .= LJCSQLBuilder::SQLColumns($tableName, $schemaColumns|
LJCComments.SetComment isContinue:
| $sql .= LJCSQLBuilder::SQLColumns($tableName, $schemaColumns|
---------------
LJCComments.SetComment line:
|///   , joins: $joins);|
LJCComments.SetComment isContinue:
|   , joins: $joins);|
---------------
LJCComments.SetComment line:
|/// $sql .= "from $tableName \r\n";|
LJCComments.SetComment isContinue:
| $sql .= "from $tableName \r\n";|
---------------
LJCComments.SetComment line:
|/// $sql .= LJCSQLBuilder::GetJoinStatement($tableName, $joins);|
LJCComments.SetComment isContinue:
| $sql .= LJCSQLBuilder::GetJoinStatement($tableName, $joins);|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|GetJoinStatement|
**
LJCDocDataGen.ProcessFunction summary:
|Creates the join statement.|
Syntax:
|public static function GetJoinStatement(string $tableName&lt;br /&gt;, ?LJCJoins $joins) : ?string|
Returns:
|The Join clause.|
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCDataManagerLib.php&quot;;
 
 $joins = new LJCJoins();
 $join = $joins-&gt;Add(&quot;JoinTableName&quot;);
 $join-&gt;JoinOns-&gt;Add(&quot;FromColumnName&quot;, &quot;ToColumnName&quot;);
 $join-&gt;Columns-&gt;Add(&quot;JoinColumnName&quot;, &quot;PropertyName&quot;, &quot;ResultName&quot;);
 
 $tableName = &quot;TableName&quot;;
 $schemaColumns = $dataManager-&gt;SchemaColumns;
 $sql = &quot;select\r\n&quot;;
 $sql .= LJCSQLBuilder::SQLColumns($tableName, $schemaColumns
   , joins: $joins);
 $sql .= &quot;from $tableName \r\n&quot;;
 $sql .= LJCSQLBuilder::GetJoinStatement($tableName, $joins);|
---------------
LJCComments.SetComment line:
|		/// <include path='items/GetJoinTableString/*' file='Doc/LJCSQLBuilder.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Get the full join table string.</summary>|
LJCComments.SetComment comment:
|Get the full join table string.|
---------------
LJCComments.SetComment line:
|///     <param name="$join">The Join object.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The Join table string.</returns>|
LJCComments.SetComment comment:
|The Join table string.|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|		/// <include path='items/GetOrderBy/*' file='Doc/LJCSQLBuilder.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Creates an OrderBy clause.</summary>|
LJCComments.SetComment comment:
|Creates an OrderBy clause.|
---------------
LJCComments.SetComment line:
|///     <param name="$orderByNames">The OrderBy names array.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The OrderBy clause.</returns>|
LJCComments.SetComment comment:
|The OrderBy clause.|
LJCComments.SetComment comment
FunctionName:
|GetOrderBy|
**
LJCDocDataGen.ProcessFunction summary:
|Creates an OrderBy clause.|
Syntax:
|public static function GetOrderBy(?array $orderByNames) : string|
Returns:
|The OrderBy clause.|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/SQLColumns/*' file='Doc/LJCSQLBuilder.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Creates the columns for a Select SQL statement.</summary>|
LJCComments.SetComment comment:
|Creates the columns for a Select SQL statement.|
---------------
LJCComments.SetComment line:
|///     <param name="$tableName">The request Table name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$sqlColumns">The included columns.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$includeParens">Includes the statement parenthesis.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$joins">The Join definitions.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The Select columns.</returns>|
LJCComments.SetComment comment:
|The Select columns.|
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDataManagerLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDataManagerLib.php";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDBAccessLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDBAccessLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $joins = new LJCJoins();|
LJCComments.SetComment isContinue:
| $joins = new LJCJoins();|
---------------
LJCComments.SetComment line:
|/// $join = $joins->Add("JoinTableName");|
LJCComments.SetComment isContinue:
| $join = $joins->Add("JoinTableName");|
---------------
LJCComments.SetComment line:
|/// $join->JoinOns->Add("FromColumnName", "ToColumnName");|
LJCComments.SetComment isContinue:
| $join->JoinOns->Add("FromColumnName", "ToColumnName");|
---------------
LJCComments.SetComment line:
|/// $join->Columns->Add("JoinColumnName", "PropertyName", "ResultName");|
LJCComments.SetComment isContinue:
| $join->Columns->Add("JoinColumnName", "PropertyName", "ResultName");|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $tableName = "TableName";|
LJCComments.SetComment isContinue:
| $tableName = "TableName";|
---------------
LJCComments.SetComment line:
|/// $dbColumns = new DbColumns();|
LJCComments.SetComment isContinue:
| $dbColumns = new DbColumns();|
---------------
LJCComments.SetComment line:
|/// $dbColumns->Add("ID", dataTypeName: "int");|
LJCComments.SetComment isContinue:
| $dbColumns->Add("ID", dataTypeName: "int");|
---------------
LJCComments.SetComment line:
|/// $dbColumns->Add("Name");|
LJCComments.SetComment isContinue:
| $dbColumns->Add("Name");|
---------------
LJCComments.SetComment line:
|/// $columns = LJCSQLBuilder::SQLColumns($tableName, $dbColumns, $joins);|
LJCComments.SetComment isContinue:
| $columns = LJCSQLBuilder::SQLColumns($tableName, $dbColumns, $joins);|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // $columns =|
LJCComments.SetComment isContinue:
| // $columns =|
---------------
LJCComments.SetComment line:
|/// //  TableName.ID,|
LJCComments.SetComment isContinue:
| //  TableName.ID,|
---------------
LJCComments.SetComment line:
|/// //  TableName.Name,|
LJCComments.SetComment isContinue:
| //  TableName.Name,|
---------------
LJCComments.SetComment line:
|/// //  JoinTableName.JoinColumnName as ResultName|
LJCComments.SetComment isContinue:
| //  JoinTableName.JoinColumnName as ResultName|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|SQLColumns|
**
LJCDocDataGen.ProcessFunction summary:
|Creates the columns for a Select SQL statement.|
Syntax:
|public static function SQLColumns(string $tableName&lt;br /&gt;, LJCDbColumns $sqlColumns, bool $includeParens = false&lt;br /&gt;, LJCJoins $joins = null) : string|
Returns:
|The Select columns.|
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCDataManagerLib.php&quot;;
 require_once &quot;$webCommonPath/LJCDBAccessLib.php&quot;;
 
 $joins = new LJCJoins();
 $join = $joins-&gt;Add(&quot;JoinTableName&quot;);
 $join-&gt;JoinOns-&gt;Add(&quot;FromColumnName&quot;, &quot;ToColumnName&quot;);
 $join-&gt;Columns-&gt;Add(&quot;JoinColumnName&quot;, &quot;PropertyName&quot;, &quot;ResultName&quot;);
 
 $tableName = &quot;TableName&quot;;
 $dbColumns = new DbColumns();
 $dbColumns-&gt;Add(&quot;ID&quot;, dataTypeName: &quot;int&quot;);
 $dbColumns-&gt;Add(&quot;Name&quot;);
 $columns = LJCSQLBuilder::SQLColumns($tableName, $dbColumns, $joins);
 
 // $columns =
 //  TableName.ID,
 //  TableName.Name,
 //  JoinTableName.JoinColumnName as ResultName|
---------------
LJCComments.SetComment line:
|		/// <include path='items/SQLJoinColumns/*' file='Doc/LJCSQLBuilder.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Creates the Join columns for a Select SQL statement.</summary>|
LJCComments.SetComment comment:
|Creates the Join columns for a Select SQL statement.|
---------------
LJCComments.SetComment line:
|///     <param name="$joins">The Join definitions.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The Join columns.</returns>|
LJCComments.SetComment comment:
|The Join columns.|
LJCComments.SetComment comment
FunctionName:
|SQLJoinColumns|
**
LJCDocDataGen.ProcessFunction summary:
|Creates the Join columns for a Select SQL statement.|
Syntax:
|public static function SQLJoinColumns(?LJCJoins $joins) : ?string|
Returns:
|The Join columns.|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/SQLValueColumns/*' file='Doc/LJCSQLBuilder.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Creates the value columns for an Update SQL statement.</summary>|
LJCComments.SetComment comment:
|Creates the value columns for an Update SQL statement.|
---------------
LJCComments.SetComment line:
|///     <param name="$dataColumns">The Data columns.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$isUpdate">Indicates if the values are for an Update.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$includeParens">Includes the statement parenthesis.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The Add and Update value columns.</returns>|
LJCComments.SetComment comment:
|The Add and Update value columns.|
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDataManagerLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDataManagerLib.php";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDBAccessLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDBAccessLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $dbColumns = new DbColumns();|
LJCComments.SetComment isContinue:
| $dbColumns = new DbColumns();|
---------------
LJCComments.SetComment line:
|/// $dbColumns->Add("FirstName", value: "First");|
LJCComments.SetComment isContinue:
| $dbColumns->Add("FirstName", value: "First");|
---------------
LJCComments.SetComment line:
|/// $dbColumns->Add("LastName", value: "Last");|
LJCComments.SetComment isContinue:
| $dbColumns->Add("LastName", value: "Last");|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // For an Update "set" statement.|
LJCComments.SetComment isContinue:
| // For an Update "set" statement.|
---------------
LJCComments.SetComment line:
|/// $columns = $LJCSQLBuilder::SQLValueColumns($dbColumns, true);|
LJCComments.SetComment isContinue:
| $columns = $LJCSQLBuilder::SQLValueColumns($dbColumns, true);|
---------------
LJCComments.SetComment line:
|/// // $columns =|
LJCComments.SetComment isContinue:
| // $columns =|
---------------
LJCComments.SetComment line:
|/// //  FirstName = 'First',|
LJCComments.SetComment isContinue:
| //  FirstName = 'First',|
---------------
LJCComments.SetComment line:
|/// //  LastName = 'Last'|
LJCComments.SetComment isContinue:
| //  LastName = 'Last'|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // For an Insert "values" statement.|
LJCComments.SetComment isContinue:
| // For an Insert "values" statement.|
---------------
LJCComments.SetComment line:
|/// $columns = LJCSQLBuilder::SQLValueColumns($dbColumns, false, true);|
LJCComments.SetComment isContinue:
| $columns = LJCSQLBuilder::SQLValueColumns($dbColumns, false, true);|
---------------
LJCComments.SetComment line:
|/// // $columns =|
LJCComments.SetComment isContinue:
| // $columns =|
---------------
LJCComments.SetComment line:
|/// //  (|
LJCComments.SetComment isContinue:
| //  (|
---------------
LJCComments.SetComment line:
|/// //   'First',|
LJCComments.SetComment isContinue:
| //   'First',|
---------------
LJCComments.SetComment line:
|/// //   'Last'|
LJCComments.SetComment isContinue:
| //   'Last'|
---------------
LJCComments.SetComment line:
|/// //  )|
LJCComments.SetComment isContinue:
| //  )|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|SQLValueColumns|
**
LJCDocDataGen.ProcessFunction summary:
|Creates the value columns for an Update SQL statement.|
Syntax:
|public static function SQLValueColumns(LJCDbColumns $dataColumns&lt;br /&gt;, bool $isUpdate = false, bool $includeParens = false) : string|
Returns:
|The Add and Update value columns.|
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCDataManagerLib.php&quot;;
 require_once &quot;$webCommonPath/LJCDBAccessLib.php&quot;;
 
 $dbColumns = new DbColumns();
 $dbColumns-&gt;Add(&quot;FirstName&quot;, value: &quot;First&quot;);
 $dbColumns-&gt;Add(&quot;LastName&quot;, value: &quot;Last&quot;);
 
 // For an Update &quot;set&quot; statement.
 $columns = $LJCSQLBuilder::SQLValueColumns($dbColumns, true);
 // $columns =
 //  FirstName = &#039;First&#039;,
 //  LastName = &#039;Last&#039;
 
 // For an Insert &quot;values&quot; statement.
 $columns = LJCSQLBuilder::SQLValueColumns($dbColumns, false, true);
 // $columns =
 //  (
 //   &#039;First&#039;,
 //   &#039;Last&#039;
 //  )|
---------------
LJCComments.SetComment line:
|	/// <summary>The PDO Data Access Library</summary>
|
LJCComments.SetComment comment:
|The PDO Data Access Library|
**
LJCDocDataGen.ProcessLib summary:
|The PDO Data Access Library|
Remarks
---------------
LJCComments.SetComment line:
|	/// <summary>Contains the Connection values.</summary>
|
LJCComments.SetComment comment:
|Contains the Connection values.|
ClassName:
|LJCConnectionValues|
**
LJCDocDataGen.ProcessClass summary:
|Contains the Connection values.|
Syntax:
|class LJCConnectionValues|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/construct/*' file='Doc/LJCConnectionValues.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Initializes a class instance with the provided values.</summary>|
LJCComments.SetComment comment:
|Initializes a class instance with the provided values.|
---------------
LJCComments.SetComment line:
|///     <param name="$dbServer">The DB Server name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$dbName">The Database name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$userID">The user name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$password">The user Password.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDBAccessLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDBAccessLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $database = "DatabaseName";|
LJCComments.SetComment isContinue:
| $database = "DatabaseName";|
---------------
LJCComments.SetComment line:
|/// $userID = "UserID";|
LJCComments.SetComment isContinue:
| $userID = "UserID";|
---------------
LJCComments.SetComment line:
|/// $password = "Password":|
LJCComments.SetComment isContinue:
| $password = "Password":|
---------------
LJCComments.SetComment line:
|/// $connectionValues = new LJCConnectionValues("localhost", $database, $userID|
LJCComments.SetComment isContinue:
| $connectionValues = new LJCConnectionValues("localhost", $database, $userID|
---------------
LJCComments.SetComment line:
|///   , $password);|
LJCComments.SetComment isContinue:
|   , $password);|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|construct|
**
LJCDocDataGen.ProcessFunction summary:
|Initializes a class instance with the provided values.|
Syntax:
|public function __construct(string $dbServer&lt;br /&gt;, string $dbName, string $userID, string $password)|
Returns
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCDBAccessLib.php&quot;;
 
 $database = &quot;DatabaseName&quot;;
 $userID = &quot;UserID&quot;;
 $password = &quot;Password&quot;:
 $connectionValues = new LJCConnectionValues(&quot;localhost&quot;, $database, $userID
   , $password);|
---------------
LJCComments.SetComment line:
|		/// <summary>The Database name.</summary>
|
LJCComments.SetComment comment:
|The Database name.|
PropertyName:
|$DbName|
**
LJCDocDataGen.ProcessProperty summary:
|The Database name.|
Syntax:
|public string $DbName;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The DB Server name.</summary>
|
LJCComments.SetComment comment:
|The DB Server name.|
PropertyName:
|$DbServer|
**
LJCDocDataGen.ProcessProperty summary:
|The DB Server name.|
Syntax:
|public string $DbServer;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The user Password.</summary>
|
LJCComments.SetComment comment:
|The user Password.|
PropertyName:
|$Password|
**
LJCDocDataGen.ProcessProperty summary:
|The user Password.|
Syntax:
|public string $Password;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The User ID.</summary>
|
LJCComments.SetComment comment:
|The User ID.|
PropertyName:
|$UserID|
**
LJCDocDataGen.ProcessProperty summary:
|The User ID.|
Syntax:
|public string $UserID;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|	/// <include path='items/LJCDbAccess/*' file='Doc/LJCDbAccess.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Provides standard PDO Data Access.</summary>|
LJCComments.SetComment comment:
|Provides standard PDO Data Access.|
---------------
LJCComments.SetComment line:
|/// <remarks>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// The Data Access class encapsulates the repetitive code required to
|
LJCComments.SetComment isContinue:
| The Data Access class encapsulates the repetitive code required to
|
---------------
LJCComments.SetComment line:
|/// perform common database functions using PDO. This reduces the amount of
|
LJCComments.SetComment isContinue:
| perform common database functions using PDO. This reduces the amount of
|
---------------
LJCComments.SetComment line:
|/// application code required to access this functionality and provides a
|
LJCComments.SetComment isContinue:
| application code required to access this functionality and provides a
|
---------------
LJCComments.SetComment line:
|/// standard location for implementing common best practices.
|
LJCComments.SetComment isContinue:
| standard location for implementing common best practices.
|
---------------
LJCComments.SetComment line:
|/// </remarks>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
ClassName:
|LJCDbAccess|
**
LJCDocDataGen.ProcessClass summary:
|Provides standard PDO Data Access.|
Syntax:
|class LJCDbAccess|
Remarks:
|
 The Data Access class encapsulates the repetitive code required to
 perform common database functions using PDO. This reduces the amount of
 application code required to access this functionality and provides a
 standard location for implementing common best practices.
|
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/GetValue/*' file='Doc/LJCDbAccess.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// Returns a data value if the element exists, otherwise returns null.</summary>|
LJCComments.SetComment isContinue:
| Returns a data value if the element exists, otherwise returns null.|
---------------
LJCComments.SetComment line:
|///     <param name="$row">The data row columns.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$columnName">The column name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The data value.</returns>|
LJCComments.SetComment comment:
|The data value.|
---------------
LJCComments.SetComment line:
|/// <remarks>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// Returns null if the element does not exist.
|
LJCComments.SetComment isContinue:
| Returns null if the element does not exist.
|
---------------
LJCComments.SetComment line:
|/// </remarks>|
LJCComments.SetComment isContinue
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDBAccessLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDBAccessLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // See constructor for how to create $connectionValues.|
LJCComments.SetComment isContinue:
| // See constructor for how to create $connectionValues.|
---------------
LJCComments.SetComment line:
|/// $dbAccess = new LJCDbAccess($connectionValues);|
LJCComments.SetComment isContinue:
| $dbAccess = new LJCDbAccess($connectionValues);|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $tableName = "TableName";|
LJCComments.SetComment isContinue:
| $tableName = "TableName";|
---------------
LJCComments.SetComment line:
|/// $sql = "select ID, Name from $tableName where ID = 1";|
LJCComments.SetComment isContinue:
| $sql = "select ID, Name from $tableName where ID = 1";|
---------------
LJCComments.SetComment line:
|/// $row = $dbAccess->Retrieve($sql);|
LJCComments.SetComment isContinue:
| $row = $dbAccess->Retrieve($sql);|
---------------
LJCComments.SetComment line:
|/// $id = LJCDbAccess::GetValue($row, "ID");|
LJCComments.SetComment isContinue:
| $id = LJCDbAccess::GetValue($row, "ID");|
---------------
LJCComments.SetComment line:
|/// $name = LJCDbAccess::GetValue($row, "Name");|
LJCComments.SetComment isContinue:
| $name = LJCDbAccess::GetValue($row, "Name");|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|GetValue|
**
LJCDocDataGen.ProcessFunction summary:
|
 Returns a data value if the element exists, otherwise returns null.|
Syntax:
|public static function GetValue(array $row, string $columnName)|
Returns:
|The data value.|
Remarks:
|
 Returns null if the element does not exist.
|
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCDBAccessLib.php&quot;;
 
 // See constructor for how to create $connectionValues.
 $dbAccess = new LJCDbAccess($connectionValues);
 
 $tableName = &quot;TableName&quot;;
 $sql = &quot;select ID, Name from $tableName where ID = 1&quot;;
 $row = $dbAccess-&gt;Retrieve($sql);
 $id = LJCDbAccess::GetValue($row, &quot;ID&quot;);
 $name = LJCDbAccess::GetValue($row, &quot;Name&quot;);|
---------------
LJCComments.SetComment line:
|		/// <include path='items/construct/*' file='Doc/LJCDbAccess.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Initializes a class instance.</summary>|
LJCComments.SetComment comment:
|Initializes a class instance.|
---------------
LJCComments.SetComment line:
|///     <param name="$connectionValues">The Connection values.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDBAccessLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDBAccessLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $database = "DatabaseName";|
LJCComments.SetComment isContinue:
| $database = "DatabaseName";|
---------------
LJCComments.SetComment line:
|/// $userID = "UserID";|
LJCComments.SetComment isContinue:
| $userID = "UserID";|
---------------
LJCComments.SetComment line:
|/// $password = "Password":|
LJCComments.SetComment isContinue:
| $password = "Password":|
---------------
LJCComments.SetComment line:
|/// $connectionValues = new LJCConnectionValues("localhost", $database, $userID|
LJCComments.SetComment isContinue:
| $connectionValues = new LJCConnectionValues("localhost", $database, $userID|
---------------
LJCComments.SetComment line:
|///   , $password);|
LJCComments.SetComment isContinue:
|   , $password);|
---------------
LJCComments.SetComment line:
|/// $dbAccess = new LJCDbAccess($connectionValues);|
LJCComments.SetComment isContinue:
| $dbAccess = new LJCDbAccess($connectionValues);|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|construct|
**
LJCDocDataGen.ProcessFunction summary:
|Initializes a class instance.|
Syntax:
|public function __construct(LJCConnectionValues $connectionValues)|
Returns
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCDBAccessLib.php&quot;;
 
 $database = &quot;DatabaseName&quot;;
 $userID = &quot;UserID&quot;;
 $password = &quot;Password&quot;:
 $connectionValues = new LJCConnectionValues(&quot;localhost&quot;, $database, $userID
   , $password);
 $dbAccess = new LJCDbAccess($connectionValues);|
---------------
LJCComments.SetComment line:
|		/// <include path='items/Execute/*' file='Doc/LJCDbAccess.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Executes a non-query sql statement.</summary>|
LJCComments.SetComment comment:
|Executes a non-query sql statement.|
---------------
LJCComments.SetComment line:
|///     <param name="$sql">The SQL statement.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The count of affected records.</returns>|
LJCComments.SetComment comment:
|The count of affected records.|
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDBAccessLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDBAccessLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // See constructor for how to create $connectionValues.|
LJCComments.SetComment isContinue:
| // See constructor for how to create $connectionValues.|
---------------
LJCComments.SetComment line:
|/// $dbAccess = new LJCDbAccess($connectionValues);|
LJCComments.SetComment isContinue:
| $dbAccess = new LJCDbAccess($connectionValues);|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $tableName = "TableName";|
LJCComments.SetComment isContinue:
| $tableName = "TableName";|
---------------
LJCComments.SetComment line:
|/// $sql = "delete from $tableName where ID = 1";|
LJCComments.SetComment isContinue:
| $sql = "delete from $tableName where ID = 1";|
---------------
LJCComments.SetComment line:
|/// $affectedCount = $dbAccess->Execute($sql);|
LJCComments.SetComment isContinue:
| $affectedCount = $dbAccess->Execute($sql);|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|Execute|
**
LJCDocDataGen.ProcessFunction summary:
|Executes a non-query sql statement.|
Syntax:
|public function Execute(string $sql) : int|
Returns:
|The count of affected records.|
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCDBAccessLib.php&quot;;
 
 // See constructor for how to create $connectionValues.
 $dbAccess = new LJCDbAccess($connectionValues);
 
 $tableName = &quot;TableName&quot;;
 $sql = &quot;delete from $tableName where ID = 1&quot;;
 $affectedCount = $dbAccess-&gt;Execute($sql);|
---------------
LJCComments.SetComment line:
|		/// <include path='items/Load/*' file='Doc/LJCDbAccess.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Loads the records for the provided SQL statement.</summary>|
LJCComments.SetComment comment:
|Loads the records for the provided SQL statement.|
---------------
LJCComments.SetComment line:
|///     <param name="$sql">The SQL statement.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>An array of data records.</returns>|
LJCComments.SetComment comment:
|An array of data records.|
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDBAccessLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDBAccessLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // See constructor for how to create $connectionValues.|
LJCComments.SetComment isContinue:
| // See constructor for how to create $connectionValues.|
---------------
LJCComments.SetComment line:
|/// $dbAccess = new LJCDbAccess($connectionValues);|
LJCComments.SetComment isContinue:
| $dbAccess = new LJCDbAccess($connectionValues);|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $tableName = "TableName";|
LJCComments.SetComment isContinue:
| $tableName = "TableName";|
---------------
LJCComments.SetComment line:
|/// $sql = "select * from $tableName";|
LJCComments.SetComment isContinue:
| $sql = "select * from $tableName";|
---------------
LJCComments.SetComment line:
|/// $rows = $dbAccess->Load($sql);|
LJCComments.SetComment isContinue:
| $rows = $dbAccess->Load($sql);|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|Load|
**
LJCDocDataGen.ProcessFunction summary:
|Loads the records for the provided SQL statement.|
Syntax:
|public function Load(string $sql) : ?array|
Returns:
|An array of data records.|
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCDBAccessLib.php&quot;;
 
 // See constructor for how to create $connectionValues.
 $dbAccess = new LJCDbAccess($connectionValues);
 
 $tableName = &quot;TableName&quot;;
 $sql = &quot;select * from $tableName&quot;;
 $rows = $dbAccess-&gt;Load($sql);|
---------------
LJCComments.SetComment line:
|		/// <include path='items/Retrieve/*' file='Doc/LJCDbAccess.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Retrieves a record for the provided SQL statement.</summary>|
LJCComments.SetComment comment:
|Retrieves a record for the provided SQL statement.|
---------------
LJCComments.SetComment line:
|///     <param name="$sql">The SQL statement.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>An array of record columns.</returns>|
LJCComments.SetComment comment:
|An array of record columns.|
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDBAccessLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDBAccessLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // See constructor for how to create $connectionValues.|
LJCComments.SetComment isContinue:
| // See constructor for how to create $connectionValues.|
---------------
LJCComments.SetComment line:
|/// $dbAccess = new LJCDbAccess($connectionValues);|
LJCComments.SetComment isContinue:
| $dbAccess = new LJCDbAccess($connectionValues);|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $tableName = "TableName";|
LJCComments.SetComment isContinue:
| $tableName = "TableName";|
---------------
LJCComments.SetComment line:
|/// $sql = "select * from $tableName where ID = 1";|
LJCComments.SetComment isContinue:
| $sql = "select * from $tableName where ID = 1";|
---------------
LJCComments.SetComment line:
|/// $row = $dbAccess->Retrieve($sql);|
LJCComments.SetComment isContinue:
| $row = $dbAccess->Retrieve($sql);|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|Retrieve|
**
LJCDocDataGen.ProcessFunction summary:
|Retrieves a record for the provided SQL statement.|
Syntax:
|public function Retrieve(string $sql) : ?array|
Returns:
|An array of record columns.|
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCDBAccessLib.php&quot;;
 
 // See constructor for how to create $connectionValues.
 $dbAccess = new LJCDbAccess($connectionValues);
 
 $tableName = &quot;TableName&quot;;
 $sql = &quot;select * from $tableName where ID = 1&quot;;
 $row = $dbAccess-&gt;Retrieve($sql);|
---------------
LJCComments.SetComment line:
|		/// <include path='items/GetConnection/*' file='Doc/LJCDbAccess.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Creates the PDO connection.</summary>|
LJCComments.SetComment comment:
|Creates the PDO connection.|
---------------
LJCComments.SetComment line:
|/// <returns>The PDO connection object.</returns>|
LJCComments.SetComment comment:
|The PDO connection object.|
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDBAccessLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDBAccessLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // See constructor for how to create $connectionValues.|
LJCComments.SetComment isContinue:
| // See constructor for how to create $connectionValues.|
---------------
LJCComments.SetComment line:
|/// $dbAccess = new LJCDbAccess($connectionValues);|
LJCComments.SetComment isContinue:
| $dbAccess = new LJCDbAccess($connectionValues);|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $connection = $dbAccess->GetConnection();|
LJCComments.SetComment isContinue:
| $connection = $dbAccess->GetConnection();|
---------------
LJCComments.SetComment line:
|/// if ($connection != null)|
LJCComments.SetComment isContinue:
| if ($connection != null)|
---------------
LJCComments.SetComment line:
|/// {|
LJCComments.SetComment isContinue:
| {|
---------------
LJCComments.SetComment line:
|///   // Use connection to perform low level data access.|
LJCComments.SetComment isContinue:
|   // Use connection to perform low level data access.|
---------------
LJCComments.SetComment line:
|/// }|
LJCComments.SetComment isContinue:
| }|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|GetConnection|
**
LJCDocDataGen.ProcessFunction summary:
|Creates the PDO connection.|
Syntax:
|public function GetConnection()|
Returns:
|The PDO connection object.|
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCDBAccessLib.php&quot;;
 
 // See constructor for how to create $connectionValues.
 $dbAccess = new LJCDbAccess($connectionValues);
 
 $connection = $dbAccess-&gt;GetConnection();
 if ($connection != null)
 {
   // Use connection to perform low level data access.
 }|
---------------
LJCComments.SetComment line:
|		/// <include path='items/LoadTableSchema/*' file='Doc/LJCDbAccess.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Returns the Table Schema DbColumns collection.</summary>|
LJCComments.SetComment comment:
|Returns the Table Schema DbColumns collection.|
---------------
LJCComments.SetComment line:
|///     <param name="$dbName">The Database name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$tableName">The Table name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>A DbColumns collection of column definitions.</returns>|
LJCComments.SetComment comment:
|A DbColumns collection of column definitions.|
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDBAccessLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDBAccessLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // See constructor for how to create $connectionValues.|
LJCComments.SetComment isContinue:
| // See constructor for how to create $connectionValues.|
---------------
LJCComments.SetComment line:
|/// $dbAccess = new LJCDbAccess($connectionValues);|
LJCComments.SetComment isContinue:
| $dbAccess = new LJCDbAccess($connectionValues);|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $tableName = "TableName";|
LJCComments.SetComment isContinue:
| $tableName = "TableName";|
---------------
LJCComments.SetComment line:
|/// $dbColumns = $dbAccess->LoadTableSchema($database, $tableName);|
LJCComments.SetComment isContinue:
| $dbColumns = $dbAccess->LoadTableSchema($database, $tableName);|
---------------
LJCComments.SetComment line:
|/// if (count($dbColumns) > 0)|
LJCComments.SetComment isContinue:
| if (count($dbColumns) > 0)|
---------------
LJCComments.SetComment line:
|/// {|
LJCComments.SetComment isContinue:
| {|
---------------
LJCComments.SetComment line:
|///   // Use DbColumns data definitions.|
LJCComments.SetComment isContinue:
|   // Use DbColumns data definitions.|
---------------
LJCComments.SetComment line:
|/// }|
LJCComments.SetComment isContinue:
| }|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|LoadTableSchema|
**
LJCDocDataGen.ProcessFunction summary:
|Returns the Table Schema DbColumns collection.|
Syntax:
|public function LoadTableSchema(string $dbName, string $tableName)|
Returns:
|A DbColumns collection of column definitions.|
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCDBAccessLib.php&quot;;
 
 // See constructor for how to create $connectionValues.
 $dbAccess = new LJCDbAccess($connectionValues);
 
 $tableName = &quot;TableName&quot;;
 $dbColumns = $dbAccess-&gt;LoadTableSchema($database, $tableName);
 if (count($dbColumns) &gt; 0)
 {
   // Use DbColumns data definitions.
 }|
---------------
LJCComments.SetComment line:
|		/// <include path='items/SetConnectionValues/*' file='Doc/LJCDbAccess.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Sets the $ConnectionValues property.</summary>|
LJCComments.SetComment comment:
|Sets the $ConnectionValues property.|
---------------
LJCComments.SetComment line:
|///     <param name="$dbServer">The DB Server name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$dbName">The Database name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$userID">The user name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$password">The user Password.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDBAccessLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDBAccessLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // See constructor for how to create $connectionValues.|
LJCComments.SetComment isContinue:
| // See constructor for how to create $connectionValues.|
---------------
LJCComments.SetComment line:
|/// $dbAccess = new LJCDbAccess($connectionValues);|
LJCComments.SetComment isContinue:
| $dbAccess = new LJCDbAccess($connectionValues);|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // Change some of the object properties.|
LJCComments.SetComment isContinue:
| // Change some of the object properties.|
---------------
LJCComments.SetComment line:
|/// $tableName = "NewTableName";|
LJCComments.SetComment isContinue:
| $tableName = "NewTableName";|
---------------
LJCComments.SetComment line:
|/// $dbAccess->SetConnectionValues($database, $tableName);|
LJCComments.SetComment isContinue:
| $dbAccess->SetConnectionValues($database, $tableName);|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|SetConnectionValues|
**
LJCDocDataGen.ProcessFunction summary:
|Sets the $ConnectionValues property.|
Syntax:
|public function SetConnectionValues(string $dbServer, string $dbName&lt;br /&gt;, string $userID, string $password)|
Returns
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCDBAccessLib.php&quot;;
 
 // See constructor for how to create $connectionValues.
 $dbAccess = new LJCDbAccess($connectionValues);
 
 // Change some of the object properties.
 $tableName = &quot;NewTableName&quot;;
 $dbAccess-&gt;SetConnectionValues($database, $tableName);|
---------------
LJCComments.SetComment line:
|		/// <summary>The Database Connection values.</summary>
|
LJCComments.SetComment comment:
|The Database Connection values.|
PropertyName:
|$ConnectionValues|
**
LJCDocDataGen.ProcessProperty summary:
|The Database Connection values.|
Syntax:
|public LJCConnectionValues $ConnectionValues;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|	/// <include path='items/LJCDbColumn/*' file='Doc/LJCDbColumn.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Represents a DB Column definition.</summary>|
LJCComments.SetComment comment:
|Represents a DB Column definition.|
---------------
LJCComments.SetComment line:
|/// <remarks>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// The LJCDbColumn object is used extensively throughout the LJC PHP files,
|
LJCComments.SetComment isContinue:
| The LJCDbColumn object is used extensively throughout the LJC PHP files,
|
---------------
LJCComments.SetComment line:
|/// utilities and applications; wherever data elements need to be  dynamically
|
LJCComments.SetComment isContinue:
| utilities and applications; wherever data elements need to be  dynamically
|
---------------
LJCComments.SetComment line:
|/// defined or manipulated. It is commonly used to define  database table
|
LJCComments.SetComment isContinue:
| defined or manipulated. It is commonly used to define  database table
|
---------------
LJCComments.SetComment line:
|/// columns.
|
LJCComments.SetComment isContinue:
| columns.
|
---------------
LJCComments.SetComment line:
|/// &lt;p&gt;
|
LJCComments.SetComment isContinue:
| &lt;p&gt;
|
---------------
LJCComments.SetComment line:
|/// The LJCDbColumn object is often used to facilitate moving data between a
|
LJCComments.SetComment isContinue:
| The LJCDbColumn object is often used to facilitate moving data between a
|
---------------
LJCComments.SetComment line:
|/// database table column and a data object.
|
LJCComments.SetComment isContinue:
| database table column and a data object.
|
---------------
LJCComments.SetComment line:
|/// &lt;/p&gt;
|
LJCComments.SetComment isContinue:
| &lt;/p&gt;
|
---------------
LJCComments.SetComment line:
|/// A Data Object is an instance of a class that contains properties for each
|
LJCComments.SetComment isContinue:
| A Data Object is an instance of a class that contains properties for each
|
---------------
LJCComments.SetComment line:
|/// data element in a data source row. It is a strongly typed, object
|
LJCComments.SetComment isContinue:
| data element in a data source row. It is a strongly typed, object
|
---------------
LJCComments.SetComment line:
|/// oriented representation of the data source row for use in code. It may
|
LJCComments.SetComment isContinue:
| oriented representation of the data source row for use in code. It may
|
---------------
LJCComments.SetComment line:
|/// contain common methods to assist with cloning and other Data Object
|
LJCComments.SetComment isContinue:
| contain common methods to assist with cloning and other Data Object
|
---------------
LJCComments.SetComment line:
|/// functions.
|
LJCComments.SetComment isContinue:
| functions.
|
---------------
LJCComments.SetComment line:
|/// </remarks>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
ClassName:
|LJCDbColumn|
**
LJCDocDataGen.ProcessClass summary:
|Represents a DB Column definition.|
Syntax:
|class LJCDbColumn|
Remarks:
|
 The LJCDbColumn object is used extensively throughout the LJC PHP files,
 utilities and applications; wherever data elements need to be  dynamically
 defined or manipulated. It is commonly used to define  database table
 columns.
 &amp;lt;p&amp;gt;
 The LJCDbColumn object is often used to facilitate moving data between a
 database table column and a data object.
 &amp;lt;/p&amp;gt;
 A Data Object is an instance of a class that contains properties for each
 data element in a data source row. It is a strongly typed, object
 oriented representation of the data source row for use in code. It may
 contain common methods to assist with cloning and other Data Object
 functions.
|
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/GetDataType/*' file='Doc/LJCDbColumn.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Coverts MySQL type names to PHP type names.</summary>|
LJCComments.SetComment comment:
|Coverts MySQL type names to PHP type names.|
---------------
LJCComments.SetComment line:
|///     <param name="$mySQLTypeName">The MySQL data type name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The PHP data type name.</returns>|
LJCComments.SetComment comment:
|The PHP data type name.|
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDBAccessLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDBAccessLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $dbColumn = new LJCDbColumn("ID", dadtaTypeName: "int");|
LJCComments.SetComment isContinue:
| $dbColumn = new LJCDbColumn("ID", dadtaTypeName: "int");|
---------------
LJCComments.SetComment line:
|/// $phpType = $dbColumn->GetDataType("bit");|
LJCComments.SetComment isContinue:
| $phpType = $dbColumn->GetDataType("bit");|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|GetDataType|
**
LJCDocDataGen.ProcessFunction summary:
|Coverts MySQL type names to PHP type names.|
Syntax:
|public static function GetDataType(string $mySQLTypeName) : string|
Returns:
|The PHP data type name.|
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCDBAccessLib.php&quot;;
 
 $dbColumn = new LJCDbColumn(&quot;ID&quot;, dadtaTypeName: &quot;int&quot;);
 $phpType = $dbColumn-&gt;GetDataType(&quot;bit&quot;);|
---------------
LJCComments.SetComment line:
|		/// <include path='items/construct/*' file='Doc/LJCDbColumn.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Initializes a class instance.</summary>|
LJCComments.SetComment comment:
|Initializes a class instance.|
---------------
LJCComments.SetComment line:
|///     <param name="$columnName">The Column name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$propertyName">The Property name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$dataTypeName">The DataType name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$value">The Column value.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDBAccessLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDBAccessLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $dbColumn = new LJCDbColumn("Name");|
LJCComments.SetComment isContinue:
| $dbColumn = new LJCDbColumn("Name");|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|construct|
**
LJCDocDataGen.ProcessFunction summary:
|Initializes a class instance.|
Syntax:
|public function __construct(string $columnName, ?string $propertyName = null&lt;br /&gt;, ?string $renameAs = null, string $dataTypeName = &quot;string&quot;&lt;br /&gt;, ?string $value = null)|
Returns
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCDBAccessLib.php&quot;;
 
 $dbColumn = new LJCDbColumn(&quot;Name&quot;);|
---------------
LJCComments.SetComment line:
|		/// <summary>Creates an object clone.</summary>
|
LJCComments.SetComment comment:
|Creates an object clone.|
FunctionName:
|Clone|
**
LJCDocDataGen.ProcessFunction summary:
|Creates an object clone.|
Syntax:
|public function Clone() : self|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <summary>Indicates if the Column allows nulls.</summary>
|
LJCComments.SetComment comment:
|Indicates if the Column allows nulls.|
PropertyName:
|$AllowDbNull|
**
LJCDocDataGen.ProcessProperty summary:
|Indicates if the Column allows nulls.|
Syntax:
|public bool $AllowDbNull;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The AutoIncrement flag.</summary>
|
LJCComments.SetComment comment:
|The AutoIncrement flag.|
PropertyName:
|$AutoIncrement|
**
LJCDocDataGen.ProcessProperty summary:
|The AutoIncrement flag.|
Syntax:
|public bool $AutoIncrement;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Column name.</summary>
|
LJCComments.SetComment comment:
|The Column name.|
PropertyName:
|$ColumnName|
**
LJCDocDataGen.ProcessProperty summary:
|The Column name.|
Syntax:
|public string $ColumnName;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The DataType name.</summary>
|
LJCComments.SetComment comment:
|The DataType name.|
PropertyName:
|$DataTypeName|
**
LJCDocDataGen.ProcessProperty summary:
|The DataType name.|
Syntax:
|public string $DataTypeName;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Default value.</summary>
|
LJCComments.SetComment comment:
|The Default value.|
PropertyName:
|$DefaultValue|
**
LJCDocDataGen.ProcessProperty summary:
|The Default value.|
Syntax:
|public $DefaultValue;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The MaxLength value.</summary>
|
LJCComments.SetComment comment:
|The MaxLength value.|
PropertyName:
|$MaxLength|
**
LJCDocDataGen.ProcessProperty summary:
|The MaxLength value.|
Syntax:
|public $MaxLength;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The MySQL Type name.</summary>
|
LJCComments.SetComment comment:
|The MySQL Type name.|
PropertyName:
|$MySQLTypeName|
**
LJCDocDataGen.ProcessProperty summary:
|The MySQL Type name.|
Syntax:
|public ?string $MySQLTypeName;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Property name.</summary>
|
LJCComments.SetComment comment:
|The Property name.|
PropertyName:
|$PropertyName|
**
LJCDocDataGen.ProcessProperty summary:
|The Property name.|
Syntax:
|public string $PropertyName;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The RenameAs value.</summary>
|
LJCComments.SetComment comment:
|The RenameAs value.|
PropertyName:
|$RenameAs|
**
LJCDocDataGen.ProcessProperty summary:
|The RenameAs value.|
Syntax:
|public ?string $RenameAs;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Column value.</summary>
|
LJCComments.SetComment comment:
|The Column value.|
PropertyName:
|$Value|
**
LJCDocDataGen.ProcessProperty summary:
|The Column value.|
Syntax:
|public $Value;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Where clause boolean operator.</summary>
|
LJCComments.SetComment comment:
|The Where clause boolean operator.|
PropertyName:
|$WhereBoolOperator|
**
LJCDocDataGen.ProcessProperty summary:
|The Where clause boolean operator.|
Syntax:
|public ?string $WhereBoolOperator;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Where clause comparison operator.</summary>
|
LJCComments.SetComment comment:
|The Where clause comparison operator.|
PropertyName:
|$WhereCompareOperator|
**
LJCDocDataGen.ProcessProperty summary:
|The Where clause comparison operator.|
Syntax:
|public ?string $WhereCompareOperator;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|	/// <include path='items/LJCDbColumns/*' file='Doc/LJCDbColumns.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Represents a typed Collection of LJCDbColumn objects.</summary>|
LJCComments.SetComment comment:
|Represents a typed Collection of LJCDbColumn objects.|
---------------
LJCComments.SetComment line:
|/// <remarks>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// It extends (inherits) from class LJCCollectionLib-LJCCollectionBase which
|
LJCComments.SetComment isContinue:
| It extends (inherits) from class LJCCollectionLib-LJCCollectionBase which
|
---------------
LJCComments.SetComment line:
|/// provides the "foreach" and "count" functionality.
|
LJCComments.SetComment isContinue:
| provides the "foreach" and "count" functionality.
|
---------------
LJCComments.SetComment line:
|/// &lt;p&gt;
|
LJCComments.SetComment isContinue:
| &lt;p&gt;
|
---------------
LJCComments.SetComment line:
|/// It includes an AddObject() method that requires the strongly typed
|
LJCComments.SetComment isContinue:
| It includes an AddObject() method that requires the strongly typed
|
---------------
LJCComments.SetComment line:
|/// LJCDbColumn object collection element. This is what makes the collection
|
LJCComments.SetComment isContinue:
| LJCDbColumn object collection element. This is what makes the collection
|
---------------
LJCComments.SetComment line:
|/// strongly typed.
|
LJCComments.SetComment isContinue:
| strongly typed.
|
---------------
LJCComments.SetComment line:
|/// &lt;/p&gt;
|
LJCComments.SetComment isContinue:
| &lt;/p&gt;
|
---------------
LJCComments.SetComment line:
|/// The Get() method retrieves the internal array element by key.
|
LJCComments.SetComment isContinue:
| The Get() method retrieves the internal array element by key.
|
---------------
LJCComments.SetComment line:
|/// </remarks>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
ClassName:
|LJCDbColumns|
**
LJCDocDataGen.ProcessClass summary:
|Represents a typed Collection of LJCDbColumn objects.|
Syntax:
|class LJCDbColumns extends LJCCollectionBase|
Remarks:
|
 It extends (inherits) from class LJCCollectionLib-LJCCollectionBase which
 provides the &quot;foreach&quot; and &quot;count&quot; functionality.
 &amp;lt;p&amp;gt;
 It includes an AddObject() method that requires the strongly typed
 LJCDbColumn object collection element. This is what makes the collection
 strongly typed.
 &amp;lt;/p&amp;gt;
 The Get() method retrieves the internal array element by key.
|
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/Add/*' file='Doc/LJCDbColumns.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Creates an object and adds it to the collection.</summary>|
LJCComments.SetComment comment:
|Creates an object and adds it to the collection.|
---------------
LJCComments.SetComment line:
|///     <param name="$columnName">The Column name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$propertyName">The Property name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$dataTypeName">The DataType name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$value">The Column value.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$key">The collection array key.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDBAccessLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDBAccessLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $dbColumns = new LJCDbColumns();|
LJCComments.SetComment isContinue:
| $dbColumns = new LJCDbColumns();|
---------------
LJCComments.SetComment line:
|/// $dbColumns->Add("ID", dataTypeName: "int");|
LJCComments.SetComment isContinue:
| $dbColumns->Add("ID", dataTypeName: "int");|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|Add|
**
LJCDocDataGen.ProcessFunction summary:
|Creates an object and adds it to the collection.|
Syntax:
|public function Add(string $columnName, ?string $propertyName = null&lt;br /&gt;, ?string $renameAs = null, string $dataTypeName = &quot;string&quot;&lt;br /&gt;, ?string $value = null, $key = null) : ?LJCDbColumn|
Returns
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCDBAccessLib.php&quot;;
 
 $dbColumns = new LJCDbColumns();
 $dbColumns-&gt;Add(&quot;ID&quot;, dataTypeName: &quot;int&quot;);|
---------------
LJCComments.SetComment line:
|		/// <include path='items/AddObject/*' file='Doc/LJCDbColumns.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Adds an object and key value.</summary>|
LJCComments.SetComment comment:
|Adds an object and key value.|
---------------
LJCComments.SetComment line:
|///     <param name="$item">The DbColumn definition.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$key">The collection array key.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDBAccessLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDBAccessLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $dbColumns = new LJCDbColumns();|
LJCComments.SetComment isContinue:
| $dbColumns = new LJCDbColumns();|
---------------
LJCComments.SetComment line:
|/// $dbColumn = new LJCDbColumn("Name");|
LJCComments.SetComment isContinue:
| $dbColumn = new LJCDbColumn("Name");|
---------------
LJCComments.SetComment line:
|/// $dbColumns->AddObject($dbColumn);|
LJCComments.SetComment isContinue:
| $dbColumns->AddObject($dbColumn);|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|AddObject|
**
LJCDocDataGen.ProcessFunction summary:
|Adds an object and key value.|
Syntax:
|public function AddObject(LJCDbColumn $item, $key = null) : ?LJCDbColumn|
Returns
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCDBAccessLib.php&quot;;
 
 $dbColumns = new LJCDbColumns();
 $dbColumn = new LJCDbColumn(&quot;Name&quot;);
 $dbColumns-&gt;AddObject($dbColumn);|
---------------
LJCComments.SetComment line:
|		/// <summary>Creates an object clone.</summary>
|
LJCComments.SetComment comment:
|Creates an object clone.|
FunctionName:
|Clone|
**
LJCDocDataGen.ProcessFunction summary:
|Creates an object clone.|
Syntax:
|public function Clone() : self|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/Get/*' file='Doc/LJCDbColumns.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Get the item by Key value.</summary>|
LJCComments.SetComment comment:
|Get the item by Key value.|
---------------
LJCComments.SetComment line:
|///     <param name="$key">The collection array key.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The collection item.</returns>|
LJCComments.SetComment comment:
|The collection item.|
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDBAccessLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDBAccessLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $dbColumns = new LJCDbColumns();|
LJCComments.SetComment isContinue:
| $dbColumns = new LJCDbColumns();|
---------------
LJCComments.SetComment line:
|/// $dbColumns->Add("Name");|
LJCComments.SetComment isContinue:
| $dbColumns->Add("Name");|
---------------
LJCComments.SetComment line:
|/// $dbColumn = $dbColumns->Get("Name");|
LJCComments.SetComment isContinue:
| $dbColumn = $dbColumns->Get("Name");|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|Get|
**
LJCDocDataGen.ProcessFunction summary:
|Get the item by Key value.|
Syntax:
|public function Get($key, bool $throwError = true) : ?LJCDbColumn|
Returns:
|The collection item.|
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCDBAccessLib.php&quot;;
 
 $dbColumns = new LJCDbColumns();
 $dbColumns-&gt;Add(&quot;Name&quot;);
 $dbColumn = $dbColumns-&gt;Get(&quot;Name&quot;);|
---------------
LJCComments.SetComment line:
|		/// <include path='items/GetColumns/*' file='Doc/LJCDbColumns.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// Get the column definitions that match the property names.
|
LJCComments.SetComment isContinue:
| Get the column definitions that match the property names.
|
---------------
LJCComments.SetComment line:
|/// </summary>|
LJCComments.SetComment isContinue
---------------
LJCComments.SetComment line:
|///     <param name="$propertyNames">The collection of property names.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The definitions for the specified properties.</returns>|
LJCComments.SetComment comment:
|The definitions for the specified properties.|
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDBAccessLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDBAccessLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $dbColumns = new LJCDbColumns();|
LJCComments.SetComment isContinue:
| $dbColumns = new LJCDbColumns();|
---------------
LJCComments.SetComment line:
|/// $dbColumns->Add"FirstName");|
LJCComments.SetComment isContinue:
| $dbColumns->Add"FirstName");|
---------------
LJCComments.SetComment line:
|/// $dbColumns->Add("MiddleName");|
LJCComments.SetComment isContinue:
| $dbColumns->Add("MiddleName");|
---------------
LJCComments.SetComment line:
|/// $dbColumns->Add("LastName");|
LJCComments.SetComment isContinue:
| $dbColumns->Add("LastName");|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $propertyNames = [];|
LJCComments.SetComment isContinue:
| $propertyNames = [];|
---------------
LJCComments.SetComment line:
|/// $propertyNames[] = "FirstName";|
LJCComments.SetComment isContinue:
| $propertyNames[] = "FirstName";|
---------------
LJCComments.SetComment line:
|/// $propertyNames[] = "LastName";|
LJCComments.SetComment isContinue:
| $propertyNames[] = "LastName";|
---------------
LJCComments.SetComment line:
|/// $specificColumns = $dbColumns->GetColumns($propertyNames);|
LJCComments.SetComment isContinue:
| $specificColumns = $dbColumns->GetColumns($propertyNames);|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|GetColumns|
**
LJCDocDataGen.ProcessFunction summary:
|
 Get the column definitions that match the property names.
|
Syntax:
|public function GetColumns(array $propertyNames = null) : self|
Returns:
|The definitions for the specified properties.|
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCDBAccessLib.php&quot;;
 
 $dbColumns = new LJCDbColumns();
 $dbColumns-&gt;Add&quot;FirstName&quot;);
 $dbColumns-&gt;Add(&quot;MiddleName&quot;);
 $dbColumns-&gt;Add(&quot;LastName&quot;);
 
 $propertyNames = [];
 $propertyNames[] = &quot;FirstName&quot;;
 $propertyNames[] = &quot;LastName&quot;;
 $specificColumns = $dbColumns-&gt;GetColumns($propertyNames);|
---------------
LJCComments.SetComment line:
|		/// <include path='items/MapNames/*' file='Doc/LJCDbColumns.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// Sets the PropertyName, RenameAs and Caption values for a column.
|
LJCComments.SetComment isContinue:
| Sets the PropertyName, RenameAs and Caption values for a column.
|
---------------
LJCComments.SetComment line:
|/// </summary>|
LJCComments.SetComment isContinue
---------------
LJCComments.SetComment line:
|///     <param name="$columnName">The Column name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$propertyName">The Property name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$renameAs">The RenameAs name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$caption">The Caption value.</param>|
LJCComments.SetComment comment
LJCComments.SetComment comment
FunctionName:
|MapNames|
**
LJCDocDataGen.ProcessFunction summary:
|
 Sets the PropertyName, RenameAs and Caption values for a column.
|
Syntax:
|public function MapNames(string $columnName, ?string $propertyName = null&lt;br /&gt;, ?string $renameAs = null, ?string $caption = null)|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/SetWhereOperators/*' file='Doc/LJCDbColumns.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Sets the Where Clause operators.</summary>|
LJCComments.SetComment comment:
|Sets the Where Clause operators.|
---------------
LJCComments.SetComment line:
|///     <param name="$key">The collection array key.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$compareOperator">The comparison operator.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$boolOperator">The boolean operator.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDBAccessLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDBAccessLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $dbColumns = new LJCDbColumns();|
LJCComments.SetComment isContinue:
| $dbColumns = new LJCDbColumns();|
---------------
LJCComments.SetComment line:
|/// $dbColumns->Add("Name", value: "%C%");|
LJCComments.SetComment isContinue:
| $dbColumns->Add("Name", value: "%C%");|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // $compareOperator - Any valid comparison operator; defaults to "=".|
LJCComments.SetComment isContinue:
| // $compareOperator - Any valid comparison operator; defaults to "=".|
---------------
LJCComments.SetComment line:
|/// // $boolOperator - "and" or "or"; defaults to "and".|
LJCComments.SetComment isContinue:
| // $boolOperator - "and" or "or"; defaults to "and".|
---------------
LJCComments.SetComment line:
|/// $dbColumns->SetWhereOperators("Name", "like", "or");|
LJCComments.SetComment isContinue:
| $dbColumns->SetWhereOperators("Name", "like", "or");|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|SetWhereOperators|
**
LJCDocDataGen.ProcessFunction summary:
|Sets the Where Clause operators.|
Syntax:
|public function SetWhereOperators($key, string $compareOperator&lt;br /&gt;,  string $boolOperator = &quot;and&quot;) : void|
Returns
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCDBAccessLib.php&quot;;
 
 $dbColumns = new LJCDbColumns();
 $dbColumns-&gt;Add(&quot;Name&quot;, value: &quot;%C%&quot;);
 
 // $compareOperator - Any valid comparison operator; defaults to &quot;=&quot;.
 // $boolOperator - &quot;and&quot; or &quot;or&quot;; defaults to &quot;and&quot;.
 $dbColumns-&gt;SetWhereOperators(&quot;Name&quot;, &quot;like&quot;, &quot;or&quot;);|
---------------
LJCComments.SetComment line:
|	/// <summary>Represents a SQL Join.</summary>
|
LJCComments.SetComment comment:
|Represents a SQL Join.|
ClassName:
|LJCJoin|
**
LJCDocDataGen.ProcessClass summary:
|Represents a SQL Join.|
Syntax:
|class LJCJoin|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/construct/*' file='Doc/LJCJoin.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Initializes a class instance.</summary>|
LJCComments.SetComment comment:
|Initializes a class instance.|
---------------
LJCComments.SetComment line:
|///     <param name="$tableName">The Join table name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$tableAlias">The Join table alias.</param>|
LJCComments.SetComment comment
LJCComments.SetComment comment
FunctionName:
|construct|
**
LJCDocDataGen.ProcessFunction summary:
|Initializes a class instance.|
Syntax:
|public function __construct(string $tableName, ?string $tableAlias = null)|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <summary>Creates an object clone.</summary>
|
LJCComments.SetComment comment:
|Creates an object clone.|
FunctionName:
|Clone|
**
LJCDocDataGen.ProcessFunction summary:
|Creates an object clone.|
Syntax:
|public function Clone() : self|
Returns
Remarks
Code
PropertyName:
|$Columns|
**
LJCDocDataGen.ProcessProperty summary
Syntax:
|public LJCDbColumns $Columns;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The JoinOn definintions.</summary>
|
LJCComments.SetComment comment:
|The JoinOn definintions.|
PropertyName:
|$JoinOns|
**
LJCDocDataGen.ProcessProperty summary:
|The JoinOn definintions.|
Syntax:
|public LJCJoinOns $JoinOns;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Join type.</summary>
|
LJCComments.SetComment comment:
|The Join type.|
PropertyName:
|$JoinType|
**
LJCDocDataGen.ProcessProperty summary:
|The Join type.|
Syntax:
|public string $JoinType;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Schema name.</summary>
|
LJCComments.SetComment comment:
|The Schema name.|
PropertyName:
|$SchemaName|
**
LJCDocDataGen.ProcessProperty summary:
|The Schema name.|
Syntax:
|public ?string $SchemaName;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The table alias.</summary>
|
LJCComments.SetComment comment:
|The table alias.|
PropertyName:
|$TableAlias|
**
LJCDocDataGen.ProcessProperty summary:
|The table alias.|
Syntax:
|public ?string $TableAlias;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The table name.</summary>
|
LJCComments.SetComment comment:
|The table name.|
PropertyName:
|$TableName|
**
LJCDocDataGen.ProcessProperty summary:
|The table name.|
Syntax:
|public string $TableName;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|	/// <summary>Represents a collection of LJCJoin objects.</summary>
|
LJCComments.SetComment comment:
|Represents a collection of LJCJoin objects.|
ClassName:
|LJCJoins|
**
LJCDocDataGen.ProcessClass summary:
|Represents a collection of LJCJoin objects.|
Syntax:
|class LJCJoins extends LJCCollectionBase|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <summary>Creates an object and adds it to the collection.</summary>
|
LJCComments.SetComment comment:
|Creates an object and adds it to the collection.|
---------------
LJCComments.SetComment line:
|		/// <include path='items/Add/*' file='Doc/LJCJoins.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Creates an object and adds it to the collection.</summary>|
LJCComments.SetComment comment:
|Creates an object and adds it to the collection.|
---------------
LJCComments.SetComment line:
|///     <param name="$tableName">The Join table name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$tableAlias">The Join table alias.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$key">The optional key value.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDBAccessLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDBAccessLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $joins = new LJCJoins();|
LJCComments.SetComment isContinue:
| $joins = new LJCJoins();|
---------------
LJCComments.SetComment line:
|/// $joins->Add("TableName", "alias");|
LJCComments.SetComment isContinue:
| $joins->Add("TableName", "alias");|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|Add|
**
LJCDocDataGen.ProcessFunction summary:
|Creates an object and adds it to the collection.|
Syntax:
|public function Add(string $tableName, string $tableAlias = null&lt;br /&gt;, $key = null) : ?LJCJoin|
Returns
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCDBAccessLib.php&quot;;
 
 $joins = new LJCJoins();
 $joins-&gt;Add(&quot;TableName&quot;, &quot;alias&quot;);|
---------------
LJCComments.SetComment line:
|		/// <summary>Adds an object and key value.</summary>
|
LJCComments.SetComment comment:
|Adds an object and key value.|
---------------
LJCComments.SetComment line:
|		/// <include path='items/AddObject/*' file='Doc/LJCJoins.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Adds an object and key value.</summary>|
LJCComments.SetComment comment:
|Adds an object and key value.|
---------------
LJCComments.SetComment line:
|///     <param name="$item">The item to add to the collection.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$key">The optional key value.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDBAccessLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDBAccessLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $joins = new LJCJoins();|
LJCComments.SetComment isContinue:
| $joins = new LJCJoins();|
---------------
LJCComments.SetComment line:
|/// $join = new LJCJoin("TableName");|
LJCComments.SetComment isContinue:
| $join = new LJCJoin("TableName");|
---------------
LJCComments.SetComment line:
|/// $joins->AddObject($join);|
LJCComments.SetComment isContinue:
| $joins->AddObject($join);|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|AddObject|
**
LJCDocDataGen.ProcessFunction summary:
|Adds an object and key value.|
Syntax:
|public function AddObject(LJCJoin $item, $key = null) : ?LJCJoin|
Returns
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCDBAccessLib.php&quot;;
 
 $joins = new LJCJoins();
 $join = new LJCJoin(&quot;TableName&quot;);
 $joins-&gt;AddObject($join);|
---------------
LJCComments.SetComment line:
|		/// <summary>Creates an object clone.</summary>
|
LJCComments.SetComment comment:
|Creates an object clone.|
FunctionName:
|Clone|
**
LJCDocDataGen.ProcessFunction summary:
|Creates an object clone.|
Syntax:
|public function Clone() : self|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <summary>Get the item by Key value.</summary>
|
LJCComments.SetComment comment:
|Get the item by Key value.|
---------------
LJCComments.SetComment line:
|		/// <include path='items/Get/*' file='Doc/LJCJoins.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Get the item by Key value.</summary>|
LJCComments.SetComment comment:
|Get the item by Key value.|
---------------
LJCComments.SetComment line:
|///     <param name="$key">The key value.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$throwError">The optional throw error flag.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDBAccessLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDBAccessLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $joins = new LJCJoins();|
LJCComments.SetComment isContinue:
| $joins = new LJCJoins();|
---------------
LJCComments.SetComment line:
|/// $joins->Add("TableName");|
LJCComments.SetComment isContinue:
| $joins->Add("TableName");|
---------------
LJCComments.SetComment line:
|/// $join = $joins->Get("TableName");|
LJCComments.SetComment isContinue:
| $join = $joins->Get("TableName");|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|Get|
**
LJCDocDataGen.ProcessFunction summary:
|Get the item by Key value.|
Syntax:
|public function Get($key, bool $throwError = true) : ?LJCJoin|
Returns
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCDBAccessLib.php&quot;;
 
 $joins = new LJCJoins();
 $joins-&gt;Add(&quot;TableName&quot;);
 $join = $joins-&gt;Get(&quot;TableName&quot;);|
---------------
LJCComments.SetComment line:
|	/// <summary>Represents a SQL JoinOn.</summary>
|
LJCComments.SetComment comment:
|Represents a SQL JoinOn.|
ClassName:
|LJCJoinOn|
**
LJCDocDataGen.ProcessClass summary:
|Represents a SQL JoinOn.|
Syntax:
|class LJCJoinOn|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <summary>Initializes a class instance.</summary>
|
LJCComments.SetComment comment:
|Initializes a class instance.|
---------------
LJCComments.SetComment line:
|		/// <include path='items/construct/*' file='Doc/LJCJoinOn.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Initializes a class instance.</summary>|
LJCComments.SetComment comment:
|Initializes a class instance.|
---------------
LJCComments.SetComment line:
|///     <param name="$fromColumnName">The 'from' column name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$toColumnName">The 'to' column name.</param>|
LJCComments.SetComment comment
LJCComments.SetComment comment
FunctionName:
|construct|
**
LJCDocDataGen.ProcessFunction summary:
|Initializes a class instance.|
Syntax:
|public function __construct(string $fromColumnName, string $toColumnName)|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <summary>Creates an object clone.</summary>
|
LJCComments.SetComment comment:
|Creates an object clone.|
FunctionName:
|Clone|
**
LJCDocDataGen.ProcessFunction summary:
|Creates an object clone.|
Syntax:
|public function Clone() : self|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <summary>The Boolean Operator value.</summary>
|
LJCComments.SetComment comment:
|The Boolean Operator value.|
PropertyName:
|$BooleanOperator|
**
LJCDocDataGen.ProcessProperty summary:
|The Boolean Operator value.|
Syntax:
|public string $BooleanOperator;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The 'From' column name.</summary>
|
LJCComments.SetComment comment:
|The 'From' column name.|
PropertyName:
|$FromColumnName|
**
LJCDocDataGen.ProcessProperty summary:
|The &#039;From&#039; column name.|
Syntax:
|public string $FromColumnName;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Join On Operator.</summary>
|
LJCComments.SetComment comment:
|The Join On Operator.|
PropertyName:
|$JoinOnOperator|
**
LJCDocDataGen.ProcessProperty summary:
|The Join On Operator.|
Syntax:
|public string $JoinOnOperator;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The contained JoinOns.</summary>
|
LJCComments.SetComment comment:
|The contained JoinOns.|
PropertyName:
|$JoinOns|
**
LJCDocDataGen.ProcessProperty summary:
|The contained JoinOns.|
Syntax:
|public ?array $JoinOns;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The 'To' column name.</summary>
|
LJCComments.SetComment comment:
|The 'To' column name.|
PropertyName:
|$ToColumnName|
**
LJCDocDataGen.ProcessProperty summary:
|The &#039;To&#039; column name.|
Syntax:
|public string $ToColumnName;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|	/// <summary>Represents a collection of LJCJoin objects.</summary>
|
LJCComments.SetComment comment:
|Represents a collection of LJCJoin objects.|
ClassName:
|LJCJoinOns|
**
LJCDocDataGen.ProcessClass summary:
|Represents a collection of LJCJoin objects.|
Syntax:
|class LJCJoinOns extends LJCCollectionBase|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/Add/*' file='Doc/LJCJoinOns.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Creates an object and adds it to the collection.</summary>|
LJCComments.SetComment comment:
|Creates an object and adds it to the collection.|
---------------
LJCComments.SetComment line:
|///     <param name="$fromColumnName">The 'from' column name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$toColumnName">The 'to' column name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$key">The optional key value.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDBAccessLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDBAccessLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $joinOns = new LJCJoinOns();|
LJCComments.SetComment isContinue:
| $joinOns = new LJCJoinOns();|
---------------
LJCComments.SetComment line:
|/// $joinOns->Add("FromColumnName", "ToColumnName");|
LJCComments.SetComment isContinue:
| $joinOns->Add("FromColumnName", "ToColumnName");|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|Add|
**
LJCDocDataGen.ProcessFunction summary:
|Creates an object and adds it to the collection.|
Syntax:
|public function Add(string $fromColumnName, string $toColumnName&lt;br /&gt;, $key = null) : ?LJCJoinOn|
Returns
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCDBAccessLib.php&quot;;
 
 $joinOns = new LJCJoinOns();
 $joinOns-&gt;Add(&quot;FromColumnName&quot;, &quot;ToColumnName&quot;);|
---------------
LJCComments.SetComment line:
|		/// <include path='items/AddObject/*' file='Doc/LJCJoinOns.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Adds an object and key value.</summary>|
LJCComments.SetComment comment:
|Adds an object and key value.|
---------------
LJCComments.SetComment line:
|///     <param name="$item">The item to add to the collection.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$key">The optional key value.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDBAccessLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDBAccessLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $joinOns = new LJCJoinOns();|
LJCComments.SetComment isContinue:
| $joinOns = new LJCJoinOns();|
---------------
LJCComments.SetComment line:
|/// $joinOn = new LJCJoinOn("FromColumnName", "ToColumnName");|
LJCComments.SetComment isContinue:
| $joinOn = new LJCJoinOn("FromColumnName", "ToColumnName");|
---------------
LJCComments.SetComment line:
|/// $joinOns->AddObject($joinOn);|
LJCComments.SetComment isContinue:
| $joinOns->AddObject($joinOn);|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|AddObject|
**
LJCDocDataGen.ProcessFunction summary:
|Adds an object and key value.|
Syntax:
|public function AddObject(LJCJoinOn $item, $key = null) : ?LJCJoinOn|
Returns
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCDBAccessLib.php&quot;;
 
 $joinOns = new LJCJoinOns();
 $joinOn = new LJCJoinOn(&quot;FromColumnName&quot;, &quot;ToColumnName&quot;);
 $joinOns-&gt;AddObject($joinOn);|
---------------
LJCComments.SetComment line:
|		/// <summary>Creates an object clone.</summary>
|
LJCComments.SetComment comment:
|Creates an object clone.|
FunctionName:
|Clone|
**
LJCDocDataGen.ProcessFunction summary:
|Creates an object clone.|
Syntax:
|public function Clone() : self|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <summary>Get the item by Key value.</summary>
|
LJCComments.SetComment comment:
|Get the item by Key value.|
---------------
LJCComments.SetComment line:
|		/// <include path='items/Get/*' file='Doc/LJCJoinOns.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Get the item by Key value.</summary>|
LJCComments.SetComment comment:
|Get the item by Key value.|
---------------
LJCComments.SetComment line:
|///     <param name="$key">The key value.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$throwError">The optional throw error flag.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDBAccessLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDBAccessLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $joinOns = new LJCJoins();|
LJCComments.SetComment isContinue:
| $joinOns = new LJCJoins();|
---------------
LJCComments.SetComment line:
|/// $joinOns->Add("FromColumnName", "ToColumnName");|
LJCComments.SetComment isContinue:
| $joinOns->Add("FromColumnName", "ToColumnName");|
---------------
LJCComments.SetComment line:
|/// $joinOn = $joinOns->Get("FromColumnName");|
LJCComments.SetComment isContinue:
| $joinOn = $joinOns->Get("FromColumnName");|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|Get|
**
LJCDocDataGen.ProcessFunction summary:
|Get the item by Key value.|
Syntax:
|public function Get($key, bool $throwError = true) : ?LJCJoinOn|
Returns
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCDBAccessLib.php&quot;;
 
 $joinOns = new LJCJoins();
 $joinOns-&gt;Add(&quot;FromColumnName&quot;, &quot;ToColumnName&quot;);
 $joinOn = $joinOns-&gt;Get(&quot;FromColumnName&quot;);|
---------------
LJCComments.SetComment line:
|	/// <summary>The Common Text Output Class Library</summary>
|
LJCComments.SetComment comment:
|The Common Text Output Class Library|
**
LJCDocDataGen.ProcessLib summary:
|The Common Text Output Class Library|
Remarks
---------------
LJCComments.SetComment line:
|	/// <summary>Represents a built string value.</summary>
|
LJCComments.SetComment comment:
|Represents a built string value.|
ClassName:
|LJCStringBuilder|
**
LJCDocDataGen.ProcessClass summary:
|Represents a built string value.|
Syntax:
|class LJCStringBuilder|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <summary>Initializes a class instance.</summary>
|
LJCComments.SetComment comment:
|Initializes a class instance.|
FunctionName:
|construct|
**
LJCDocDataGen.ProcessFunction summary:
|Initializes a class instance.|
Syntax:
|public function __construct()|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/Append/*' file='Doc/LJCStringBuilder.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Appends text with indents.</summary>|
LJCComments.SetComment comment:
|Appends text with indents.|
---------------
LJCComments.SetComment line:
|///     <param name="$text">The text value.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$indent">The number of tabs to add to the line beginning.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$addBreak">Adds an HTML break before the cr/lf.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCTextLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCTextLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $builder = new StringBuilder();|
LJCComments.SetComment isContinue:
| $builder = new StringBuilder();|
---------------
LJCComments.SetComment line:
|/// $builder->Append("First ");|
LJCComments.SetComment isContinue:
| $builder->Append("First ");|
---------------
LJCComments.SetComment line:
|/// $builder->Append("Name");|
LJCComments.SetComment isContinue:
| $builder->Append("Name");|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // $text = "First Name"|
LJCComments.SetComment isContinue:
| // $text = "First Name"|
---------------
LJCComments.SetComment line:
|/// $text = $builder->ToString();|
LJCComments.SetComment isContinue:
| $text = $builder->ToString();|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|Append|
**
LJCDocDataGen.ProcessFunction summary:
|Appends text with indents.|
Syntax:
|public function Append(?string $text, int $indent = 0&lt;br /&gt;, bool $addBreak = false)|
Returns
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCTextLib.php&quot;;
 
 $builder = new StringBuilder();
 $builder-&gt;Append(&quot;First &quot;);
 $builder-&gt;Append(&quot;Name&quot;);
 
 // $text = &quot;First Name&quot;
 $text = $builder-&gt;ToString();|
---------------
LJCComments.SetComment line:
|		/// <include path='items/AppendLine/*' file='Doc/LJCStringBuilder.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Appends a text line with indents.</summary>|
LJCComments.SetComment comment:
|Appends a text line with indents.|
---------------
LJCComments.SetComment line:
|///     <param name="$text">The text value.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$indent">The number of tabs to add to the line beginning.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$addBreak">Adds an HTML break before the cr/lf.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCTextLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCTextLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $builder = new StringBuilder();|
LJCComments.SetComment isContinue:
| $builder = new StringBuilder();|
---------------
LJCComments.SetComment line:
|/// $builder->AppendLine("First");|
LJCComments.SetComment isContinue:
| $builder->AppendLine("First");|
---------------
LJCComments.SetComment line:
|/// $builder->AppendLine("Second", 1);|
LJCComments.SetComment isContinue:
| $builder->AppendLine("Second", 1);|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // $text =|
LJCComments.SetComment isContinue:
| // $text =|
---------------
LJCComments.SetComment line:
|/// // First|
LJCComments.SetComment isContinue:
| // First|
---------------
LJCComments.SetComment line:
|/// //   Second|
LJCComments.SetComment isContinue:
| //   Second|
---------------
LJCComments.SetComment line:
|/// $text = $builder->ToString();|
LJCComments.SetComment isContinue:
| $text = $builder->ToString();|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|AppendLine|
**
LJCDocDataGen.ProcessFunction summary:
|Appends a text line with indents.|
Syntax:
|public function AppendLine(?string $text, int $indent = 0&lt;br /&gt;, bool $addBreak = false)|
Returns
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCTextLib.php&quot;;
 
 $builder = new StringBuilder();
 $builder-&gt;AppendLine(&quot;First&quot;);
 $builder-&gt;AppendLine(&quot;Second&quot;, 1);
 
 // $text =
 // First
 //   Second
 $text = $builder-&gt;ToString();|
---------------
LJCComments.SetComment line:
|		/// <include path='items/AppendTags/*' file='Doc/LJCStringBuilder.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Appends a text line with begin tag, end tag and indents.</summary>|
LJCComments.SetComment comment:
|Appends a text line with begin tag, end tag and indents.|
---------------
LJCComments.SetComment line:
|///     <param name="$tag">The tag value.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$text">The text value.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$indent">The number of tabs to add to the line beginning.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$addBreak">Adds an HTML break before the cr/lf.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCTextLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCTextLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $builder = new StringBuilder();|
LJCComments.SetComment isContinue:
| $builder = new StringBuilder();|
---------------
LJCComments.SetComment line:
|/// $builder->AppendTags("First", "FirstValue", 0, true);|
LJCComments.SetComment isContinue:
| $builder->AppendTags("First", "FirstValue", 0, true);|
---------------
LJCComments.SetComment line:
|/// $builder->AppendTags("Second", "SecondValue", 1, true);|
LJCComments.SetComment isContinue:
| $builder->AppendTags("Second", "SecondValue", 1, true);|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // $text =|
LJCComments.SetComment isContinue:
| // $text =|
---------------
LJCComments.SetComment line:
|/// // &amp;lt;First&amp;gt;FirstValue&amp;lt;/First&amp;gt;&amp;lt;br /&amp;gt;|
LJCComments.SetComment isContinue:
| // &amp;lt;First&amp;gt;FirstValue&amp;lt;/First&amp;gt;&amp;lt;br /&amp;gt;|
---------------
LJCComments.SetComment line:
|/// //   &amp;lt;Second&amp;gt;SecondValue&amp;lt;/Second&amp;gt;&amp;lt;br /&amp;gt;|
LJCComments.SetComment isContinue:
| //   &amp;lt;Second&amp;gt;SecondValue&amp;lt;/Second&amp;gt;&amp;lt;br /&amp;gt;|
---------------
LJCComments.SetComment line:
|/// $text = $builder->ToString();|
LJCComments.SetComment isContinue:
| $text = $builder->ToString();|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|AppendTags|
**
LJCDocDataGen.ProcessFunction summary:
|Appends a text line with begin tag, end tag and indents.|
Syntax:
|public function AppendTags(string $tag, ?string $text, int $indent&lt;br /&gt;, bool $addBreak = false)|
Returns
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCTextLib.php&quot;;
 
 $builder = new StringBuilder();
 $builder-&gt;AppendTags(&quot;First&quot;, &quot;FirstValue&quot;, 0, true);
 $builder-&gt;AppendTags(&quot;Second&quot;, &quot;SecondValue&quot;, 1, true);
 
 // $text =
 // &amp;amp;lt;First&amp;amp;gt;FirstValue&amp;amp;lt;/First&amp;amp;gt;&amp;amp;lt;br /&amp;amp;gt;
 //   &amp;amp;lt;Second&amp;amp;gt;SecondValue&amp;amp;lt;/Second&amp;amp;gt;&amp;amp;lt;br /&amp;amp;gt;
 $text = $builder-&gt;ToString();|
---------------
LJCComments.SetComment line:
|		/// <summary>Gets the current builder string length.</summary>
|
LJCComments.SetComment comment:
|Gets the current builder string length.|
FunctionName:
|Length|
**
LJCDocDataGen.ProcessFunction summary:
|Gets the current builder string length.|
Syntax:
|public function Length() : int|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <summary>Gets the built string.</summary>
|
LJCComments.SetComment comment:
|Gets the built string.|
FunctionName:
|ToString|
**
LJCDocDataGen.ProcessFunction summary:
|Gets the built string.|
Syntax:
|public function ToString()|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|	/// <summary>The HTML table column definition.</summary> 
|
LJCComments.SetComment comment:
|The HTML table column definition.|
ClassName:
|LJCHTMLTableColumn|
**
LJCDocDataGen.ProcessClass summary:
|The HTML table column definition.|
Syntax:
|class LJCHTMLTableColumn|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/construct/*' file='Doc/LJCHTMLTableColumn.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Initializes an object instance.</summary>|
LJCComments.SetComment comment:
|Initializes an object instance.|
---------------
LJCComments.SetComment line:
|///     <param name="$columnName">The column name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$headingName">The heading name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$style">The style value.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$width">The column width.</param>|
LJCComments.SetComment comment
LJCComments.SetComment comment
FunctionName:
|construct|
**
LJCDocDataGen.ProcessFunction summary:
|Initializes an object instance.|
Syntax:
|public function __construct(string $columnName, string $headingName = null&lt;br /&gt;, string $style = null, string $width = null)|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <summary>The Column name.</summary> 
|
LJCComments.SetComment comment:
|The Column name.|
PropertyName:
|$ColumnName|
**
LJCDocDataGen.ProcessProperty summary:
|The Column name.|
Syntax:
|public string $ColumnName;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Column Heading name.</summary> 
|
LJCComments.SetComment comment:
|The Column Heading name.|
PropertyName:
|$HeadingName|
**
LJCDocDataGen.ProcessProperty summary:
|The Column Heading name.|
Syntax:
|public ?string $HeadingName;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Style value.</summary> 
|
LJCComments.SetComment comment:
|The Style value.|
PropertyName:
|$Style|
**
LJCDocDataGen.ProcessProperty summary:
|The Style value.|
Syntax:
|public ?string $Style;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Column width.</summary> 
|
LJCComments.SetComment comment:
|The Column width.|
PropertyName:
|$Width|
**
LJCDocDataGen.ProcessProperty summary:
|The Column width.|
Syntax:
|public ?string $Width;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|	/// <summary>Contains HTML output methods.</summary> 
|
LJCComments.SetComment comment:
|Contains HTML output methods.|
ClassName:
|LJCHTMLWriter|
**
LJCDocDataGen.ProcessClass summary:
|Contains HTML output methods.|
Syntax:
|class LJCHTMLWriter|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/WriteHeader/*' file='Doc/LJCHTMLWriter.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Writes an HTML table header row.</summary>|
LJCComments.SetComment comment:
|Writes an HTML table header row.|
---------------
LJCComments.SetComment line:
|///     <param name="$columns">The column definitions.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$width">The column width.</param>|
LJCComments.SetComment comment
LJCComments.SetComment comment
FunctionName:
|WriteHeader|
**
LJCDocDataGen.ProcessFunction summary:
|Writes an HTML table header row.|
Syntax:
|public static function WriteHeader($columns, $width = null)|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/WriteRow/*' file='Doc/LJCHTMLWriter.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Writes an HTML table data row.</summary>|
LJCComments.SetComment comment:
|Writes an HTML table data row.|
---------------
LJCComments.SetComment line:
|///     <param name="$dataObject">The data object.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$columns">The column definitions.</param>|
LJCComments.SetComment comment
LJCComments.SetComment comment
FunctionName:
|WriteRow|
**
LJCDocDataGen.ProcessFunction summary:
|Writes an HTML table data row.|
Syntax:
|public static function WriteRow($dataObject, $columns)|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|	/// <include path='items/LJCWriter/*' file='Doc/LJCWriter.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Contains console and file output methods.</summary>|
LJCComments.SetComment comment:
|Contains console and file output methods.|
---------------
LJCComments.SetComment line:
|/// <remarks>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// The Write() and WriteLine() static functions are used to write to stdout.
|
LJCComments.SetComment isContinue:
| The Write() and WriteLine() static functions are used to write to stdout.
|
---------------
LJCComments.SetComment line:
|/// &lt;br /&gt;
|
LJCComments.SetComment isContinue:
| &lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// &lt;br /&gt;
|
LJCComments.SetComment isContinue:
| &lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// The FWrite() and FWriteLine() methods that write to the file stream
|
LJCComments.SetComment isContinue:
| The FWrite() and FWriteLine() methods that write to the file stream
|
---------------
LJCComments.SetComment line:
|/// passed to the LJCWriter constructor.
|
LJCComments.SetComment isContinue:
| passed to the LJCWriter constructor.
|
---------------
LJCComments.SetComment line:
|/// </remarks>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
ClassName:
|LJCWriter|
**
LJCDocDataGen.ProcessClass summary:
|Contains console and file output methods.|
Syntax:
|class LJCWriter|
Remarks:
|
 The Write() and WriteLine() static functions are used to write to stdout.
 &amp;lt;br /&amp;gt;
 &amp;lt;br /&amp;gt;
 The FWrite() and FWriteLine() methods that write to the file stream
 passed to the LJCWriter constructor.
|
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/Write/*' file='Doc/LJCWriter.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Writes text with indents.</summary>|
LJCComments.SetComment comment:
|Writes text with indents.|
---------------
LJCComments.SetComment line:
|///     <param name="$text">The text value.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$indentCount">The number of tabs to add to the line beginning.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$addBreak">Adds an HTML break before the cr/lf.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <remarks>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// The text is sent to stdout using the echo php function.
|
LJCComments.SetComment isContinue:
| The text is sent to stdout using the echo php function.
|
---------------
LJCComments.SetComment line:
|/// &lt;br /&gt;
|
LJCComments.SetComment isContinue:
| &lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// &lt;br /&gt;
|
LJCComments.SetComment isContinue:
| &lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// It is often used for Debug output.
|
LJCComments.SetComment isContinue:
| It is often used for Debug output.
|
---------------
LJCComments.SetComment line:
|/// </remarks>|
LJCComments.SetComment isContinue
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCTextLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCTextLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $text = "This value";|
LJCComments.SetComment isContinue:
| $text = "This value";|
---------------
LJCComments.SetComment line:
|/// LJCWriter::Write("SomeMethod() text: $text");|
LJCComments.SetComment isContinue:
| LJCWriter::Write("SomeMethod() text: $text");|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|Write|
**
LJCDocDataGen.ProcessFunction summary:
|Writes text with indents.|
Syntax:
|public static function Write(?string $text, int $indentCount = 0&lt;br /&gt;, bool $addBreak = false)|
Returns
Remarks:
|
 The text is sent to stdout using the echo php function.
 &amp;lt;br /&amp;gt;
 &amp;lt;br /&amp;gt;
 It is often used for Debug output.
|
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCTextLib.php&quot;;
 
 $text = &quot;This value&quot;;
 LJCWriter::Write(&quot;SomeMethod() text: $text&quot;);|
---------------
LJCComments.SetComment line:
|		/// <include path='items/WriteFile/*' file='Doc/LJCWriter.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Writes a text file.</summary>|
LJCComments.SetComment comment:
|Writes a text file.|
---------------
LJCComments.SetComment line:
|///     <param name="$text">The text value.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$fileSpec">The file specification.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCTextLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCTextLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $text = "This is some text.";|
LJCComments.SetComment isContinue:
| $text = "This is some text.";|
---------------
LJCComments.SetComment line:
|/// LJCWriter::WriteFile($text, "Output.txt");|
LJCComments.SetComment isContinue:
| LJCWriter::WriteFile($text, "Output.txt");|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|WriteFile|
**
LJCDocDataGen.ProcessFunction summary:
|Writes a text file.|
Syntax:
|public static function WriteFile(string $text, string $fileSpec)|
Returns
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCTextLib.php&quot;;
 
 $text = &quot;This is some text.&quot;;
 LJCWriter::WriteFile($text, &quot;Output.txt&quot;);|
---------------
LJCComments.SetComment line:
|		/// <include path='items/WriteLine/*' file='Doc/LJCWriter.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Writes a text line with indents.</summary>|
LJCComments.SetComment comment:
|Writes a text line with indents.|
---------------
LJCComments.SetComment line:
|///     <param name="$text">The text value.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$indentCount">The number of tabs to add to the line beginning.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$addBreak">Adds an HTML break before the cr/lf.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <remarks>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// The text is sent to stdout using the echo php function.
|
LJCComments.SetComment isContinue:
| The text is sent to stdout using the echo php function.
|
---------------
LJCComments.SetComment line:
|/// &lt;br /&gt;
|
LJCComments.SetComment isContinue:
| &lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// &lt;br /&gt;
|
LJCComments.SetComment isContinue:
| &lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// It is often used for Debug output.
|
LJCComments.SetComment isContinue:
| It is often used for Debug output.
|
---------------
LJCComments.SetComment line:
|/// </remarks>|
LJCComments.SetComment isContinue
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCTextLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCTextLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $text = "This value";|
LJCComments.SetComment isContinue:
| $text = "This value";|
---------------
LJCComments.SetComment line:
|/// LJCWriter::WriteLine("SomeMethod() text: $text");|
LJCComments.SetComment isContinue:
| LJCWriter::WriteLine("SomeMethod() text: $text");|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|WriteLine|
**
LJCDocDataGen.ProcessFunction summary:
|Writes a text line with indents.|
Syntax:
|public static function WriteLine(?string $text, int $indentCount = 0&lt;br /&gt;, bool $addBreak = false)|
Returns
Remarks:
|
 The text is sent to stdout using the echo php function.
 &amp;lt;br /&amp;gt;
 &amp;lt;br /&amp;gt;
 It is often used for Debug output.
|
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCTextLib.php&quot;;
 
 $text = &quot;This value&quot;;
 LJCWriter::WriteLine(&quot;SomeMethod() text: $text&quot;);|
---------------
LJCComments.SetComment line:
|		/// <summary>Initializes an object instance.</summary>
|
LJCComments.SetComment comment:
|Initializes an object instance.|
---------------
LJCComments.SetComment line:
|		/// <param name="$stream">The stream object.</param>
|
LJCComments.SetComment comment
FunctionName:
|construct|
**
LJCDocDataGen.ProcessFunction summary:
|Initializes an object instance.|
Syntax:
|public function __construct($stream)|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/FWrite/*' file='Doc/LJCWriter.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Writes file text with indents.</summary>|
LJCComments.SetComment comment:
|Writes file text with indents.|
---------------
LJCComments.SetComment line:
|///     <param name="$text">The text value.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$indentCount">The number of tabs to add to the line beginning.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCTextLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCTextLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $stream = fopen($fileName, "w");|
LJCComments.SetComment isContinue:
| $stream = fopen($fileName, "w");|
---------------
LJCComments.SetComment line:
|/// $writer = new LJCWriter($stream);|
LJCComments.SetComment isContinue:
| $writer = new LJCWriter($stream);|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $writer->FWrite("This is some text.");|
LJCComments.SetComment isContinue:
| $writer->FWrite("This is some text.");|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|FWrite|
**
LJCDocDataGen.ProcessFunction summary:
|Writes file text with indents.|
Syntax:
|public function FWrite(string $text, int $indentCount = 0)|
Returns
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCTextLib.php&quot;;
 
 $stream = fopen($fileName, &quot;w&quot;);
 $writer = new LJCWriter($stream);
 
 $writer-&gt;FWrite(&quot;This is some text.&quot;);|
---------------
LJCComments.SetComment line:
|		/// <include path='items/FWriteLine/*' file='Doc/LJCWriter.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Writes a file text line with indents.</summary>|
LJCComments.SetComment comment:
|Writes a file text line with indents.|
---------------
LJCComments.SetComment line:
|///     <param name="$text">The text value.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$indentCount">The number of tabs to add to the line beginning.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCTextLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCTextLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $stream = fopen($fileName, "w");|
LJCComments.SetComment isContinue:
| $stream = fopen($fileName, "w");|
---------------
LJCComments.SetComment line:
|/// $writer = new LJCWriter($stream);|
LJCComments.SetComment isContinue:
| $writer = new LJCWriter($stream);|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $writer->FWriteLine("This is some text.");|
LJCComments.SetComment isContinue:
| $writer->FWriteLine("This is some text.");|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|FWriteLine|
**
LJCDocDataGen.ProcessFunction summary:
|Writes a file text line with indents.|
Syntax:
|public function FWriteLine(string $text, int $indentCount = 0)|
Returns
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCTextLib.php&quot;;
 
 $stream = fopen($fileName, &quot;w&quot;);
 $writer = new LJCWriter($stream);
 
 $writer-&gt;FWriteLine(&quot;This is some text.&quot;);|
---------------
LJCComments.SetComment line:
|	/// <include path='items/LJCGenTextLib/*' file='Doc/LJCGenTextLib.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// The utility to generate text from a template and custom data.
|
LJCComments.SetComment isContinue:
| The utility to generate text from a template and custom data.
|
---------------
LJCComments.SetComment line:
|/// </summary>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
**
LJCDocDataGen.ProcessLib summary:
|
 The utility to generate text from a template and custom data.
|
Remarks
---------------
LJCComments.SetComment line:
|	/// <summary>The GenText text generator class.</summary>
|
LJCComments.SetComment comment:
|The GenText text generator class.|
---------------
LJCComments.SetComment line:
|	/// <remarks>Main Function: ProcessTemplate()</remarks>
|
LJCComments.SetComment comment:
|Main Function: ProcessTemplate()|
ClassName:
|LJCGenText|
**
LJCDocDataGen.ProcessClass summary:
|The GenText text generator class.|
Syntax:
|class LJCGenText|
Remarks:
|Main Function: ProcessTemplate()|
Code
---------------
LJCComments.SetComment line:
|		/// <summary>Initializes an object instance.</summary>
|
LJCComments.SetComment comment:
|Initializes an object instance.|
---------------
LJCComments.SetComment line:
|		/// <param name="$debugFileSuffix">The data file specification.</param>
|
LJCComments.SetComment comment
FunctionName:
|construct|
**
LJCDocDataGen.ProcessFunction summary:
|Initializes an object instance.|
Syntax:
|public function __construct(?string $debugFileSuffix = &quot;GenData&quot;)|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/ProcessTemplate/*' file='Doc/LJCGenText.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Processes the Template and Data to produce the output string.</summary>|
LJCComments.SetComment comment:
|Processes the Template and Data to produce the output string.|
---------------
LJCComments.SetComment line:
|///     <param name="$templateFileSpec">The template file.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$sections">The data sections.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCGenTextLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCGenTextLib.php";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCGenTextSectionLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCGenTextSectionLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // $sections is an LJCSections object.|
LJCComments.SetComment isContinue:
| // $sections is an LJCSections object.|
---------------
LJCComments.SetComment line:
|/// $sections = LJCSections::Deserialize("Sections.xml");|
LJCComments.SetComment isContinue:
| $sections = LJCSections::Deserialize("Sections.xml");|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $genText = new LJCGenText();|
LJCComments.SetComment isContinue:
| $genText = new LJCGenText();|
---------------
LJCComments.SetComment line:
|/// $templateFileSpec = "GenDataLib\Templates\ClassTemplate.html";|
LJCComments.SetComment isContinue:
| $templateFileSpec = "GenDataLib\Templates\ClassTemplate.html";|
---------------
LJCComments.SetComment line:
|/// $outputString = $genText->ProcessTemplate($templateFileSpec, $sections);|
LJCComments.SetComment isContinue:
| $outputString = $genText->ProcessTemplate($templateFileSpec, $sections);|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|ProcessTemplate|
**
LJCDocDataGen.ProcessFunction summary:
|Processes the Template and Data to produce the output string.|
Syntax:
|public function ProcessTemplate(string $templateFileSpec&lt;br /&gt;, LJCSections $sections) : ?string|
Returns
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCGenTextLib.php&quot;;
 require_once &quot;$webCommonPath/LJCGenTextSectionLib.php&quot;;
 
 // $sections is an LJCSections object.
 $sections = LJCSections::Deserialize(&quot;Sections.xml&quot;);
 
 $genText = new LJCGenText();
 $templateFileSpec = &quot;GenDataLib\Templates\ClassTemplate.html&quot;;
 $outputString = $genText-&gt;ProcessTemplate($templateFileSpec, $sections);|
---------------
LJCComments.SetComment line:
|	/// <include path='items/LJCGenTextSectionLib/*' file='Doc/LJCGenTextSectionLib.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>The GenText Section Library</summary>|
LJCComments.SetComment comment:
|The GenText Section Library|
---------------
LJCComments.SetComment line:
|/// <remarks>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// Contains the GenData classes used in the text generation process. These
|
LJCComments.SetComment isContinue:
| Contains the GenData classes used in the text generation process. These
|
---------------
LJCComments.SetComment line:
|/// classes are also used to Serialize and Deserialize the GenData XML that
|
LJCComments.SetComment isContinue:
| classes are also used to Serialize and Deserialize the GenData XML that
|
---------------
LJCComments.SetComment line:
|/// defines the text Sections, Items and Replacement values.
|
LJCComments.SetComment isContinue:
| defines the text Sections, Items and Replacement values.
|
---------------
LJCComments.SetComment line:
|/// &lt;p&gt;
|
LJCComments.SetComment isContinue:
| &lt;p&gt;
|
---------------
LJCComments.SetComment line:
|/// GenData is the XML data format for the data that is merged with a text
|
LJCComments.SetComment isContinue:
| GenData is the XML data format for the data that is merged with a text
|
---------------
LJCComments.SetComment line:
|/// template file  to generate a customized output file.
|
LJCComments.SetComment isContinue:
| template file  to generate a customized output file.
|
---------------
LJCComments.SetComment line:
|/// &lt;/p&gt;
|
LJCComments.SetComment isContinue:
| &lt;/p&gt;
|
---------------
LJCComments.SetComment line:
|/// See: &lt;a href="LJCSections/LJCSectionsDeserialize.html"&gt;LJCSections Deserialize()&lt;/a&gt; method
|
LJCComments.SetComment isContinue:
| See: &lt;a href="LJCSections/LJCSectionsDeserialize.html"&gt;LJCSections Deserialize()&lt;/a&gt; method
|
---------------
LJCComments.SetComment line:
|/// for the layout of the GenData XML.
|
LJCComments.SetComment isContinue:
| for the layout of the GenData XML.
|
---------------
LJCComments.SetComment line:
|/// </remarks>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
**
LJCDocDataGen.ProcessLib summary:
|The GenText Section Library|
Remarks:
|
 Contains the GenData classes used in the text generation process. These
 classes are also used to Serialize and Deserialize the GenData XML that
 defines the text Sections, Items and Replacement values.
 &amp;lt;p&amp;gt;
 GenData is the XML data format for the data that is merged with a text
 template file  to generate a customized output file.
 &amp;lt;/p&amp;gt;
 See: &amp;lt;a href=&quot;LJCSections/LJCSectionsDeserialize.html&quot;&amp;gt;LJCSections Deserialize()&amp;lt;/a&amp;gt; method
 for the layout of the GenData XML.
|
---------------
LJCComments.SetComment line:
|	/// <include path='items/LJCDirective/*' file='Doc/LJCDirective.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Represents a template Directive.</summary>|
LJCComments.SetComment comment:
|Represents a template Directive.|
---------------
LJCComments.SetComment line:
|/// <remarks>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// Template Directives are include in a valid comment line for whatever
|
LJCComments.SetComment isContinue:
| Template Directives are include in a valid comment line for whatever
|
---------------
LJCComments.SetComment line:
|/// text type or language is being generated. A line which contains a
|
LJCComments.SetComment isContinue:
| text type or language is being generated. A line which contains a
|
---------------
LJCComments.SetComment line:
|/// Directive will not appear in the generated text.
|
LJCComments.SetComment isContinue:
| Directive will not appear in the generated text.
|
---------------
LJCComments.SetComment line:
|/// &lt;p&gt;
|
LJCComments.SetComment isContinue:
| &lt;p&gt;
|
---------------
LJCComments.SetComment line:
|/// The valid Directives are:
|
LJCComments.SetComment isContinue:
| The valid Directives are:
|
---------------
LJCComments.SetComment line:
|/// &lt;/p&gt;
|
LJCComments.SetComment isContinue:
| &lt;/p&gt;
|
---------------
LJCComments.SetComment line:
|/// &lt;p&gt;
|
LJCComments.SetComment isContinue:
| &lt;p&gt;
|
---------------
LJCComments.SetComment line:
|/// &amp;lt;!-- #SectionBegin Name --&gt;
|
LJCComments.SetComment isContinue:
| &amp;lt;!-- #SectionBegin Name --&gt;
|
---------------
LJCComments.SetComment line:
|/// &lt;br /&gt;
|
LJCComments.SetComment isContinue:
| &lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// Indicates the beginning of a Section.  The Directive includes the Section
|
LJCComments.SetComment isContinue:
| Indicates the beginning of a Section.  The Directive includes the Section
|
---------------
LJCComments.SetComment line:
|/// name. The Section name is used in the  XMLData to indicate to which Section
|
LJCComments.SetComment isContinue:
| name. The Section name is used in the  XMLData to indicate to which Section
|
---------------
LJCComments.SetComment line:
|/// the Items and Replacements apply.
|
LJCComments.SetComment isContinue:
| the Items and Replacements apply.
|
---------------
LJCComments.SetComment line:
|/// &lt;/p&gt;
|
LJCComments.SetComment isContinue:
| &lt;/p&gt;
|
---------------
LJCComments.SetComment line:
|/// &lt;p&gt;
|
LJCComments.SetComment isContinue:
| &lt;p&gt;
|
---------------
LJCComments.SetComment line:
|/// &amp;lt;!-- #SectionEnd Name --&gt;
|
LJCComments.SetComment isContinue:
| &amp;lt;!-- #SectionEnd Name --&gt;
|
---------------
LJCComments.SetComment line:
|/// &lt;br /&gt;
|
LJCComments.SetComment isContinue:
| &lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// Indicates the end of a Section. The  section name is optional and simply
|
LJCComments.SetComment isContinue:
| Indicates the end of a Section. The  section name is optional and simply
|
---------------
LJCComments.SetComment line:
|/// helps to identify what section is  ending.
|
LJCComments.SetComment isContinue:
| helps to identify what section is  ending.
|
---------------
LJCComments.SetComment line:
|/// &lt;/p&gt;
|
LJCComments.SetComment isContinue:
| &lt;/p&gt;
|
---------------
LJCComments.SetComment line:
|/// &lt;p&gt;
|
LJCComments.SetComment isContinue:
| &lt;p&gt;
|
---------------
LJCComments.SetComment line:
|/// &amp;lt;!-- #Value _ReplacementValue_ --&gt;
|
LJCComments.SetComment isContinue:
| &amp;lt;!-- #Value _ReplacementValue_ --&gt;
|
---------------
LJCComments.SetComment line:
|/// &lt;br /&gt;
|
LJCComments.SetComment isContinue:
| &lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// A value Directive is currently informational only.  It identifies a
|
LJCComments.SetComment isContinue:
| A value Directive is currently informational only.  It identifies a
|
---------------
LJCComments.SetComment line:
|/// Replacement value that appears in Items within that  Section.
|
LJCComments.SetComment isContinue:
| Replacement value that appears in Items within that  Section.
|
---------------
LJCComments.SetComment line:
|/// &lt;/p&gt;
|
LJCComments.SetComment isContinue:
| &lt;/p&gt;
|
---------------
LJCComments.SetComment line:
|/// &lt;p&gt;
|
LJCComments.SetComment isContinue:
| &lt;p&gt;
|
---------------
LJCComments.SetComment line:
|/// &amp;lt;!-- #IfBegin _ReplacementValue_ ComparisonValue --&gt;
|
LJCComments.SetComment isContinue:
| &amp;lt;!-- #IfBegin _ReplacementValue_ ComparisonValue --&gt;
|
---------------
LJCComments.SetComment line:
|/// &lt;br /&gt;
|
LJCComments.SetComment isContinue:
| &lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// This Directive indicates the beginning of conditional text. If the
|
LJCComments.SetComment isContinue:
| This Directive indicates the beginning of conditional text. If the
|
---------------
LJCComments.SetComment line:
|/// _ReplacementValue_ is  equal to the ComparisonValue, then the next text
|
LJCComments.SetComment isContinue:
| _ReplacementValue_ is  equal to the ComparisonValue, then the next text
|
---------------
LJCComments.SetComment line:
|/// lines are generated up to  the #IfElse or #IfEnd directive.
|
LJCComments.SetComment isContinue:
| lines are generated up to  the #IfElse or #IfEnd directive.
|
---------------
LJCComments.SetComment line:
|/// &lt;br /&gt;
|
LJCComments.SetComment isContinue:
| &lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// The ComparisonValue can be "NotNull". The #IfBegin will be true if the
|
LJCComments.SetComment isContinue:
| The ComparisonValue can be "NotNull". The #IfBegin will be true if the
|
---------------
LJCComments.SetComment line:
|/// _ReplacementValue_ is not null.
|
LJCComments.SetComment isContinue:
| _ReplacementValue_ is not null.
|
---------------
LJCComments.SetComment line:
|/// &lt;/p&gt;
|
LJCComments.SetComment isContinue:
| &lt;/p&gt;
|
---------------
LJCComments.SetComment line:
|/// &lt;p&gt;
|
LJCComments.SetComment isContinue:
| &lt;p&gt;
|
---------------
LJCComments.SetComment line:
|/// &amp;lt;!-- #IfElse --&gt;
|
LJCComments.SetComment isContinue:
| &amp;lt;!-- #IfElse --&gt;
|
---------------
LJCComments.SetComment line:
|/// &lt;br /&gt;
|
LJCComments.SetComment isContinue:
| &lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// The next text lines are generated  up to the #IfEnd Directive if the
|
LJCComments.SetComment isContinue:
| The next text lines are generated  up to the #IfEnd Directive if the
|
---------------
LJCComments.SetComment line:
|/// #IfBegin Directive was false.
|
LJCComments.SetComment isContinue:
| #IfBegin Directive was false.
|
---------------
LJCComments.SetComment line:
|/// &lt;/p&gt;
|
LJCComments.SetComment isContinue:
| &lt;/p&gt;
|
---------------
LJCComments.SetComment line:
|/// &lt;p&gt;
|
LJCComments.SetComment isContinue:
| &lt;p&gt;
|
---------------
LJCComments.SetComment line:
|/// &amp;lt;!-- #IfEnd _ReplacementValue_ comparisonValue --&gt;
|
LJCComments.SetComment isContinue:
| &amp;lt;!-- #IfEnd _ReplacementValue_ comparisonValue --&gt;
|
---------------
LJCComments.SetComment line:
|/// &lt;br /&gt;
|
LJCComments.SetComment isContinue:
| &lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// The end of the #IfBegin text. The _ReplacementValue_ and ComparisonValue
|
LJCComments.SetComment isContinue:
| The end of the #IfBegin text. The _ReplacementValue_ and ComparisonValue
|
---------------
LJCComments.SetComment line:
|/// are optional and help to identify which #IfBegin is ending.
|
LJCComments.SetComment isContinue:
| are optional and help to identify which #IfBegin is ending.
|
---------------
LJCComments.SetComment line:
|/// </remarks>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
ClassName:
|LJCDirective|
**
LJCDocDataGen.ProcessClass summary:
|Represents a template Directive.|
Syntax:
|class LJCDirective|
Remarks:
|
 Template Directives are include in a valid comment line for whatever
 text type or language is being generated. A line which contains a
 Directive will not appear in the generated text.
 &amp;lt;p&amp;gt;
 The valid Directives are:
 &amp;lt;/p&amp;gt;
 &amp;lt;p&amp;gt;
 &amp;amp;lt;!-- #SectionBegin Name --&amp;gt;
 &amp;lt;br /&amp;gt;
 Indicates the beginning of a Section.  The Directive includes the Section
 name. The Section name is used in the  XMLData to indicate to which Section
 the Items and Replacements apply.
 &amp;lt;/p&amp;gt;
 &amp;lt;p&amp;gt;
 &amp;amp;lt;!-- #SectionEnd Name --&amp;gt;
 &amp;lt;br /&amp;gt;
 Indicates the end of a Section. The  section name is optional and simply
 helps to identify what section is  ending.
 &amp;lt;/p&amp;gt;
 &amp;lt;p&amp;gt;
 &amp;amp;lt;!-- #Value _ReplacementValue_ --&amp;gt;
 &amp;lt;br /&amp;gt;
 A value Directive is currently informational only.  It identifies a
 Replacement value that appears in Items within that  Section.
 &amp;lt;/p&amp;gt;
 &amp;lt;p&amp;gt;
 &amp;amp;lt;!-- #IfBegin _ReplacementValue_ ComparisonValue --&amp;gt;
 &amp;lt;br /&amp;gt;
 This Directive indicates the beginning of conditional text. If the
 _ReplacementValue_ is  equal to the ComparisonValue, then the next text
 lines are generated up to  the #IfElse or #IfEnd directive.
 &amp;lt;br /&amp;gt;
 The ComparisonValue can be &quot;NotNull&quot;. The #IfBegin will be true if the
 _ReplacementValue_ is not null.
 &amp;lt;/p&amp;gt;
 &amp;lt;p&amp;gt;
 &amp;amp;lt;!-- #IfElse --&amp;gt;
 &amp;lt;br /&amp;gt;
 The next text lines are generated  up to the #IfEnd Directive if the
 #IfBegin Directive was false.
 &amp;lt;/p&amp;gt;
 &amp;lt;p&amp;gt;
 &amp;amp;lt;!-- #IfEnd _ReplacementValue_ comparisonValue --&amp;gt;
 &amp;lt;br /&amp;gt;
 The end of the #IfBegin text. The _ReplacementValue_ and ComparisonValue
 are optional and help to identify which #IfBegin is ending.
|
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/Find/*' file='Doc/LJCDirective.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Find any Directives in a line.</summary>|
LJCComments.SetComment comment:
|Find any Directives in a line.|
---------------
LJCComments.SetComment line:
|///     <param name="$line">The text line.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The Directive object or null.</returns>|
LJCComments.SetComment comment:
|The Directive object or null.|
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCGenTextSectionLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCGenTextSectionLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $line = "  // #SectionBegin Class|
LJCComments.SetComment isContinue:
| $line = "  // #SectionBegin Class|
---------------
LJCComments.SetComment line:
|/// $directive = LJCDirective::Find($line);|
LJCComments.SetComment isContinue:
| $directive = LJCDirective::Find($line);|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|Find|
**
LJCDocDataGen.ProcessFunction summary:
|Find any Directives in a line.|
Syntax:
|public static function Find(string $line) : ?LJCDirective|
Returns:
|The Directive object or null.|
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCGenTextSectionLib.php&quot;;
 
 $line = &quot;  // #SectionBegin Class
 $directive = LJCDirective::Find($line);|
---------------
LJCComments.SetComment line:
|		/// <include path='items/construct/*' file='Doc/LJCDirective.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary> Initializes an object instance.</summary>|
LJCComments.SetComment comment:
| Initializes an object instance.|
---------------
LJCComments.SetComment line:
|///     <param name="$type">The Directive Type.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$name">The Directive name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCGenTextSectionLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCGenTextSectionLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $directive = new LJCDirective("SectionBegin", "Class");|
LJCComments.SetComment isContinue:
| $directive = new LJCDirective("SectionBegin", "Class");|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|construct|
**
LJCDocDataGen.ProcessFunction summary:
| Initializes an object instance.|
Syntax:
|public function __construct(string $type, string $name)|
Returns
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCGenTextSectionLib.php&quot;;
 
 $directive = new LJCDirective(&quot;SectionBegin&quot;, &quot;Class&quot;);|
---------------
LJCComments.SetComment line:
|		/// <summary>The Directive Name.</summary>
|
LJCComments.SetComment comment:
|The Directive Name.|
PropertyName:
|$Name|
**
LJCDocDataGen.ProcessProperty summary:
|The Directive Name.|
Syntax:
|public string $Name;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Directive Type.</summary>
|
LJCComments.SetComment comment:
|The Directive Type.|
PropertyName:
|$Type|
**
LJCDocDataGen.ProcessProperty summary:
|The Directive Type.|
Syntax:
|public string $Type;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The compare value.</summary>
|
LJCComments.SetComment comment:
|The compare value.|
PropertyName:
|$Value|
**
LJCDocDataGen.ProcessProperty summary:
|The compare value.|
Syntax:
|public string $Value;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|	/// <include path='items/LJCSection/*' file='Doc/LJCSection.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Represents a template Section.</summary>|
LJCComments.SetComment comment:
|Represents a template Section.|
---------------
LJCComments.SetComment line:
|/// <remarks>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// A Section identifies a section of text for which there can be one or more
|
LJCComments.SetComment isContinue:
| A Section identifies a section of text for which there can be one or more
|
---------------
LJCComments.SetComment line:
|/// items.
|
LJCComments.SetComment isContinue:
| items.
|
---------------
LJCComments.SetComment line:
|/// &lt;p&gt;
|
LJCComments.SetComment isContinue:
| &lt;p&gt;
|
---------------
LJCComments.SetComment line:
|/// The text within the Section will be generated once for each Item identified
|
LJCComments.SetComment isContinue:
| The text within the Section will be generated once for each Item identified
|
---------------
LJCComments.SetComment line:
|/// in the XMLData file. The Replacements for the current Item are applied to
|
LJCComments.SetComment isContinue:
| in the XMLData file. The Replacements for the current Item are applied to
|
---------------
LJCComments.SetComment line:
|/// the text.
|
LJCComments.SetComment isContinue:
| the text.
|
---------------
LJCComments.SetComment line:
|/// &lt;/p&gt;
|
LJCComments.SetComment isContinue:
| &lt;/p&gt;
|
---------------
LJCComments.SetComment line:
|/// A Section can appear within another Section but must not cross Section
|
LJCComments.SetComment isContinue:
| A Section can appear within another Section but must not cross Section
|
---------------
LJCComments.SetComment line:
|/// borders. The active Replacements will be for the current Item and the
|
LJCComments.SetComment isContinue:
| borders. The active Replacements will be for the current Item and the
|
---------------
LJCComments.SetComment line:
|/// parent tree current Items. That is for all current Items in which the
|
LJCComments.SetComment isContinue:
| parent tree current Items. That is for all current Items in which the
|
---------------
LJCComments.SetComment line:
|/// current section is enclosed.
|
LJCComments.SetComment isContinue:
| current section is enclosed.
|
---------------
LJCComments.SetComment line:
|/// </remarks>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
ClassName:
|LJCSection|
**
LJCDocDataGen.ProcessClass summary:
|Represents a template Section.|
Syntax:
|class LJCSection|
Remarks:
|
 A Section identifies a section of text for which there can be one or more
 items.
 &amp;lt;p&amp;gt;
 The text within the Section will be generated once for each Item identified
 in the XMLData file. The Replacements for the current Item are applied to
 the text.
 &amp;lt;/p&amp;gt;
 A Section can appear within another Section but must not cross Section
 borders. The active Replacements will be for the current Item and the
 parent tree current Items. That is for all current Items in which the
 current section is enclosed.
|
Code
---------------
LJCComments.SetComment line:
|		/// <summary>Initializes an object instance.</summary>
|
LJCComments.SetComment comment:
|Initializes an object instance.|
---------------
LJCComments.SetComment line:
|		/// <param name="$name">The Section name.</param>.
|
LJCComments.SetComment comment
FunctionName:
|construct|
**
LJCDocDataGen.ProcessFunction summary:
|Initializes an object instance.|
Syntax:
|public function __construct(string $name)|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <summary>Creates a copy of the current object.</summary>
|
LJCComments.SetComment comment:
|Creates a copy of the current object.|
FunctionName:
|Clone|
**
LJCDocDataGen.ProcessFunction summary:
|Creates a copy of the current object.|
Syntax:
|public function Clone() : self|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <summary>The Section begin stream offset.</summary>
|
LJCComments.SetComment comment:
|The Section begin stream offset.|
PropertyName:
|$Begin|
**
LJCDocDataGen.ProcessProperty summary:
|The Section begin stream offset.|
Syntax:
|public $Begin;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Current Item object.</summary>
|
LJCComments.SetComment comment:
|The Current Item object.|
PropertyName:
|$CurrentItem|
**
LJCDocDataGen.ProcessProperty summary:
|The Current Item object.|
Syntax:
|public LJCItem $CurrentItem;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Section Items.</summary>
|
LJCComments.SetComment comment:
|The Section Items.|
PropertyName:
|$Items|
**
LJCDocDataGen.ProcessProperty summary:
|The Section Items.|
Syntax:
|public array $Items;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Section name.</summary>
|
LJCComments.SetComment comment:
|The Section name.|
PropertyName:
|$Name|
**
LJCDocDataGen.ProcessProperty summary:
|The Section name.|
Syntax:
|public string $Name;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|	/// <include path='items/LJCSections/*' file='Doc/LJCSections.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Represents a collection of Section objects.</summary>|
LJCComments.SetComment comment:
|Represents a collection of Section objects.|
---------------
LJCComments.SetComment line:
|/// <remarks>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// The LJCSections is the top level class for the GenData object tree.
|
LJCComments.SetComment isContinue:
| The LJCSections is the top level class for the GenData object tree.
|
---------------
LJCComments.SetComment line:
|/// &lt;p&gt;
|
LJCComments.SetComment isContinue:
| &lt;p&gt;
|
---------------
LJCComments.SetComment line:
|/// GenData is the XML data format for the data that is merged with a text
|
LJCComments.SetComment isContinue:
| GenData is the XML data format for the data that is merged with a text
|
---------------
LJCComments.SetComment line:
|/// template file  to generate a customized output file.
|
LJCComments.SetComment isContinue:
| template file  to generate a customized output file.
|
---------------
LJCComments.SetComment line:
|/// &lt;/p&gt;
|
LJCComments.SetComment isContinue:
| &lt;/p&gt;
|
---------------
LJCComments.SetComment line:
|/// &lt;pre&gt;
|
LJCComments.SetComment isContinue:
| &lt;pre&gt;
|
---------------
LJCComments.SetComment line:
|///   LJCSections&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|   LJCSections&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///     LJCSection&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|     LJCSection&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///       LJCItems&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|       LJCItems&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///         LJCItem&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|         LJCItem&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///           LJCReplacements&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|           LJCReplacements&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///             LJCReplacement
|
LJCComments.SetComment isContinue:
|             LJCReplacement
|
---------------
LJCComments.SetComment line:
|/// &lt;/pre&gt;
|
LJCComments.SetComment isContinue:
| &lt;/pre&gt;
|
---------------
LJCComments.SetComment line:
|/// </remarks>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
ClassName:
|LJCSections|
**
LJCDocDataGen.ProcessClass summary:
|Represents a collection of Section objects.|
Syntax:
|class LJCSections implements IteratorAggregate, \Countable|
Remarks:
|
 The LJCSections is the top level class for the GenData object tree.
 &amp;lt;p&amp;gt;
 GenData is the XML data format for the data that is merged with a text
 template file  to generate a customized output file.
 &amp;lt;/p&amp;gt;
 &amp;lt;pre&amp;gt;
   LJCSections&amp;lt;br /&amp;gt;
     LJCSection&amp;lt;br /&amp;gt;
       LJCItems&amp;lt;br /&amp;gt;
         LJCItem&amp;lt;br /&amp;gt;
           LJCReplacements&amp;lt;br /&amp;gt;
             LJCReplacement
 &amp;lt;/pre&amp;gt;
|
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/CreateColumnData/*' file='Doc/LJCSections.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Creates the data from a table definition.</summary>|
LJCComments.SetComment comment:
|Creates the data from a table definition.|
---------------
LJCComments.SetComment line:
|///     <param name="$dbColumns">The table columns definition.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$tableName">The Table name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$className">The Class name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The sections array.</returns>|
LJCComments.SetComment comment:
|The sections array.|
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCDBAccessLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCDBAccessLib.php";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCGenTextSectionLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCGenTextSectionLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $dbAccess = new LJCDbAccess($connectionValues);|
LJCComments.SetComment isContinue:
| $dbAccess = new LJCDbAccess($connectionValues);|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $tableName = "TableName";|
LJCComments.SetComment isContinue:
| $tableName = "TableName";|
---------------
LJCComments.SetComment line:
|/// $dbColumns = $dbAccess->LoadTableSchema($database, $tableName);|
LJCComments.SetComment isContinue:
| $dbColumns = $dbAccess->LoadTableSchema($database, $tableName);|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // $sections is an LJCSections object.|
LJCComments.SetComment isContinue:
| // $sections is an LJCSections object.|
---------------
LJCComments.SetComment line:
|/// $sections = LJCSections::CreateColumnData($dbColumns, $tableName|
LJCComments.SetComment isContinue:
| $sections = LJCSections::CreateColumnData($dbColumns, $tableName|
---------------
LJCComments.SetComment line:
|///   , "ClassName");|
LJCComments.SetComment isContinue:
|   , "ClassName");|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|CreateColumnData|
**
LJCDocDataGen.ProcessFunction summary:
|Creates the data from a table definition.|
Syntax:
|public static function CreateColumnData(LJCDbColumns $dbColumns&lt;br /&gt;, string $tableName, string $className = null) : LJCSections|
Returns:
|The sections array.|
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCDBAccessLib.php&quot;;
 require_once &quot;$webCommonPath/LJCGenTextSectionLib.php&quot;;
 
 $dbAccess = new LJCDbAccess($connectionValues);
 
 $tableName = &quot;TableName&quot;;
 $dbColumns = $dbAccess-&gt;LoadTableSchema($database, $tableName);
 
 // $sections is an LJCSections object.
 $sections = LJCSections::CreateColumnData($dbColumns, $tableName
   , &quot;ClassName&quot;);|
---------------
LJCComments.SetComment line:
|		/// <include path='items/AddReplacement/*' file='Doc/LJCSections.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary> Adds a Replacement to an Item.</summary>|
LJCComments.SetComment comment:
| Adds a Replacement to an Item.|
---------------
LJCComments.SetComment line:
|///     <param name="$item">The Item object.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$name">The Replacement name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$value">The Replacement value.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCGenTextSectionLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCGenTextSectionLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $sections = new LJCSections();|
LJCComments.SetComment isContinue:
| $sections = new LJCSections();|
---------------
LJCComments.SetComment line:
|/// $section = new LJCSection("SectionName");|
LJCComments.SetComment isContinue:
| $section = new LJCSection("SectionName");|
---------------
LJCComments.SetComment line:
|/// $sections->Add($section, $section->Name);|
LJCComments.SetComment isContinue:
| $sections->Add($section, $section->Name);|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $item = new LJCItem("ItemName");|
LJCComments.SetComment isContinue:
| $item = new LJCItem("ItemName");|
---------------
LJCComments.SetComment line:
|/// $section->Items[] = $item;|
LJCComments.SetComment isContinue:
| $section->Items[] = $item;|
---------------
LJCComments.SetComment line:
|/// $sections::AddReplacement($item, "_ClassName_", "ClassName");|
LJCComments.SetComment isContinue:
| $sections::AddReplacement($item, "_ClassName_", "ClassName");|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|AddReplacement|
**
LJCDocDataGen.ProcessFunction summary:
| Adds a Replacement to an Item.|
Syntax:
|public static function AddReplacement(LJCItem &amp;$item, string $name&lt;br /&gt;, string $value) : void|
Returns
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCGenTextSectionLib.php&quot;;
 
 $sections = new LJCSections();
 $section = new LJCSection(&quot;SectionName&quot;);
 $sections-&gt;Add($section, $section-&gt;Name);
 
 $item = new LJCItem(&quot;ItemName&quot;);
 $section-&gt;Items[] = $item;
 $sections::AddReplacement($item, &quot;_ClassName_&quot;, &quot;ClassName&quot;);|
---------------
LJCComments.SetComment line:
|		/// <include path='items/Deserialize/*' file='Doc/LJCSections.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Deserializes the data from a Sections XML file.</summary>|
LJCComments.SetComment comment:
|Deserializes the data from a Sections XML file.|
---------------
LJCComments.SetComment line:
|///     <param name="$xmlFileSpec">The source XML file specification.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The Sections object.</returns>|
LJCComments.SetComment comment:
|The Sections object.|
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// &amp;lt;Data xmlns:xsd='http://www.w3.org/2001/XMLSchema'|
LJCComments.SetComment isContinue:
| &amp;lt;Data xmlns:xsd='http://www.w3.org/2001/XMLSchema'|
---------------
LJCComments.SetComment line:
|///   xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'&amp;gt;|
LJCComments.SetComment isContinue:
|   xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'&amp;gt;|
---------------
LJCComments.SetComment line:
|///   &amp;lt;Sections&amp;gt;|
LJCComments.SetComment isContinue:
|   &amp;lt;Sections&amp;gt;|
---------------
LJCComments.SetComment line:
|///     &amp;lt;Section&amp;gt;|
LJCComments.SetComment isContinue:
|     &amp;lt;Section&amp;gt;|
---------------
LJCComments.SetComment line:
|///       &amp;lt;Begin/&amp;gt;|
LJCComments.SetComment isContinue:
|       &amp;lt;Begin/&amp;gt;|
---------------
LJCComments.SetComment line:
|///       &amp;lt;Name&amp;gt;Main&amp;lt;/Name&amp;gt;|
LJCComments.SetComment isContinue:
|       &amp;lt;Name&amp;gt;Main&amp;lt;/Name&amp;gt;|
---------------
LJCComments.SetComment line:
|///       &amp;lt;Items&amp;gt;|
LJCComments.SetComment isContinue:
|       &amp;lt;Items&amp;gt;|
---------------
LJCComments.SetComment line:
|///         &amp;lt;Item&amp;gt;|
LJCComments.SetComment isContinue:
|         &amp;lt;Item&amp;gt;|
---------------
LJCComments.SetComment line:
|///           &amp;lt;Replacements&amp;gt;|
LJCComments.SetComment isContinue:
|           &amp;lt;Replacements&amp;gt;|
---------------
LJCComments.SetComment line:
|///             &amp;lt;Replacement&amp;gt;|
LJCComments.SetComment isContinue:
|             &amp;lt;Replacement&amp;gt;|
---------------
LJCComments.SetComment line:
|///               &amp;lt;Name&amp;gt;_FileSummary_&amp;lt;/Name&amp;gt;|
LJCComments.SetComment isContinue:
|               &amp;lt;Name&amp;gt;_FileSummary_&amp;lt;/Name&amp;gt;|
---------------
LJCComments.SetComment line:
|///               &amp;lt;Value&amp;gt;This is the file summary text.&amp;lt;/Value&amp;gt;|
LJCComments.SetComment isContinue:
|               &amp;lt;Value&amp;gt;This is the file summary text.&amp;lt;/Value&amp;gt;|
---------------
LJCComments.SetComment line:
|///             &amp;lt;/Replacement&amp;gt;|
LJCComments.SetComment isContinue:
|             &amp;lt;/Replacement&amp;gt;|
---------------
LJCComments.SetComment line:
|///             &amp;lt;Replacement&amp;gt;|
LJCComments.SetComment isContinue:
|             &amp;lt;Replacement&amp;gt;|
---------------
LJCComments.SetComment line:
|///               &amp;lt;Name&amp;gt;_FileName_&amp;lt;/Name&amp;gt;|
LJCComments.SetComment isContinue:
|               &amp;lt;Name&amp;gt;_FileName_&amp;lt;/Name&amp;gt;|
---------------
LJCComments.SetComment line:
|///               &amp;lt;Value&amp;gt;LJCLib&amp;lt;/Value&amp;gt;|
LJCComments.SetComment isContinue:
|               &amp;lt;Value&amp;gt;LJCLib&amp;lt;/Value&amp;gt;|
---------------
LJCComments.SetComment line:
|///             &amp;lt;/Replacement&amp;gt;|
LJCComments.SetComment isContinue:
|             &amp;lt;/Replacement&amp;gt;|
---------------
LJCComments.SetComment line:
|///           &amp;lt;/Replacements&amp;gt;|
LJCComments.SetComment isContinue:
|           &amp;lt;/Replacements&amp;gt;|
---------------
LJCComments.SetComment line:
|///         &amp;lt;/Item&amp;gt;|
LJCComments.SetComment isContinue:
|         &amp;lt;/Item&amp;gt;|
---------------
LJCComments.SetComment line:
|///       &amp;lt;/Items&amp;gt;|
LJCComments.SetComment isContinue:
|       &amp;lt;/Items&amp;gt;|
---------------
LJCComments.SetComment line:
|///     &amp;lt;/Section&amp;gt;|
LJCComments.SetComment isContinue:
|     &amp;lt;/Section&amp;gt;|
---------------
LJCComments.SetComment line:
|///   &amp;lt;/Sections&amp;gt;|
LJCComments.SetComment isContinue:
|   &amp;lt;/Sections&amp;gt;|
---------------
LJCComments.SetComment line:
|/// &amp;lt;/Data&amp;gt;|
LJCComments.SetComment isContinue:
| &amp;lt;/Data&amp;gt;|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCGenTextSectionLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCGenTextSectionLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// // $sections is an LJCSections object.|
LJCComments.SetComment isContinue:
| // $sections is an LJCSections object.|
---------------
LJCComments.SetComment line:
|/// $sections = LJCSections::Deserialize("Sections.xml");|
LJCComments.SetComment isContinue:
| $sections = LJCSections::Deserialize("Sections.xml");|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|Deserialize|
**
LJCDocDataGen.ProcessFunction summary:
|Deserializes the data from a Sections XML file.|
Syntax:
|public static function Deserialize(string $xmlFileSpec) : LJCSections|
Returns:
|The Sections object.|
Remarks
Code:
| &amp;amp;lt;Data xmlns:xsd=&#039;http://www.w3.org/2001/XMLSchema&#039;
   xmlns:xsi=&#039;http://www.w3.org/2001/XMLSchema-instance&#039;&amp;amp;gt;
   &amp;amp;lt;Sections&amp;amp;gt;
     &amp;amp;lt;Section&amp;amp;gt;
       &amp;amp;lt;Begin/&amp;amp;gt;
       &amp;amp;lt;Name&amp;amp;gt;Main&amp;amp;lt;/Name&amp;amp;gt;
       &amp;amp;lt;Items&amp;amp;gt;
         &amp;amp;lt;Item&amp;amp;gt;
           &amp;amp;lt;Replacements&amp;amp;gt;
             &amp;amp;lt;Replacement&amp;amp;gt;
               &amp;amp;lt;Name&amp;amp;gt;_FileSummary_&amp;amp;lt;/Name&amp;amp;gt;
               &amp;amp;lt;Value&amp;amp;gt;This is the file summary text.&amp;amp;lt;/Value&amp;amp;gt;
             &amp;amp;lt;/Replacement&amp;amp;gt;
             &amp;amp;lt;Replacement&amp;amp;gt;
               &amp;amp;lt;Name&amp;amp;gt;_FileName_&amp;amp;lt;/Name&amp;amp;gt;
               &amp;amp;lt;Value&amp;amp;gt;LJCLib&amp;amp;lt;/Value&amp;amp;gt;
             &amp;amp;lt;/Replacement&amp;amp;gt;
           &amp;amp;lt;/Replacements&amp;amp;gt;
         &amp;amp;lt;/Item&amp;amp;gt;
       &amp;amp;lt;/Items&amp;amp;gt;
     &amp;amp;lt;/Section&amp;amp;gt;
   &amp;amp;lt;/Sections&amp;amp;gt;
 &amp;amp;lt;/Data&amp;amp;gt;
 
 $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCGenTextSectionLib.php&quot;;
 
 // $sections is an LJCSections object.
 $sections = LJCSections::Deserialize(&quot;Sections.xml&quot;);|
---------------
LJCComments.SetComment line:
|		/// <include path='items/DeserializeString/*' file='Doc/LJCSections.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Deserializes the data from a Sections XML string.</summary>|
LJCComments.SetComment comment:
|Deserializes the data from a Sections XML string.|
---------------
LJCComments.SetComment line:
|///     <param name="$xmlString">The XMLDoc node.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The Sections object.</returns>|
LJCComments.SetComment comment:
|The Sections object.|
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCGenTextSectionLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCGenTextSectionLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $sections = LJCSections::DeserializeString($xmlstring);|
LJCComments.SetComment isContinue:
| $sections = LJCSections::DeserializeString($xmlstring);|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|DeserializeString|
**
LJCDocDataGen.ProcessFunction summary:
|Deserializes the data from a Sections XML string.|
Syntax:
|public static function DeserializeString(string $xmlString) : LJCSections|
Returns:
|The Sections object.|
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCGenTextSectionLib.php&quot;;
 
 $sections = LJCSections::DeserializeString($xmlstring);|
---------------
LJCComments.SetComment line:
|		/// <include path='items/CreateSections/*' file='Doc/LJCSections.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Creates the Section data from an XMLDoc node.</summary>|
LJCComments.SetComment comment:
|Creates the Section data from an XMLDoc node.|
---------------
LJCComments.SetComment line:
|///     <param name="$xmlElement">The root Element.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The sections array.</returns>|
LJCComments.SetComment comment:
|The sections array.|
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCGenTextSectionLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCGenTextSectionLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $xmlElement = simplexml_load_file("Sections.xml");|
LJCComments.SetComment isContinue:
| $xmlElement = simplexml_load_file("Sections.xml");|
---------------
LJCComments.SetComment line:
|/// $sections = LJCSections::CreateSections($xmlElement);|
LJCComments.SetComment isContinue:
| $sections = LJCSections::CreateSections($xmlElement);|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|CreateSections|
**
LJCDocDataGen.ProcessFunction summary:
|Creates the Section data from an XMLDoc node.|
Syntax:
|public static function CreateSections(SimpleXMLElement $xmlElement)|
Returns:
|The sections array.|
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCGenTextSectionLib.php&quot;;
 
 $xmlElement = simplexml_load_file(&quot;Sections.xml&quot;);
 $sections = LJCSections::CreateSections($xmlElement);|
---------------
LJCComments.SetComment line:
|		/// <include path='items/Serialize/*' file='Doc/LJCSections.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Serializes the data to an XML file.</summary>|
LJCComments.SetComment comment:
|Serializes the data to an XML file.|
---------------
LJCComments.SetComment line:
|///     <param name="$xmlFile">The target XML file.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$sections">The sections array.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$rootName">The XML root name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCGenTextSectionLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCGenTextSectionLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// LJCSections::Serialize("Sections.xml", $sections);|
LJCComments.SetComment isContinue:
| LJCSections::Serialize("Sections.xml", $sections);|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|Serialize|
**
LJCDocDataGen.ProcessFunction summary:
|Serializes the data to an XML file.|
Syntax:
|public static function Serialize(string $xmlFile, LJCSections $sections&lt;br /&gt;, string $rootName) : void|
Returns
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCGenTextSectionLib.php&quot;;
 
 LJCSections::Serialize(&quot;Sections.xml&quot;, $sections);|
---------------
LJCComments.SetComment line:
|		/// <include path='items/Add/*' file='Doc/LJCSections.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Adds an object and key value.</summary>|
LJCComments.SetComment comment:
|Adds an object and key value.|
---------------
LJCComments.SetComment line:
|///     <param name="$item">The object to be added to the collection.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$key">The element key.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The added item.</returns>|
LJCComments.SetComment comment:
|The added item.|
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCGenTextSectionLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCGenTextSectionLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $sections = new LJCSections();|
LJCComments.SetComment isContinue:
| $sections = new LJCSections();|
---------------
LJCComments.SetComment line:
|/// $section = new LJCSection("SectionName");|
LJCComments.SetComment isContinue:
| $section = new LJCSection("SectionName");|
---------------
LJCComments.SetComment line:
|/// $sections->Add($section, $section->Name);|
LJCComments.SetComment isContinue:
| $sections->Add($section, $section->Name);|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|Add|
**
LJCDocDataGen.ProcessFunction summary:
|Adds an object and key value.|
Syntax:
|public function Add(LJCSection $item, $key = null) : void|
Returns:
|The added item.|
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCGenTextSectionLib.php&quot;;
 
 $sections = new LJCSections();
 $section = new LJCSection(&quot;SectionName&quot;);
 $sections-&gt;Add($section, $section-&gt;Name);|
---------------
LJCComments.SetComment line:
|		/// <summary>Creates an object clone.</summary>
|
LJCComments.SetComment comment:
|Creates an object clone.|
FunctionName:
|Clone|
**
LJCDocDataGen.ProcessFunction summary:
|Creates an object clone.|
Syntax:
|public function Clone() : self|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/Get/*' file='Doc/LJCSections.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Get the item by Key value.</summary>|
LJCComments.SetComment comment:
|Get the item by Key value.|
---------------
LJCComments.SetComment line:
|///     <param name="$key">The element key.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$throwError">Indicates if an error should be thrown if the key is not found.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The object with the matching key value.</returns>|
LJCComments.SetComment comment:
|The object with the matching key value.|
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCGenTextSectionLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCGenTextSectionLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $sections = new LJCSections();|
LJCComments.SetComment isContinue:
| $sections = new LJCSections();|
---------------
LJCComments.SetComment line:
|/// $section = new LJCSection("SectionName");|
LJCComments.SetComment isContinue:
| $section = new LJCSection("SectionName");|
---------------
LJCComments.SetComment line:
|/// $sections->Add($section, $section->Name);|
LJCComments.SetComment isContinue:
| $sections->Add($section, $section->Name);|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $section = LJCSections->Get("SectionName");|
LJCComments.SetComment isContinue:
| $section = LJCSections->Get("SectionName");|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|Get|
**
LJCDocDataGen.ProcessFunction summary:
|Get the item by Key value.|
Syntax:
|public function Get($key, bool $showError = true) : ?LJCSection|
Returns:
|The object with the matching key value.|
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCGenTextSectionLib.php&quot;;
 
 $sections = new LJCSections();
 $section = new LJCSection(&quot;SectionName&quot;);
 $sections-&gt;Add($section, $section-&gt;Name);
 
 $section = LJCSections-&gt;Get(&quot;SectionName&quot;);|
---------------
LJCComments.SetComment line:
|		/// <summary>Gets an indexed array of keys.</summary>
|
LJCComments.SetComment comment:
|Gets an indexed array of keys.|
---------------
LJCComments.SetComment line:
|		/// <returns>The indexed keys array.</returns>
|
LJCComments.SetComment comment:
|The indexed keys array.|
FunctionName:
|GetKeys|
**
LJCDocDataGen.ProcessFunction summary:
|Gets an indexed array of keys.|
Syntax:
|public function GetKeys() : array|
Returns:
|The indexed keys array.|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <summary>Gets an indexed array of objects.</summary>
|
LJCComments.SetComment comment:
|Gets an indexed array of objects.|
---------------
LJCComments.SetComment line:
|		/// <returns>The indexed values array.</returns>
|
LJCComments.SetComment comment:
|The indexed values array.|
FunctionName:
|GetValues|
**
LJCDocDataGen.ProcessFunction summary:
|Gets an indexed array of objects.|
Syntax:
|public function GetValues() : array|
Returns:
|The indexed values array.|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/HasKey/*' file='Doc/LJCSections.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Indicates if a key already exists.</summary>|
LJCComments.SetComment comment:
|Indicates if a key already exists.|
---------------
LJCComments.SetComment line:
|///     <param name="$key">The element key.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>True if the key already exists, otherwise false.</returns>|
LJCComments.SetComment comment:
|True if the key already exists, otherwise false.|
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
LJCComments.SetComment isContinue:
| $webCommonPath = "c:/inetpub/wwwroot/LJCPHPCommon";|
---------------
LJCComments.SetComment line:
|/// require_once "$webCommonPath/LJCGenTextSectionLib.php";|
LJCComments.SetComment isContinue:
| require_once "$webCommonPath/LJCGenTextSectionLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $sections = new LJCSections();|
LJCComments.SetComment isContinue:
| $sections = new LJCSections();|
---------------
LJCComments.SetComment line:
|/// $key = "SectionName";|
LJCComments.SetComment isContinue:
| $key = "SectionName";|
---------------
LJCComments.SetComment line:
|/// if ($sections->HasKey($key))|
LJCComments.SetComment isContinue:
| if ($sections->HasKey($key))|
---------------
LJCComments.SetComment line:
|/// {|
LJCComments.SetComment isContinue:
| {|
---------------
LJCComments.SetComment line:
|///   throw new Exception("Key: {$key} already in use.");|
LJCComments.SetComment isContinue:
|   throw new Exception("Key: {$key} already in use.");|
---------------
LJCComments.SetComment line:
|/// }|
LJCComments.SetComment isContinue:
| }|
---------------
LJCComments.SetComment line:
|/// else|
LJCComments.SetComment isContinue:
| else|
---------------
LJCComments.SetComment line:
|/// {|
LJCComments.SetComment isContinue:
| {|
---------------
LJCComments.SetComment line:
|///   $section = new LJCSection($key);|
LJCComments.SetComment isContinue:
|   $section = new LJCSection($key);|
---------------
LJCComments.SetComment line:
|/// }|
LJCComments.SetComment isContinue:
| }|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|HasKey|
**
LJCDocDataGen.ProcessFunction summary:
|Indicates if a key already exists.|
Syntax:
|public function HasKey($key) : bool|
Returns:
|True if the key already exists, otherwise false.|
Remarks
Code:
| $webCommonPath = &quot;c:/inetpub/wwwroot/LJCPHPCommon&quot;;
 require_once &quot;$webCommonPath/LJCGenTextSectionLib.php&quot;;
 
 $sections = new LJCSections();
 $key = &quot;SectionName&quot;;
 if ($sections-&gt;HasKey($key))
 {
   throw new Exception(&quot;Key: {$key} already in use.&quot;);
 }
 else
 {
   $section = new LJCSection($key);
 }|
---------------
LJCComments.SetComment line:
|		/// <summary>Remove the item by Key value.</summary>
|
LJCComments.SetComment comment:
|Remove the item by Key value.|
---------------
LJCComments.SetComment line:
|		/// <param name="$key">The element key.</param>
|
LJCComments.SetComment comment
FunctionName:
|Remove|
**
LJCDocDataGen.ProcessFunction summary:
|Remove the item by Key value.|
Syntax:
|public function Remove($key) : void|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <summary>Allows foreach()</summary>
|
LJCComments.SetComment comment:
|Allows foreach()|
FunctionName:
|getIterator|
**
LJCDocDataGen.ProcessFunction summary:
|Allows foreach()|
Syntax:
|public function getIterator() : Traversable|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <summary>Allows Count(object).</summary>
|
LJCComments.SetComment comment:
|Allows Count(object).|
FunctionName:
|count|
**
LJCDocDataGen.ProcessFunction summary:
|Allows Count(object).|
Syntax:
|public function count() : int|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|	/// <summary>Represents a Section Item.</summary>
|
LJCComments.SetComment comment:
|Represents a Section Item.|
ClassName:
|LJCItem|
**
LJCDocDataGen.ProcessClass summary:
|Represents a Section Item.|
Syntax:
|class LJCItem|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <summary>Initializes an object instance.</summary>
|
LJCComments.SetComment comment:
|Initializes an object instance.|
---------------
LJCComments.SetComment line:
|		/// <param name="$name">The Item name.</param>
|
LJCComments.SetComment comment
FunctionName:
|construct|
**
LJCDocDataGen.ProcessFunction summary:
|Initializes an object instance.|
Syntax:
|public function __construct(string $name)|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <summary>Creates a copy of the current object.</summary>
|
LJCComments.SetComment comment:
|Creates a copy of the current object.|
FunctionName:
|Clone|
**
LJCDocDataGen.ProcessFunction summary:
|Creates a copy of the current object.|
Syntax:
|public function Clone() : self|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <summary>The Item name.</summary>
|
LJCComments.SetComment comment:
|The Item name.|
PropertyName:
|$Name|
**
LJCDocDataGen.ProcessProperty summary:
|The Item name.|
Syntax:
|public string $Name;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Item replacements.</summary>
|
LJCComments.SetComment comment:
|The Item replacements.|
PropertyName:
|$Replacements|
**
LJCDocDataGen.ProcessProperty summary:
|The Item replacements.|
Syntax:
|public $Replacements;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The XML Root Name value.</summary>
|
LJCComments.SetComment comment:
|The XML Root Name value.|
PropertyName:
|$RootNam|
**
LJCDocDataGen.ProcessProperty summary:
|The XML Root Name value.|
Syntax:
|public string $RootName = "Items";|
Returns
Remarks
---------------
LJCComments.SetComment line:
|	/// <summary>Represents Item Replacements.</summary>
|
LJCComments.SetComment comment:
|Represents Item Replacements.|
ClassName:
|LJCReplacement|
**
LJCDocDataGen.ProcessClass summary:
|Represents Item Replacements.|
Syntax:
|class LJCReplacement|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <param name="$name">The Replacement name.</param>
|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|		/// <param name="$value">The Replacement value.</param>
|
LJCComments.SetComment comment
FunctionName:
|construct|
**
LJCDocDataGen.ProcessFunction summary
Syntax:
|public function __construct(string $name, string $value)|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <summary>Creates a copy of the current object.</summary>
|
LJCComments.SetComment comment:
|Creates a copy of the current object.|
FunctionName:
|Clone|
**
LJCDocDataGen.ProcessFunction summary:
|Creates a copy of the current object.|
Syntax:
|public function Clone() : self|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <summary>The Replacement name.</summary>
|
LJCComments.SetComment comment:
|The Replacement name.|
PropertyName:
|$Name|
**
LJCDocDataGen.ProcessProperty summary:
|The Replacement name.|
Syntax:
|public string $Name;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Replacement value.</summary>
|
LJCComments.SetComment comment:
|The Replacement value.|
PropertyName:
|$Value|
**
LJCDocDataGen.ProcessProperty summary:
|The Replacement value.|
Syntax:
|public string $Value;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The XML Root Name value.</summary>
|
LJCComments.SetComment comment:
|The XML Root Name value.|
PropertyName:
|$RootNam|
**
LJCDocDataGen.ProcessProperty summary:
|The XML Root Name value.|
Syntax:
|public string $RootName = "Replacements";|
Returns
Remarks
---------------
LJCComments.SetComment line:
|	/// <include path='items/LJCCommentsLib/*' file='Doc/LJCCommentsLib.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// Contains Classes to parse code XML comments.
|
LJCComments.SetComment isContinue:
| Contains Classes to parse code XML comments.
|
---------------
LJCComments.SetComment line:
|/// </summary>|
LJCComments.SetComment isContinue
---------------
LJCComments.SetComment line:
|/// <remarks>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// Holds the XML Comments for the next generation point. A generation point
|
LJCComments.SetComment isContinue:
| Holds the XML Comments for the next generation point. A generation point
|
---------------
LJCComments.SetComment line:
|/// is the start of a File, Class, Method or Property.
|
LJCComments.SetComment isContinue:
| is the start of a File, Class, Method or Property.
|
---------------
LJCComments.SetComment line:
|/// </remarks>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
**
LJCDocDataGen.ProcessLib summary:
|
 Contains Classes to parse code XML comments.
|
Remarks:
|
 Holds the XML Comments for the next generation point. A generation point
 is the start of a File, Class, Method or Property.
|
---------------
LJCComments.SetComment line:
|	/// <include path='items/LJCComments/*' file='Doc/LJCComments.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Provides methods to parse code XML comment values.</summary>|
LJCComments.SetComment comment:
|Provides methods to parse code XML comment values.|
---------------
LJCComments.SetComment line:
|/// <remarks>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// Parses the code XML comments and holds them until the next generation
|
LJCComments.SetComment isContinue:
| Parses the code XML comments and holds them until the next generation
|
---------------
LJCComments.SetComment line:
|/// point. A generation point is the start of a File, Class, Method or
|
LJCComments.SetComment isContinue:
| point. A generation point is the start of a File, Class, Method or
|
---------------
LJCComments.SetComment line:
|/// Property.
|
LJCComments.SetComment isContinue:
| Property.
|
---------------
LJCComments.SetComment line:
|/// </remarks>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
ClassName:
|LJCComments|
**
LJCDocDataGen.ProcessClass summary:
|Provides methods to parse code XML comment values.|
Syntax:
|class LJCComments|
Remarks:
|
 Parses the code XML comments and holds them until the next generation
 point. A generation point is the start of a File, Class, Method or
 Property.
|
Code
---------------
LJCComments.SetComment line:
|		/// <summary>Initializes an object instance.</summary>
|
LJCComments.SetComment comment:
|Initializes an object instance.|
FunctionName:
|construct|
**
LJCDocDataGen.ProcessFunction summary:
|Initializes an object instance.|
Syntax:
|public function __construct()|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <summary>Clears the XML comments.</summary>
|
LJCComments.SetComment comment:
|Clears the XML comments.|
FunctionName:
|ClearComments|
**
LJCDocDataGen.ProcessFunction summary:
|Clears the XML comments.|
Syntax:
|public function ClearComments() : void|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/SetComment/*' file='Doc/LJCComments.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Sets the XML comment value.</summary>|
LJCComments.SetComment comment:
|Sets the XML comment value.|
---------------
LJCComments.SetComment line:
|///     <param name="$line">The code line.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$codeFileSpec">The code file spec.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// require_once "LJCCommentsLib.php";|
LJCComments.SetComment isContinue:
| require_once "LJCCommentsLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $line = "/// &amp;lt;summary&amp;gt;A summary comment.&amp;lt;/summary&amp;gt;";|
LJCComments.SetComment isContinue:
| $line = "/// &amp;lt;summary&amp;gt;A summary comment.&amp;lt;/summary&amp;gt;";|
---------------
LJCComments.SetComment line:
|/// $comments = new LJCComments();|
LJCComments.SetComment isContinue:
| $comments = new LJCComments();|
---------------
LJCComments.SetComment line:
|/// $comments->SetComment($line, "SourceFile.php");|
LJCComments.SetComment isContinue:
| $comments->SetComment($line, "SourceFile.php");|
---------------
LJCComments.SetComment line:
|/// $summary = $comments->Summary;|
LJCComments.SetComment isContinue:
| $summary = $comments->Summary;|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|SetComment|
**
LJCDocDataGen.ProcessFunction summary:
|Sets the XML comment value.|
Syntax:
|public function SetComment(string $line, ?string $codeFileSpec = null)|
Returns
Remarks
Code:
| require_once &quot;LJCCommentsLib.php&quot;;
 
 $line = &quot;/// &amp;amp;lt;summary&amp;amp;gt;A summary comment.&amp;amp;lt;/summary&amp;amp;gt;&quot;;
 $comments = new LJCComments();
 $comments-&gt;SetComment($line, &quot;SourceFile.php&quot;);
 $summary = $comments-&gt;Summary;|
---------------
LJCComments.SetComment line:
|		/// <summary>The example Code.</summary>
|
LJCComments.SetComment comment:
|The example Code.|
PropertyName:
|$Code|
**
LJCDocDataGen.ProcessProperty summary:
|The example Code.|
Syntax:
|public ?string $Code;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The current tag name.</summary>
|
LJCComments.SetComment comment:
|The current tag name.|
PropertyName:
|$CurrentTagName|
**
LJCDocDataGen.ProcessProperty summary:
|The current tag name.|
Syntax:
|public ?string $CurrentTagName;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Param comments.</summary>
|
LJCComments.SetComment comment:
|The Param comments.|
PropertyName:
|$Params|
**
LJCDocDataGen.ProcessProperty summary:
|The Param comments.|
Syntax:
|public ?LJCDocDataParams $Params;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Remark comment.</summary>
|
LJCComments.SetComment comment:
|The Remark comment.|
PropertyName:
|$Remarks|
**
LJCDocDataGen.ProcessProperty summary:
|The Remark comment.|
Syntax:
|public ?string $Remarks;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Returns comment.</summary>
|
LJCComments.SetComment comment:
|The Returns comment.|
PropertyName:
|$Returns|
**
LJCDocDataGen.ProcessProperty summary:
|The Returns comment.|
Syntax:
|public ?string $Returns;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Summary comment.</summary>
|
LJCComments.SetComment comment:
|The Summary comment.|
PropertyName:
|$Summary|
**
LJCDocDataGen.ProcessProperty summary:
|The Summary comment.|
Syntax:
|public ?string $Summary;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Code File base (Library) name.</summary>
|
LJCComments.SetComment comment:
|The Code File base (Library) name.|
PropertyName:
|$LibName|
**
LJCDocDataGen.ProcessProperty summary:
|The Code File base (Library) name.|
Syntax:
|public ?string $LibName;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|	/// <include path='items/LJCDocDataGenLib/*' file='Doc/LJCDocDataGenLib.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// Contains Classes to create DocData from a PHP source file.
|
LJCComments.SetComment isContinue:
| Contains Classes to create DocData from a PHP source file.
|
---------------
LJCComments.SetComment line:
|/// </summary>|
LJCComments.SetComment isContinue
---------------
LJCComments.SetComment line:
|/// <remarks>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// Contains classes for these functions:&lt;br /&gt;
|
LJCComments.SetComment isContinue:
| Contains classes for these functions:&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// - Extract XML Comments from a PHP File&lt;br /&gt;
|
LJCComments.SetComment isContinue:
| - Extract XML Comments from a PHP File&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// - Extract XML Comments from Include XML files
|
LJCComments.SetComment isContinue:
| - Extract XML Comments from Include XML files
|
---------------
LJCComments.SetComment line:
|/// </remarks>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
**
LJCDocDataGen.ProcessLib summary:
|
 Contains Classes to create DocData from a PHP source file.
|
Remarks:
|
 Contains classes for these functions:&amp;lt;br /&amp;gt;
 - Extract XML Comments from a PHP File&amp;lt;br /&amp;gt;
 - Extract XML Comments from Include XML files
|
---------------
LJCComments.SetComment line:
|	/// <summary>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|	///		Provides methods to generate DocData XML files from a code file.
|
LJCComments.SetComment isContinue:
|		Provides methods to generate DocData XML files from a code file.
|
---------------
LJCComments.SetComment line:
|	/// </summary>
|
LJCComments.SetComment isContinue
ClassName:
|LJCDocDataGen|
**
LJCDocDataGen.ProcessClass summary:
|
		Provides methods to generate DocData XML files from a code file.
|
Syntax:
|class LJCDocDataGen|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <summary>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|		///		Initializes a class instance.
|
LJCComments.SetComment isContinue:
|		Initializes a class instance.
|
---------------
LJCComments.SetComment line:
|		///		And More.
|
LJCComments.SetComment isContinue:
|		And More.
|
---------------
LJCComments.SetComment line:
|		/// </summary>
|
LJCComments.SetComment isContinue
FunctionName:
|construct|
**
LJCDocDataGen.ProcessFunction summary:
|
		Initializes a class instance.
		And More.
|
Syntax:
|public function __construct()|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/CreateDocXMLString/*' file='Doc/LJCDocDataGen.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Creates and optionally writes the DocData XML.</summary>|
LJCComments.SetComment comment:
|Creates and optionally writes the DocData XML.|
---------------
LJCComments.SetComment line:
|///     <param name="$codeFileSpec">The code file specification.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$writeXML">Indicates if the XML file is to be written.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$outputPath">The output path.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The DocData XML string.</returns>|
LJCComments.SetComment comment:
|The DocData XML string.|
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// require_once "LJCDocDataGenLib.php";|
LJCComments.SetComment isContinue:
| require_once "LJCDocDataGenLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $docDataGen = new LJCDocDataGen();|
LJCComments.SetComment isContinue:
| $docDataGen = new LJCDocDataGen();|
---------------
LJCComments.SetComment line:
|/// $xmlString = $docDataGen->CreateDocXMLString("SourceFile.php");|
LJCComments.SetComment isContinue:
| $xmlString = $docDataGen->CreateDocXMLString("SourceFile.php");|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|CreateDocDataXMLString|
**
LJCDocDataGen.ProcessFunction summary:
|Creates and optionally writes the DocData XML.|
Syntax:
|public function CreateDocDataXMLString(string $codeFileSpec, bool $writeXML = false&lt;br /&gt;, string $outputPath = null) : ?string|
Returns:
|The DocData XML string.|
Remarks
Code:
| require_once &quot;LJCDocDataGenLib.php&quot;;
 
 $docDataGen = new LJCDocDataGen();
 $xmlString = $docDataGen-&gt;CreateDocXMLString(&quot;SourceFile.php&quot;);|
---------------
LJCComments.SetComment line:
|		/// <include path='items/ProcessCode/*' file='Doc/LJCDocDataGen.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Generates the Doc data for the file.</summary>|
LJCComments.SetComment comment:
|Generates the Doc data for the file.|
---------------
LJCComments.SetComment line:
|///     <param name="$codeFileSpec">The code file spec.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The DocData XML string.</returns>|
LJCComments.SetComment comment:
|The DocData XML string.|
LJCComments.SetComment comment
FunctionName:
|ProcessCode|
**
LJCDocDataGen.ProcessFunction summary:
|Generates the Doc data for the file.|
Syntax:
|public function ProcessCode(string $codeFileSpec) : ?string|
Returns:
|The DocData XML string.|
Remarks
Code
---------------
LJCComments.SetComment line:
|	/// <include path='items/LJCDocDataLib/*' file='Doc/LJCDocDataLib.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// Contains classes to represent and generate DocData XML.
|
LJCComments.SetComment isContinue:
| Contains classes to represent and generate DocData XML.
|
---------------
LJCComments.SetComment line:
|/// </summary>|
LJCComments.SetComment isContinue
---------------
LJCComments.SetComment line:
|/// <remarks>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// DocData XML data is generated from the PHP source files.
|
LJCComments.SetComment isContinue:
| DocData XML data is generated from the PHP source files.
|
---------------
LJCComments.SetComment line:
|/// &lt;p&gt;
|
LJCComments.SetComment isContinue:
| &lt;p&gt;
|
---------------
LJCComments.SetComment line:
|/// Contains classes for these functions:&lt;br /&gt;
|
LJCComments.SetComment isContinue:
| Contains classes for these functions:&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// - Represent a DocData Object Tree&lt;br /&gt;
|
LJCComments.SetComment isContinue:
| - Represent a DocData Object Tree&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// - Serialize and Deserialize DocData XML
|
LJCComments.SetComment isContinue:
| - Serialize and Deserialize DocData XML
|
---------------
LJCComments.SetComment line:
|/// &lt;/p&gt;
|
LJCComments.SetComment isContinue:
| &lt;/p&gt;
|
---------------
LJCComments.SetComment line:
|/// &lt;pre&gt;DocData Object Graph:&lt;br /&gt;
|
LJCComments.SetComment isContinue:
| &lt;pre&gt;DocData Object Graph:&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// LJCDocDataFile&lt;br /&gt;
|
LJCComments.SetComment isContinue:
| LJCDocDataFile&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///   Classes - LJCDocDataClasses&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|   Classes - LJCDocDataClasses&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///     LJCDocDataClass&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|     LJCDocDataClass&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///       Methods - LJCDocDataMethods&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|       Methods - LJCDocDataMethods&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///         LJCDocDataMethod&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|         LJCDocDataMethod&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///           Params - LJCDocDataParams&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|           Params - LJCDocDataParams&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///             LJCDocDataParam&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|             LJCDocDataParam&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///       Properties - LJCDocDataProperties&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|       Properties - LJCDocDataProperties&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///         LJCDocDataProperty&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|         LJCDocDataProperty&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///   Functions - LJCDocDataMethods&lt;/pre&gt;
|
LJCComments.SetComment isContinue:
|   Functions - LJCDocDataMethods&lt;/pre&gt;
|
---------------
LJCComments.SetComment line:
|/// </remarks>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
**
LJCDocDataGen.ProcessLib summary:
|
 Contains classes to represent and generate DocData XML.
|
Remarks:
|
 DocData XML data is generated from the PHP source files.
 &amp;lt;p&amp;gt;
 Contains classes for these functions:&amp;lt;br /&amp;gt;
 - Represent a DocData Object Tree&amp;lt;br /&amp;gt;
 - Serialize and Deserialize DocData XML
 &amp;lt;/p&amp;gt;
 &amp;lt;pre&amp;gt;DocData Object Graph:&amp;lt;br /&amp;gt;
 LJCDocDataFile&amp;lt;br /&amp;gt;
   Classes - LJCDocDataClasses&amp;lt;br /&amp;gt;
     LJCDocDataClass&amp;lt;br /&amp;gt;
       Methods - LJCDocDataMethods&amp;lt;br /&amp;gt;
         LJCDocDataMethod&amp;lt;br /&amp;gt;
           Params - LJCDocDataParams&amp;lt;br /&amp;gt;
             LJCDocDataParam&amp;lt;br /&amp;gt;
       Properties - LJCDocDataProperties&amp;lt;br /&amp;gt;
         LJCDocDataProperty&amp;lt;br /&amp;gt;
   Functions - LJCDocDataMethods&amp;lt;/pre&amp;gt;
|
---------------
LJCComments.SetComment line:
|	/// <summary>Represents a DocData Class.</summary>
|
LJCComments.SetComment comment:
|Represents a DocData Class.|
ClassName:
|LJCDocDataClass|
**
LJCDocDataGen.ProcessClass summary:
|Represents a DocData Class.|
Syntax:
|class LJCDocDataClass|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/construct/*' file='Doc/LJCDocDataClass.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Initializes a class instance.</summary>|
LJCComments.SetComment comment:
|Initializes a class instance.|
---------------
LJCComments.SetComment line:
|///     <param name="$name">The Name value.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$summary">The Summary value.</param>|
LJCComments.SetComment comment
LJCComments.SetComment comment
FunctionName:
|construct|
**
LJCDocDataGen.ProcessFunction summary:
|Initializes a class instance.|
Syntax:
|public function __construct(string $name, ?string $summary = null)|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/Clone/*' file='Doc/LJCDocDataClass.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Creates a Clone of the current object.</summary>|
LJCComments.SetComment comment:
|Creates a Clone of the current object.|
---------------
LJCComments.SetComment line:
|/// <returns>The cloned object.</returns>|
LJCComments.SetComment comment:
|The cloned object.|
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// require_once "LJCDocDataLib.php";|
LJCComments.SetComment isContinue:
| require_once "LJCDocDataLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $docDataClass = new LJCDocDataClass("ClassName", "Summary Text");|
LJCComments.SetComment isContinue:
| $docDataClass = new LJCDocDataClass("ClassName", "Summary Text");|
---------------
LJCComments.SetComment line:
|/// $newDocDataClass = $docDataClass->Clone();|
LJCComments.SetComment isContinue:
| $newDocDataClass = $docDataClass->Clone();|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|Clone|
**
LJCDocDataGen.ProcessFunction summary:
|Creates a Clone of the current object.|
Syntax:
|public function Clone() : self|
Returns:
|The cloned object.|
Remarks
Code:
| require_once &quot;LJCDocDataLib.php&quot;;
 
 $docDataClass = new LJCDocDataClass(&quot;ClassName&quot;, &quot;Summary Text&quot;);
 $newDocDataClass = $docDataClass-&gt;Clone();|
---------------
LJCComments.SetComment line:
|		/// <summary>The Code value.</summary>
|
LJCComments.SetComment comment:
|The Code value.|
PropertyName:
|$Code|
**
LJCDocDataGen.ProcessProperty summary:
|The Code value.|
Syntax:
|public ?string $Code;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Method array.</summary>
|
LJCComments.SetComment comment:
|The Method array.|
PropertyName:
|$Methods|
**
LJCDocDataGen.ProcessProperty summary:
|The Method array.|
Syntax:
|public ?LJCDocDataMethods $Methods;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Name value.</summary>
|
LJCComments.SetComment comment:
|The Name value.|
PropertyName:
|$Name|
**
LJCDocDataGen.ProcessProperty summary:
|The Name value.|
Syntax:
|public ?string $Name;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Property array.</summary>
|
LJCComments.SetComment comment:
|The Property array.|
PropertyName:
|$Properties|
**
LJCDocDataGen.ProcessProperty summary:
|The Property array.|
Syntax:
|public ?LJCDocDataProperties $Properties;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Remarks value.</summary>
|
LJCComments.SetComment comment:
|The Remarks value.|
PropertyName:
|$Remarks|
**
LJCDocDataGen.ProcessProperty summary:
|The Remarks value.|
Syntax:
|public ?string $Remarks;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Summary value.</summary>
|
LJCComments.SetComment comment:
|The Summary value.|
PropertyName:
|$Summary|
**
LJCDocDataGen.ProcessProperty summary:
|The Summary value.|
Syntax:
|public ?string $Summary;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|	/// <summary>Represents a collection of objects.</summary>
|
LJCComments.SetComment comment:
|Represents a collection of objects.|
ClassName:
|LJCDocDataClasses|
**
LJCDocDataGen.ProcessClass summary:
|Represents a collection of objects.|
Syntax:
|class LJCDocDataClasses extends LJCCollectionBase|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/AddObject/*' file='../../CommonDoc/PHPCollection.xml'/>
|
LJCComments.SetComment comment
FunctionName:
|AddObject|
**
LJCDocDataGen.ProcessFunction summary
Syntax:
|public function AddObject(LJCDocDataClass $item, $key = null)|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <summary>Creates an object clone.</summary>
|
LJCComments.SetComment comment:
|Creates an object clone.|
FunctionName:
|Clone|
**
LJCDocDataGen.ProcessFunction summary:
|Creates an object clone.|
Syntax:
|public function Clone() : self|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/Get/*' file='../../CommonDoc/PHPCollection.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Get the item by Key value.</summary>|
LJCComments.SetComment comment:
|Get the item by Key value.|
---------------
LJCComments.SetComment line:
|///     <param name="$key">The element key.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$throwError">Indicates if an error should be thrown if the key is not found.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The object with the matching key value.</returns>|
LJCComments.SetComment comment:
|The object with the matching key value.|
LJCComments.SetComment comment
FunctionName:
|Get|
**
LJCDocDataGen.ProcessFunction summary:
|Get the item by Key value.|
Syntax:
|public function Get($key, bool $throwError = true) : ?LJCDocDataClass|
Returns:
|The object with the matching key value.|
Remarks
Code
---------------
LJCComments.SetComment line:
|	/// <include path='items/LJCDocDataFile/*' file='Doc/LJCDocDataFile.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// Represents DocData Lib File XML Comments.
|
LJCComments.SetComment isContinue:
| Represents DocData Lib File XML Comments.
|
---------------
LJCComments.SetComment line:
|/// </summary>|
LJCComments.SetComment isContinue
---------------
LJCComments.SetComment line:
|/// <remarks>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// The DocData XML is intended to contain the XML Comments based on the PHP
|
LJCComments.SetComment isContinue:
| The DocData XML is intended to contain the XML Comments based on the PHP
|
---------------
LJCComments.SetComment line:
|/// file structure of Classes, Methods and Properties.
|
LJCComments.SetComment isContinue:
| file structure of Classes, Methods and Properties.
|
---------------
LJCComments.SetComment line:
|/// &lt;br /&gt;
|
LJCComments.SetComment isContinue:
| &lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// &lt;pre&gt; &amp;lt;LJCDocDataFile&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
| &lt;pre&gt; &amp;lt;LJCDocDataFile&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///   &amp;lt;Name/&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|   &amp;lt;Name/&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///   &amp;lt;Summary/&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|   &amp;lt;Summary/&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///   &amp;lt;Remarks/&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|   &amp;lt;Remarks/&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///   &amp;lt;Classes&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|   &amp;lt;Classes&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///     &amp;lt;Class&gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|     &amp;lt;Class&gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///       &amp;lt;Name/&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|       &amp;lt;Name/&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///       &amp;lt;Summary/&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|       &amp;lt;Summary/&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///       &amp;lt;Remarks/&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|       &amp;lt;Remarks/&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///       &amp;lt;Methods&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|       &amp;lt;Methods&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///         &amp;lt;Method&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|         &amp;lt;Method&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///           &amp;lt;Name/&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|           &amp;lt;Name/&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///           &amp;lt;Summary/&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|           &amp;lt;Summary/&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///           &amp;lt;Params&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|           &amp;lt;Params&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///             &amp;lt;Param&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|             &amp;lt;Param&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///               &amp;lt;Name/&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|               &amp;lt;Name/&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///               &amp;lt;Summary/&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|               &amp;lt;Summary/&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///             &amp;lt;/Param&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|             &amp;lt;/Param&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///           &amp;lt;/Params&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|           &amp;lt;/Params&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///           &amp;lt;Remarks/&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|           &amp;lt;Remarks/&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///           &amp;lt;Returns/&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|           &amp;lt;Returns/&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///           &amp;lt;Syntax/&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|           &amp;lt;Syntax/&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///           &amp;lt;Code/&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|           &amp;lt;Code/&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///         &amp;lt;/Method&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|         &amp;lt;/Method&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///       &amp;lt;/Methods&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|       &amp;lt;/Methods&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///       &amp;lt;Properties&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|       &amp;lt;Properties&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///         &amp;lt;Property&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|         &amp;lt;Property&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///           &amp;lt;Name/&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|           &amp;lt;Name/&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///           &amp;lt;Summary/&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|           &amp;lt;Summary/&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///           &amp;lt;Syntax/&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|           &amp;lt;Syntax/&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///         &amp;lt;/Property&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|         &amp;lt;/Property&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///       &amp;lt;/Properties&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|       &amp;lt;/Properties&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///     &amp;lt;/Class&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|     &amp;lt;/Class&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///   &amp;lt;/Classes&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|   &amp;lt;/Classes&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// &amp;lt;/LJCDocDataFile&amp;gt;&lt;/pre&gt;
|
LJCComments.SetComment isContinue:
| &amp;lt;/LJCDocDataFile&amp;gt;&lt;/pre&gt;
|
---------------
LJCComments.SetComment line:
|/// </remarks>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
ClassName:
|LJCDocDataFile|
**
LJCDocDataGen.ProcessClass summary:
|
 Represents DocData Lib File XML Comments.
|
Syntax:
|class LJCDocDataFile|
Remarks:
|
 The DocData XML is intended to contain the XML Comments based on the PHP
 file structure of Classes, Methods and Properties.
 &amp;lt;br /&amp;gt;
 &amp;lt;pre&amp;gt; &amp;amp;lt;LJCDocDataFile&amp;amp;gt;&amp;lt;br /&amp;gt;
   &amp;amp;lt;Name/&amp;amp;gt;&amp;lt;br /&amp;gt;
   &amp;amp;lt;Summary/&amp;amp;gt;&amp;lt;br /&amp;gt;
   &amp;amp;lt;Remarks/&amp;amp;gt;&amp;lt;br /&amp;gt;
   &amp;amp;lt;Classes&amp;amp;gt;&amp;lt;br /&amp;gt;
     &amp;amp;lt;Class&amp;gt;&amp;lt;br /&amp;gt;
       &amp;amp;lt;Name/&amp;amp;gt;&amp;lt;br /&amp;gt;
       &amp;amp;lt;Summary/&amp;amp;gt;&amp;lt;br /&amp;gt;
       &amp;amp;lt;Remarks/&amp;amp;gt;&amp;lt;br /&amp;gt;
       &amp;amp;lt;Methods&amp;amp;gt;&amp;lt;br /&amp;gt;
         &amp;amp;lt;Method&amp;amp;gt;&amp;lt;br /&amp;gt;
           &amp;amp;lt;Name/&amp;amp;gt;&amp;lt;br /&amp;gt;
           &amp;amp;lt;Summary/&amp;amp;gt;&amp;lt;br /&amp;gt;
           &amp;amp;lt;Params&amp;amp;gt;&amp;lt;br /&amp;gt;
             &amp;amp;lt;Param&amp;amp;gt;&amp;lt;br /&amp;gt;
               &amp;amp;lt;Name/&amp;amp;gt;&amp;lt;br /&amp;gt;
               &amp;amp;lt;Summary/&amp;amp;gt;&amp;lt;br /&amp;gt;
             &amp;amp;lt;/Param&amp;amp;gt;&amp;lt;br /&amp;gt;
           &amp;amp;lt;/Params&amp;amp;gt;&amp;lt;br /&amp;gt;
           &amp;amp;lt;Remarks/&amp;amp;gt;&amp;lt;br /&amp;gt;
           &amp;amp;lt;Returns/&amp;amp;gt;&amp;lt;br /&amp;gt;
           &amp;amp;lt;Syntax/&amp;amp;gt;&amp;lt;br /&amp;gt;
           &amp;amp;lt;Code/&amp;amp;gt;&amp;lt;br /&amp;gt;
         &amp;amp;lt;/Method&amp;amp;gt;&amp;lt;br /&amp;gt;
       &amp;amp;lt;/Methods&amp;amp;gt;&amp;lt;br /&amp;gt;
       &amp;amp;lt;Properties&amp;amp;gt;&amp;lt;br /&amp;gt;
         &amp;amp;lt;Property&amp;amp;gt;&amp;lt;br /&amp;gt;
           &amp;amp;lt;Name/&amp;amp;gt;&amp;lt;br /&amp;gt;
           &amp;amp;lt;Summary/&amp;amp;gt;&amp;lt;br /&amp;gt;
           &amp;amp;lt;Syntax/&amp;amp;gt;&amp;lt;br /&amp;gt;
         &amp;amp;lt;/Property&amp;amp;gt;&amp;lt;br /&amp;gt;
       &amp;amp;lt;/Properties&amp;amp;gt;&amp;lt;br /&amp;gt;
     &amp;amp;lt;/Class&amp;amp;gt;&amp;lt;br /&amp;gt;
   &amp;amp;lt;/Classes&amp;amp;gt;&amp;lt;br /&amp;gt;
 &amp;amp;lt;/LJCDocDataFile&amp;amp;gt;&amp;lt;/pre&amp;gt;
|
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/Deserialize/*' file='Doc/LJCDocDataFile.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Deserializes the data from an LJCDocDataFile XML file.</summary>|
LJCComments.SetComment comment:
|Deserializes the data from an LJCDocDataFile XML file.|
---------------
LJCComments.SetComment line:
|///     <param name="$xmlFileSpec">The source XML file specification.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The LJCDocDataFile object.</returns>|
LJCComments.SetComment comment:
|The LJCDocDataFile object.|
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// require_once "LJCDocDataLib.php";|
LJCComments.SetComment isContinue:
| require_once "LJCDocDataLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $docDataFile = LJCDocDataFile::Deserialize("DocData.xml");|
LJCComments.SetComment isContinue:
| $docDataFile = LJCDocDataFile::Deserialize("DocData.xml");|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|Deserialize|
**
LJCDocDataGen.ProcessFunction summary:
|Deserializes the data from an LJCDocDataFile XML file.|
Syntax:
|public static function Deserialize(string $xmlFileSpec) : LJCDocDataFile|
Returns:
|The LJCDocDataFile object.|
Remarks
Code:
| require_once &quot;LJCDocDataLib.php&quot;;
 
 $docDataFile = LJCDocDataFile::Deserialize(&quot;DocData.xml&quot;);|
---------------
LJCComments.SetComment line:
|		/// <include path='items/DeserializeString/*' file='Doc/LJCDocDataFile.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Deserializes the data from an LJCDocDataFile XML string.</summary>|
LJCComments.SetComment comment:
|Deserializes the data from an LJCDocDataFile XML string.|
---------------
LJCComments.SetComment line:
|///     <param name="$xmlString">The XML string.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The LJCDocDataFile object.</returns>|
LJCComments.SetComment comment:
|The LJCDocDataFile object.|
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// require_once "LJCDocDataLib.php";|
LJCComments.SetComment isContinue:
| require_once "LJCDocDataLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $xmlString = readfile("DocData.xml");|
LJCComments.SetComment isContinue:
| $xmlString = readfile("DocData.xml");|
---------------
LJCComments.SetComment line:
|/// $docDataFile = LJCDocDataFile::DeserializeString($xmlString);|
LJCComments.SetComment isContinue:
| $docDataFile = LJCDocDataFile::DeserializeString($xmlString);|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|DeserializeString|
**
LJCDocDataGen.ProcessFunction summary:
|Deserializes the data from an LJCDocDataFile XML string.|
Syntax:
|public static function DeserializeString(string $xmlString) : LJCDocDataFile|
Returns:
|The LJCDocDataFile object.|
Remarks
Code:
| require_once &quot;LJCDocDataLib.php&quot;;
 
 $xmlString = readfile(&quot;DocData.xml&quot;);
 $docDataFile = LJCDocDataFile::DeserializeString($xmlString);|
---------------
LJCComments.SetComment line:
|		/// <include path='items/GetProperties/*' file='Doc/LJCDocDataFile.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Deserialize Properties from the Class node.</summary>|
LJCComments.SetComment comment:
|Deserialize Properties from the Class node.|
---------------
LJCComments.SetComment line:
|///     <param name="$classNode"></param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The LJCDocDataProperties object.</returns>|
LJCComments.SetComment comment:
|The LJCDocDataProperties object.|
LJCComments.SetComment comment
FunctionName:
|GetProperties|
**
LJCDocDataGen.ProcessFunction summary:
|Deserialize Properties from the Class node.|
Syntax:
|public static function GetProperties(SimpleXMLElement $classNode)|
Returns:
|The LJCDocDataProperties object.|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/construct/*' file='Doc/LJCDocDataFile.xml'/>
|
LJCComments.SetComment comment
FunctionName:
|construct|
**
LJCDocDataGen.ProcessFunction summary
Syntax:
|public function __construct(string $name, ?string $summary = null)|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/Clone/*' file='../../CommonDoc/PHPDataClass.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Creates a Clone of the current object.</summary>|
LJCComments.SetComment comment:
|Creates a Clone of the current object.|
---------------
LJCComments.SetComment line:
|/// <returns>The cloned object.</returns>|
LJCComments.SetComment comment:
|The cloned object.|
LJCComments.SetComment comment
FunctionName:
|Clone|
**
LJCDocDataGen.ProcessFunction summary:
|Creates a Clone of the current object.|
Syntax:
|public function Clone() : self|
Returns:
|The cloned object.|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/Serialize/*' file='Doc/LJCDocDataFile.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Writes the serialized XML.</summary>|
LJCComments.SetComment comment:
|Writes the serialized XML.|
---------------
LJCComments.SetComment line:
|///     <param name="$xmlFileSpec">The source XML file specification.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// require_once "LJCDocDataLib.php";|
LJCComments.SetComment isContinue:
| require_once "LJCDocDataLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $docDataFile = LJCDocDataFile::Deserialize("DocData.xml");|
LJCComments.SetComment isContinue:
| $docDataFile = LJCDocDataFile::Deserialize("DocData.xml");|
---------------
LJCComments.SetComment line:
|/// $docDataFile->Serialize("NewDocData.xml");|
LJCComments.SetComment isContinue:
| $docDataFile->Serialize("NewDocData.xml");|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|Serialize|
**
LJCDocDataGen.ProcessFunction summary:
|Writes the serialized XML.|
Syntax:
|public function Serialize(string $xmlFileSpec) : void|
Returns
Remarks
Code:
| require_once &quot;LJCDocDataLib.php&quot;;
 
 $docDataFile = LJCDocDataFile::Deserialize(&quot;DocData.xml&quot;);
 $docDataFile-&gt;Serialize(&quot;NewDocData.xml&quot;);|
---------------
LJCComments.SetComment line:
|		/// <include path='items/SerializeToString/*' file='Doc/LJCDocDataFile.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// require_once "LJCDocDataLib.php";|
LJCComments.SetComment isContinue:
| require_once "LJCDocDataLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $docDataFile = LJCDocDataFile::Deserialize("DocData.xml");|
LJCComments.SetComment isContinue:
| $docDataFile = LJCDocDataFile::Deserialize("DocData.xml");|
---------------
LJCComments.SetComment line:
|/// $xmlString = $docDataFile->SerializeToString();|
LJCComments.SetComment isContinue:
| $xmlString = $docDataFile->SerializeToString();|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|SerializeToString|
**
LJCDocDataGen.ProcessFunction summary
Syntax:
|public function SerializeToString() : string|
Returns
Remarks
Code:
| require_once &quot;LJCDocDataLib.php&quot;;
 
 $docDataFile = LJCDocDataFile::Deserialize(&quot;DocData.xml&quot;);
 $xmlString = $docDataFile-&gt;SerializeToString();|
---------------
LJCComments.SetComment line:
|		/// <summary>The Class collection.</summary>
|
LJCComments.SetComment comment:
|The Class collection.|
PropertyName:
|$Classes|
**
LJCDocDataGen.ProcessProperty summary:
|The Class collection.|
Syntax:
|public ?LJCDocDataClasses $Classes;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Function array.</summary>
|
LJCComments.SetComment comment:
|The Function array.|
PropertyName:
|$Functions|
**
LJCDocDataGen.ProcessProperty summary:
|The Function array.|
Syntax:
|public ?LJCDocDataMethods $Functions;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Name value.</summary>
|
LJCComments.SetComment comment:
|The Name value.|
PropertyName:
|$Name|
**
LJCDocDataGen.ProcessProperty summary:
|The Name value.|
Syntax:
|public string $Name;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Name value.</summary>
|
LJCComments.SetComment comment:
|The Name value.|
PropertyName:
|$Remarks|
**
LJCDocDataGen.ProcessProperty summary:
|The Name value.|
Syntax:
|public ?string $Remarks;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Summary value.</summary>
|
LJCComments.SetComment comment:
|The Summary value.|
PropertyName:
|$Summary|
**
LJCDocDataGen.ProcessProperty summary:
|The Summary value.|
Syntax:
|public ?string $Summary;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|	/// <summary>Represents a DocData Function.</summary>
|
LJCComments.SetComment comment:
|Represents a DocData Function.|
ClassName:
|LJCDocDataMethod|
**
LJCDocDataGen.ProcessClass summary:
|Represents a DocData Function.|
Syntax:
|class LJCDocDataMethod|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/construct/*' file='Doc/LJCDocDataMethod.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Initializes a class instance.</summary>|
LJCComments.SetComment comment:
|Initializes a class instance.|
---------------
LJCComments.SetComment line:
|///     <param name="$name">The Name value.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$summary">The Summary value.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$returns">The Returns value.</param>|
LJCComments.SetComment comment
LJCComments.SetComment comment
FunctionName:
|construct|
**
LJCDocDataGen.ProcessFunction summary:
|Initializes a class instance.|
Syntax:
|public function __construct(string $name, ?string $summary = null&lt;br /&gt;, ?string $returns = null)|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/Clone/*' file='../../CommonDoc/PHPDataClass.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Creates a Clone of the current object.</summary>|
LJCComments.SetComment comment:
|Creates a Clone of the current object.|
---------------
LJCComments.SetComment line:
|/// <returns>The cloned object.</returns>|
LJCComments.SetComment comment:
|The cloned object.|
LJCComments.SetComment comment
FunctionName:
|Clone|
**
LJCDocDataGen.ProcessFunction summary:
|Creates a Clone of the current object.|
Syntax:
|public function Clone() : self|
Returns:
|The cloned object.|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <summary>The Code value.</summary>
|
LJCComments.SetComment comment:
|The Code value.|
PropertyName:
|$Code|
**
LJCDocDataGen.ProcessProperty summary:
|The Code value.|
Syntax:
|public ?string $Code;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Name value.</summary>
|
LJCComments.SetComment comment:
|The Name value.|
PropertyName:
|$Name|
**
LJCDocDataGen.ProcessProperty summary:
|The Name value.|
Syntax:
|public string $Name;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Param array.</summary>
|
LJCComments.SetComment comment:
|The Param array.|
PropertyName:
|$Params|
**
LJCDocDataGen.ProcessProperty summary:
|The Param array.|
Syntax:
|public ?LJCDocDataParams $Params;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Remarks value.</summary>
|
LJCComments.SetComment comment:
|The Remarks value.|
PropertyName:
|$Remarks|
**
LJCDocDataGen.ProcessProperty summary:
|The Remarks value.|
Syntax:
|public ?string $Remarks;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Returns value.</summary>
|
LJCComments.SetComment comment:
|The Returns value.|
PropertyName:
|$Returns|
**
LJCDocDataGen.ProcessProperty summary:
|The Returns value.|
Syntax:
|public ?string $Returns;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Summary value.</summary>
|
LJCComments.SetComment comment:
|The Summary value.|
PropertyName:
|$Summary|
**
LJCDocDataGen.ProcessProperty summary:
|The Summary value.|
Syntax:
|public ?string $Summary;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Syntax value.</summary>
|
LJCComments.SetComment comment:
|The Syntax value.|
PropertyName:
|$Syntax|
**
LJCDocDataGen.ProcessProperty summary:
|The Syntax value.|
Syntax:
|public ?string $Syntax;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|	/// <summary>Represents a collection of objects.</summary>
|
LJCComments.SetComment comment:
|Represents a collection of objects.|
ClassName:
|LJCDocDataMethods|
**
LJCDocDataGen.ProcessClass summary:
|Represents a collection of objects.|
Syntax:
|class LJCDocDataMethods extends LJCCollectionBase|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/AddObject/*' file='../../CommonDoc/PHPCollection.xml'/>
|
LJCComments.SetComment comment
FunctionName:
|AddObject|
**
LJCDocDataGen.ProcessFunction summary
Syntax:
|public function AddObject(LJCDocDataMethod $item, $key = null)|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <summary>Creates an object clone.</summary>
|
LJCComments.SetComment comment:
|Creates an object clone.|
FunctionName:
|Clone|
**
LJCDocDataGen.ProcessFunction summary:
|Creates an object clone.|
Syntax:
|public function Clone() : self|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/Get/*' file='../../CommonDoc/PHPCollection.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Get the item by Key value.</summary>|
LJCComments.SetComment comment:
|Get the item by Key value.|
---------------
LJCComments.SetComment line:
|///     <param name="$key">The element key.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$throwError">Indicates if an error should be thrown if the key is not found.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The object with the matching key value.</returns>|
LJCComments.SetComment comment:
|The object with the matching key value.|
LJCComments.SetComment comment
FunctionName:
|Get|
**
LJCDocDataGen.ProcessFunction summary:
|Get the item by Key value.|
Syntax:
|public function Get($key, bool $throwError = true) : ?LJCDocDataMethod|
Returns:
|The object with the matching key value.|
Remarks
Code
---------------
LJCComments.SetComment line:
|	/// <summary>Represents a DocData Parameter.</summary>
|
LJCComments.SetComment comment:
|Represents a DocData Parameter.|
ClassName:
|LJCDocDataParam|
**
LJCDocDataGen.ProcessClass summary:
|Represents a DocData Parameter.|
Syntax:
|class LJCDocDataParam|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/construct/*' file='Doc/LJCDocDataClass.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Initializes a class instance.</summary>|
LJCComments.SetComment comment:
|Initializes a class instance.|
---------------
LJCComments.SetComment line:
|///     <param name="$name">The Name value.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$summary">The Summary value.</param>|
LJCComments.SetComment comment
LJCComments.SetComment comment
FunctionName:
|construct|
**
LJCDocDataGen.ProcessFunction summary:
|Initializes a class instance.|
Syntax:
|public function __construct(string $name, ?string $summary = null)|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/Clone/*' file='../../CommonDoc/PHPDataClass.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Creates a Clone of the current object.</summary>|
LJCComments.SetComment comment:
|Creates a Clone of the current object.|
---------------
LJCComments.SetComment line:
|/// <returns>The cloned object.</returns>|
LJCComments.SetComment comment:
|The cloned object.|
LJCComments.SetComment comment
FunctionName:
|Clone|
**
LJCDocDataGen.ProcessFunction summary:
|Creates a Clone of the current object.|
Syntax:
|public function Clone() : self|
Returns:
|The cloned object.|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <summary>The Name value.</summary>
|
LJCComments.SetComment comment:
|The Name value.|
PropertyName:
|$Name|
**
LJCDocDataGen.ProcessProperty summary:
|The Name value.|
Syntax:
|public string $Name;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Summary value.</summary>
|
LJCComments.SetComment comment:
|The Summary value.|
PropertyName:
|$Summary|
**
LJCDocDataGen.ProcessProperty summary:
|The Summary value.|
Syntax:
|public ?string $Summary;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|	/// <summary>Represents a collection of objects.</summary>
|
LJCComments.SetComment comment:
|Represents a collection of objects.|
ClassName:
|LJCDocDataParams|
**
LJCDocDataGen.ProcessClass summary:
|Represents a collection of objects.|
Syntax:
|class LJCDocDataParams extends LJCCollectionBase|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/AddObject/*' file='../../CommonDoc/PHPCollection.xml'/>
|
LJCComments.SetComment comment
FunctionName:
|AddObject|
**
LJCDocDataGen.ProcessFunction summary
Syntax:
|public function AddObject(LJCDocDataParam $item, $key = null)|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <summary>Creates an object clone.</summary>
|
LJCComments.SetComment comment:
|Creates an object clone.|
FunctionName:
|Clone|
**
LJCDocDataGen.ProcessFunction summary:
|Creates an object clone.|
Syntax:
|public function Clone() : self|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/Get/*' file='../../CommonDoc/PHPCollection.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Get the item by Key value.</summary>|
LJCComments.SetComment comment:
|Get the item by Key value.|
---------------
LJCComments.SetComment line:
|///     <param name="$key">The element key.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$throwError">Indicates if an error should be thrown if the key is not found.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The object with the matching key value.</returns>|
LJCComments.SetComment comment:
|The object with the matching key value.|
LJCComments.SetComment comment
FunctionName:
|Get|
**
LJCDocDataGen.ProcessFunction summary:
|Get the item by Key value.|
Syntax:
|public function Get($key, bool $throwError = true) : ?LJCDocDataParam|
Returns:
|The object with the matching key value.|
Remarks
Code
---------------
LJCComments.SetComment line:
|	/// <summary>Represents a DocData Property.</summary>
|
LJCComments.SetComment comment:
|Represents a DocData Property.|
ClassName:
|LJCDocDataProperty|
**
LJCDocDataGen.ProcessClass summary:
|Represents a DocData Property.|
Syntax:
|class LJCDocDataProperty|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/construct/*' file='Doc/LJCDocDataProperty.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Initializes a class instance.</summary>|
LJCComments.SetComment comment:
|Initializes a class instance.|
---------------
LJCComments.SetComment line:
|///     <param name="$name">The Name value.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$summary">The Summary value.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$returns">The Returns value.</param>|
LJCComments.SetComment comment
LJCComments.SetComment comment
FunctionName:
|construct|
**
LJCDocDataGen.ProcessFunction summary:
|Initializes a class instance.|
Syntax:
|public function __construct(string $name, ?string $summary = null&lt;br /&gt;, ?string $returns = null)|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/Clone/*' file='../../CommonDoc/PHPDataClass.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Creates a Clone of the current object.</summary>|
LJCComments.SetComment comment:
|Creates a Clone of the current object.|
---------------
LJCComments.SetComment line:
|/// <returns>The cloned object.</returns>|
LJCComments.SetComment comment:
|The cloned object.|
LJCComments.SetComment comment
FunctionName:
|Clone|
**
LJCDocDataGen.ProcessFunction summary:
|Creates a Clone of the current object.|
Syntax:
|public function Clone() : self|
Returns:
|The cloned object.|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <summary>The Name value.</summary>
|
LJCComments.SetComment comment:
|The Name value.|
PropertyName:
|$Name|
**
LJCDocDataGen.ProcessProperty summary:
|The Name value.|
Syntax:
|public string $Name;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Remarks value.</summary>
|
LJCComments.SetComment comment:
|The Remarks value.|
PropertyName:
|$Remarks|
**
LJCDocDataGen.ProcessProperty summary:
|The Remarks value.|
Syntax:
|public ?string $Remarks;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Returns value.</summary>
|
LJCComments.SetComment comment:
|The Returns value.|
PropertyName:
|$Returns|
**
LJCDocDataGen.ProcessProperty summary:
|The Returns value.|
Syntax:
|public ?string $Returns;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Summary value.</summary>
|
LJCComments.SetComment comment:
|The Summary value.|
PropertyName:
|$Summary|
**
LJCDocDataGen.ProcessProperty summary:
|The Summary value.|
Syntax:
|public ?string $Summary;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Syntax value.</summary>
|
LJCComments.SetComment comment:
|The Syntax value.|
PropertyName:
|$Syntax|
**
LJCDocDataGen.ProcessProperty summary:
|The Syntax value.|
Syntax:
|public ?string $Syntax;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|	/// <summary>Represents a collection of objects.</summary>
|
LJCComments.SetComment comment:
|Represents a collection of objects.|
ClassName:
|LJCDocDataProperties|
**
LJCDocDataGen.ProcessClass summary:
|Represents a collection of objects.|
Syntax:
|class LJCDocDataProperties extends LJCCollectionBase|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/AddObject/*' file='../../CommonDoc/PHPCollection.xml'/>
|
LJCComments.SetComment comment
FunctionName:
|AddObject|
**
LJCDocDataGen.ProcessFunction summary
Syntax:
|public function AddObject(LJCDocDataProperty $item, $key = null)|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/Clone/*' file='../../CommonDoc/PHPCollection.xml'/>
|
LJCComments.SetComment comment
FunctionName:
|Clone|
**
LJCDocDataGen.ProcessFunction summary
Syntax:
|public function Clone() : self|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/Get/*' file='../../CommonDoc/PHPCollection.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Get the item by Key value.</summary>|
LJCComments.SetComment comment:
|Get the item by Key value.|
---------------
LJCComments.SetComment line:
|///     <param name="$key">The element key.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$throwError">Indicates if an error should be thrown if the key is not found.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The object with the matching key value.</returns>|
LJCComments.SetComment comment:
|The object with the matching key value.|
LJCComments.SetComment comment
FunctionName:
|Get|
**
LJCDocDataGen.ProcessFunction summary:
|Get the item by Key value.|
Syntax:
|public function Get($key, bool $throwError = true) : ?LJCDocDataProperty|
Returns:
|The object with the matching key value.|
Remarks
Code
---------------
LJCComments.SetComment line:
|	/// <include path='items/LJCIncludeLib/*' file='Doc/LJCIncludeLib.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// Contains Classes to retrieve XML Comments from include XML files.
|
LJCComments.SetComment isContinue:
| Contains Classes to retrieve XML Comments from include XML files.
|
---------------
LJCComments.SetComment line:
|/// </summary>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
**
LJCDocDataGen.ProcessLib summary:
|
 Contains Classes to retrieve XML Comments from include XML files.
|
Remarks
---------------
LJCComments.SetComment line:
|	/// <include path='items/LJCInclude/*' file='Doc/LJCInclude.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Handles Include file XML comment values.</summary>|
LJCComments.SetComment comment:
|Handles Include file XML comment values.|
---------------
LJCComments.SetComment line:
|/// <remarks>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// Parses the include XML Comments from a referenced Include XML
|
LJCComments.SetComment isContinue:
| Parses the include XML Comments from a referenced Include XML
|
---------------
LJCComments.SetComment line:
|/// documentation file.
|
LJCComments.SetComment isContinue:
| documentation file.
|
---------------
LJCComments.SetComment line:
|/// &lt;br /&gt;
|
LJCComments.SetComment isContinue:
| &lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// &lt;br /&gt;
|
LJCComments.SetComment isContinue:
| &lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// After the  XML Comments are parsed  for that
|
LJCComments.SetComment isContinue:
| After the  XML Comments are parsed  for that
|
---------------
LJCComments.SetComment line:
|/// generation point, they are copied to the LJCComments object.
|
LJCComments.SetComment isContinue:
| generation point, they are copied to the LJCComments object.
|
---------------
LJCComments.SetComment line:
|/// </remarks>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
ClassName:
|LJCInclude|
**
LJCDocDataGen.ProcessClass summary:
|Handles Include file XML comment values.|
Syntax:
|class LJCInclude|
Remarks:
|
 Parses the include XML Comments from a referenced Include XML
 documentation file.
 &amp;lt;br /&amp;gt;
 &amp;lt;br /&amp;gt;
 After the  XML Comments are parsed  for that
 generation point, they are copied to the LJCComments object.
|
Code
---------------
LJCComments.SetComment line:
|		/// <summary>Initializes an object instance.</summary>
|
LJCComments.SetComment comment:
|Initializes an object instance.|
FunctionName:
|construct|
**
LJCDocDataGen.ProcessFunction summary:
|Initializes an object instance.|
Syntax:
|public function __construct()|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/SetComments/*' file='Doc/LJCInclude.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Sets the comments from the specified include file.</summary>|
LJCComments.SetComment comment:
|Sets the comments from the specified include file.|
---------------
LJCComments.SetComment line:
|///     <param name="$line">The code line.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$codeFileSpec">The Code File spec.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// require_once "LJCIncludeLib.php";|
LJCComments.SetComment isContinue:
| require_once "LJCIncludeLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $includeFile = new LJCInclude();|
LJCComments.SetComment isContinue:
| $includeFile = new LJCInclude();|
---------------
LJCComments.SetComment line:
|/// $line = "/// &amp;lt;include path='items/SetComment/*' file='Doc/LJCComments.xml'/&amp;gt;"|
LJCComments.SetComment isContinue:
| $line = "/// &amp;lt;include path='items/SetComment/*' file='Doc/LJCComments.xml'/&amp;gt;"|
---------------
LJCComments.SetComment line:
|/// $includeFile->SetComments($line, "SourceFile.php");|
LJCComments.SetComment isContinue:
| $includeFile->SetComments($line, "SourceFile.php");|
---------------
LJCComments.SetComment line:
|/// foreach ($includeFile->Comments as $comment)|
LJCComments.SetComment isContinue:
| foreach ($includeFile->Comments as $comment)|
---------------
LJCComments.SetComment line:
|/// {|
LJCComments.SetComment isContinue:
| {|
---------------
LJCComments.SetComment line:
|///   // Process each XML comment.|
LJCComments.SetComment isContinue:
|   // Process each XML comment.|
---------------
LJCComments.SetComment line:
|///   // This code is included in the LJCComments->SetComment() method.|
LJCComments.SetComment isContinue:
|   // This code is included in the LJCComments->SetComment() method.|
---------------
LJCComments.SetComment line:
|/// }|
LJCComments.SetComment isContinue:
| }|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|SetComments|
**
LJCDocDataGen.ProcessFunction summary:
|Sets the comments from the specified include file.|
Syntax:
|public function SetComments(string $includeLine, string $codeFileSpec)|
Returns
Remarks
Code:
| require_once &quot;LJCIncludeLib.php&quot;;
 
 $includeFile = new LJCInclude();
 $line = &quot;/// &amp;amp;lt;include path=&#039;items/SetComment/*&#039; file=&#039;Doc/LJCComments.xml&#039;/&amp;amp;gt;&quot;
 $includeFile-&gt;SetComments($line, &quot;SourceFile.php&quot;);
 foreach ($includeFile-&gt;Comments as $comment)
 {
   // Process each XML comment.
   // This code is included in the LJCComments-&gt;SetComment() method.
 }|
---------------
LJCComments.SetComment line:
|		/// <summary>The Incude comments.</summary>
|
LJCComments.SetComment comment:
|The Incude comments.|
PropertyName:
|$Comments|
**
LJCDocDataGen.ProcessProperty summary:
|The Incude comments.|
Syntax:
|public ?array $Comments;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Code File base (Library) name.</summary>
|
LJCComments.SetComment comment:
|The Code File base (Library) name.|
PropertyName:
|$LibName|
**
LJCDocDataGen.ProcessProperty summary:
|The Code File base (Library) name.|
Syntax:
|public ?string $LibName;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|		/// <summary>The Include file spec.</summary>
|
LJCComments.SetComment comment:
|The Include file spec.|
PropertyName:
|$XMLFile|
**
LJCDocDataGen.ProcessProperty summary:
|The Include file spec.|
Syntax:
|public ?string $XMLFile;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|	/// <include path='items/LJCParamCommentLib/*' file='Doc/LJCParamCommentLib.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// Contains Classes to manage param XML Comments.
|
LJCComments.SetComment isContinue:
| Contains Classes to manage param XML Comments.
|
---------------
LJCComments.SetComment line:
|/// </summary>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
**
LJCDocDataGen.ProcessLib summary:
|
 Contains Classes to manage param XML Comments.
|
Remarks
---------------
LJCComments.SetComment line:
|	/// <summary>Handles param comments.</summary>
|
LJCComments.SetComment comment:
|Handles param comments.|
ClassName:
|LJCParamComment|
**
LJCDocDataGen.ProcessClass summary:
|Handles param comments.|
Syntax:
|class LJCParamComment|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <summary>Creates a Param object from a param XML comment.</summary>
|
LJCComments.SetComment comment:
|Creates a Param object from a param XML comment.|
---------------
LJCComments.SetComment line:
|		/// <param name="$paramLine">The param line.</param>
|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|		/// <returns>The Param object.</returns>
|
LJCComments.SetComment comment:
|The Param object.|
FunctionName:
|GetParam|
**
LJCDocDataGen.ProcessFunction summary:
|Creates a Param object from a param XML comment.|
Syntax:
|public function GetParam(string $paramLine) : ?LJCDocDataParam|
Returns:
|The Param object.|
Remarks
Code
ClassName:
|GenCodeDoc|
**
LJCDocDataGen.ProcessClass summary
Syntax:
|class GenCodeDoc|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <summary>Initializes an object instance.</summary>
|
LJCComments.SetComment comment:
|Initializes an object instance.|
FunctionName:
|construct|
**
LJCDocDataGen.ProcessFunction summary:
|Initializes an object instance.|
Syntax:
|public function __construct()|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <summary>Creates CodeDoc pages from source file list.</summary>
|
LJCComments.SetComment comment:
|Creates CodeDoc pages from source file list.|
FunctionName:
|CreateFromList|
**
LJCDocDataGen.ProcessFunction summary:
|Creates CodeDoc pages from source file list.|
Syntax:
|public function CreateFromList()|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <summary>Create the HTML files.</summary>
|
LJCComments.SetComment comment:
|Create the HTML files.|
---------------
LJCComments.SetComment line:
|		/// <param name="$fileSpecLine">The source file spec.</param>
|
LJCComments.SetComment comment
FunctionName:
|CreateFilePages|
**
LJCDocDataGen.ProcessFunction summary:
|Create the HTML files.|
Syntax:
|public function CreateFilePages($fileSpecLine) : void|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|	/// <include path='items/LJCGenDataGenLib/*' file='Doc/LJCGenDataGenLib.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// Contains classes to create GenData from DocData.
|
LJCComments.SetComment isContinue:
| Contains classes to create GenData from DocData.
|
---------------
LJCComments.SetComment line:
|/// </summary>|
LJCComments.SetComment isContinue
---------------
LJCComments.SetComment line:
|/// <remarks>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// Contains classes for these functions:&lt;br /&gt;
|
LJCComments.SetComment isContinue:
| Contains classes for these functions:&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// - Create GenData XML from DocData XML&lt;br /&gt;
|
LJCComments.SetComment isContinue:
| - Create GenData XML from DocData XML&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// - Serialize GenData XML&lt;br /&gt;
|
LJCComments.SetComment isContinue:
| - Serialize GenData XML&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// - Create CodeDoc HTML Files
|
LJCComments.SetComment isContinue:
| - Create CodeDoc HTML Files
|
---------------
LJCComments.SetComment line:
|/// &lt;p&gt;
|
LJCComments.SetComment isContinue:
| &lt;p&gt;
|
---------------
LJCComments.SetComment line:
|/// Uses the LJCGenTextLib class GenTextLib to create the CodeDoc HTML files
|
LJCComments.SetComment isContinue:
| Uses the LJCGenTextLib class GenTextLib to create the CodeDoc HTML files
|
---------------
LJCComments.SetComment line:
|/// by combining the GenData and an HTML Text Template.&lt;br /&gt;
|
LJCComments.SetComment isContinue:
| by combining the GenData and an HTML Text Template.&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// In this implementation there is a GenData XML file created for each PHP
|
LJCComments.SetComment isContinue:
| In this implementation there is a GenData XML file created for each PHP
|
---------------
LJCComments.SetComment line:
|/// file,  Class, Method/Function and Property.
|
LJCComments.SetComment isContinue:
| file,  Class, Method/Function and Property.
|
---------------
LJCComments.SetComment line:
|/// &lt;/p&gt;
|
LJCComments.SetComment isContinue:
| &lt;/p&gt;
|
---------------
LJCComments.SetComment line:
|/// &lt;p&gt;
|
LJCComments.SetComment isContinue:
| &lt;p&gt;
|
---------------
LJCComments.SetComment line:
|/// An HTML page is generated for each GenData XML file and the corresponding HTML
|
LJCComments.SetComment isContinue:
| An HTML page is generated for each GenData XML file and the corresponding HTML
|
---------------
LJCComments.SetComment line:
|/// Text Template.&lt;br /&gt;
|
LJCComments.SetComment isContinue:
| Text Template.&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// The templates are in the Templates subfolder.
|
LJCComments.SetComment isContinue:
| The templates are in the Templates subfolder.
|
---------------
LJCComments.SetComment line:
|/// &lt;/p&gt;
|
LJCComments.SetComment isContinue:
| &lt;/p&gt;
|
---------------
LJCComments.SetComment line:
|/// &lt;p&gt;
|
LJCComments.SetComment isContinue:
| &lt;p&gt;
|
---------------
LJCComments.SetComment line:
|/// PHP File - LibTemplate.html&lt;br /&gt;
|
LJCComments.SetComment isContinue:
| PHP File - LibTemplate.html&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// Class - ClassTemplate.html&lt;br /&gt;
|
LJCComments.SetComment isContinue:
| Class - ClassTemplate.html&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// Method - FunctionTemplate.html&lt;br /&gt;
|
LJCComments.SetComment isContinue:
| Method - FunctionTemplate.html&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// Property - PropertyTemplate.html
|
LJCComments.SetComment isContinue:
| Property - PropertyTemplate.html
|
---------------
LJCComments.SetComment line:
|/// &lt;/p&gt;
|
LJCComments.SetComment isContinue:
| &lt;/p&gt;
|
---------------
LJCComments.SetComment line:
|/// &lt;p&gt;
|
LJCComments.SetComment isContinue:
| &lt;p&gt;
|
---------------
LJCComments.SetComment line:
|/// The PHP HTML files are output to the folder specified in the LJCGenDataGen
|
LJCComments.SetComment isContinue:
| The PHP HTML files are output to the folder specified in the LJCGenDataGen
|
---------------
LJCComments.SetComment line:
|/// constructor.
|
LJCComments.SetComment isContinue:
| constructor.
|
---------------
LJCComments.SetComment line:
|/// &lt;/p&gt;
|
LJCComments.SetComment isContinue:
| &lt;/p&gt;
|
---------------
LJCComments.SetComment line:
|/// A subfolder is created for each class. This folder contains the Class HTML,
|
LJCComments.SetComment isContinue:
| A subfolder is created for each class. This folder contains the Class HTML,
|
---------------
LJCComments.SetComment line:
|/// Methods HTML and Properties HTML files.&lt;br /&gt;
|
LJCComments.SetComment isContinue:
| Methods HTML and Properties HTML files.&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// The Methods and Properties HTML names  are prefixed with the Class name to
|
LJCComments.SetComment isContinue:
| The Methods and Properties HTML names  are prefixed with the Class name to
|
---------------
LJCComments.SetComment line:
|/// prevent overwriting items with the same  name.
|
LJCComments.SetComment isContinue:
| prevent overwriting items with the same  name.
|
---------------
LJCComments.SetComment line:
|/// &lt;br /&gt;
|
LJCComments.SetComment isContinue:
| &lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// &lt;br /&gt;
|
LJCComments.SetComment isContinue:
| &lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// See: &lt;a href="LJCGenTextSectionLib.html"&gt;Gen Sections&lt;/a&gt; for
|
LJCComments.SetComment isContinue:
| See: &lt;a href="LJCGenTextSectionLib.html"&gt;Gen Sections&lt;/a&gt; for
|
---------------
LJCComments.SetComment line:
|/// more information about GenData XML.
|
LJCComments.SetComment isContinue:
| more information about GenData XML.
|
---------------
LJCComments.SetComment line:
|/// </remarks>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
**
LJCDocDataGen.ProcessLib summary:
|
 Contains classes to create GenData from DocData.
|
Remarks:
|
 Contains classes for these functions:&amp;lt;br /&amp;gt;
 - Create GenData XML from DocData XML&amp;lt;br /&amp;gt;
 - Serialize GenData XML&amp;lt;br /&amp;gt;
 - Create CodeDoc HTML Files
 &amp;lt;p&amp;gt;
 Uses the LJCGenTextLib class GenTextLib to create the CodeDoc HTML files
 by combining the GenData and an HTML Text Template.&amp;lt;br /&amp;gt;
 In this implementation there is a GenData XML file created for each PHP
 file,  Class, Method/Function and Property.
 &amp;lt;/p&amp;gt;
 &amp;lt;p&amp;gt;
 An HTML page is generated for each GenData XML file and the corresponding HTML
 Text Template.&amp;lt;br /&amp;gt;
 The templates are in the Templates subfolder.
 &amp;lt;/p&amp;gt;
 &amp;lt;p&amp;gt;
 PHP File - LibTemplate.html&amp;lt;br /&amp;gt;
 Class - ClassTemplate.html&amp;lt;br /&amp;gt;
 Method - FunctionTemplate.html&amp;lt;br /&amp;gt;
 Property - PropertyTemplate.html
 &amp;lt;/p&amp;gt;
 &amp;lt;p&amp;gt;
 The PHP HTML files are output to the folder specified in the LJCGenDataGen
 constructor.
 &amp;lt;/p&amp;gt;
 A subfolder is created for each class. This folder contains the Class HTML,
 Methods HTML and Properties HTML files.&amp;lt;br /&amp;gt;
 The Methods and Properties HTML names  are prefixed with the Class name to
 prevent overwriting items with the same  name.
 &amp;lt;br /&amp;gt;
 &amp;lt;br /&amp;gt;
 See: &amp;lt;a href=&quot;LJCGenTextSectionLib.html&quot;&amp;gt;Gen Sections&amp;lt;/a&amp;gt; for
 more information about GenData XML.
|
---------------
LJCComments.SetComment line:
|	/// <include path='items/LJCGenDataGen/*' file='Doc/LJCGenDataGen.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// Provides methods to generate GenData XML files.
|
LJCComments.SetComment isContinue:
| Provides methods to generate GenData XML files.
|
---------------
LJCComments.SetComment line:
|/// </summary>|
LJCComments.SetComment isContinue
---------------
LJCComments.SetComment line:
|/// <remarks>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// The GenData XML files  provide the  data for GenTextLib-LJCGenText to
|
LJCComments.SetComment isContinue:
| The GenData XML files  provide the  data for GenTextLib-LJCGenText to
|
---------------
LJCComments.SetComment line:
|/// generate CodeDoc HTML  files.
|
LJCComments.SetComment isContinue:
| generate CodeDoc HTML  files.
|
---------------
LJCComments.SetComment line:
|/// &lt;p&gt;
|
LJCComments.SetComment isContinue:
| &lt;p&gt;
|
---------------
LJCComments.SetComment line:
|/// The GenData XML is intended to display the XML Comments based on the Text
|
LJCComments.SetComment isContinue:
| The GenData XML is intended to display the XML Comments based on the Text
|
---------------
LJCComments.SetComment line:
|/// Template that will be used.
|
LJCComments.SetComment isContinue:
| Template that will be used.
|
---------------
LJCComments.SetComment line:
|/// &lt;/p&gt;
|
LJCComments.SetComment isContinue:
| &lt;/p&gt;
|
---------------
LJCComments.SetComment line:
|/// &lt;p&gt;
|
LJCComments.SetComment isContinue:
| &lt;p&gt;
|
---------------
LJCComments.SetComment line:
|/// The Text Section and Replacement names must
|
LJCComments.SetComment isContinue:
| The Text Section and Replacement names must
|
---------------
LJCComments.SetComment line:
|/// match  those expected by the Template.
|
LJCComments.SetComment isContinue:
| match  those expected by the Template.
|
---------------
LJCComments.SetComment line:
|/// &lt;/p&gt;
|
LJCComments.SetComment isContinue:
| &lt;/p&gt;
|
---------------
LJCComments.SetComment line:
|/// &lt;p&gt;
|
LJCComments.SetComment isContinue:
| &lt;p&gt;
|
---------------
LJCComments.SetComment line:
|/// The number and names of sections, items and replacements depends on the GenData
|
LJCComments.SetComment isContinue:
| The number and names of sections, items and replacements depends on the GenData
|
---------------
LJCComments.SetComment line:
|/// from the PHP files and the requirements of the HTML Template.
|
LJCComments.SetComment isContinue:
| from the PHP files and the requirements of the HTML Template.
|
---------------
LJCComments.SetComment line:
|/// &lt;/p&gt;
|
LJCComments.SetComment isContinue:
| &lt;/p&gt;
|
---------------
LJCComments.SetComment line:
|/// This is the standard layout for the GenData XML files.
|
LJCComments.SetComment isContinue:
| This is the standard layout for the GenData XML files.
|
---------------
LJCComments.SetComment line:
|/// &lt;pre&gt; &amp;lt;Data xmlns:xsd="http://www.w3.org/2001/XMLSchema"&lt;br /&gt;
|
LJCComments.SetComment isContinue:
| &lt;pre&gt; &amp;lt;Data xmlns:xsd="http://www.w3.org/2001/XMLSchema"&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///   &amp;lt;Sections&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|   &amp;lt;Sections&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///     &amp;lt;Section&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|     &amp;lt;Section&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///       &amp;lt;Begin/&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|       &amp;lt;Begin/&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///       &amp;lt;Name&amp;gt;Main&amp;lt;/Name&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|       &amp;lt;Name&amp;gt;Main&amp;lt;/Name&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///       &amp;lt;Items&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|       &amp;lt;Items&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///         &amp;lt;Item&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|         &amp;lt;Item&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///           &amp;lt;Replacements&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|           &amp;lt;Replacements&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///             &amp;lt;Replacement&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|             &amp;lt;Replacement&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///               &amp;lt;Name&amp;gt;&amp;lt;/Name&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|               &amp;lt;Name&amp;gt;&amp;lt;/Name&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///               &amp;lt;Value&amp;gt;&amp;lt;/Value&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|               &amp;lt;Value&amp;gt;&amp;lt;/Value&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///             &amp;lt;Replacement&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|             &amp;lt;Replacement&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///           &amp;lt;Replacements&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|           &amp;lt;Replacements&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///         &amp;lt;Item&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|         &amp;lt;Item&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///       &amp;lt;Items&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|       &amp;lt;Items&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///     &amp;lt;Section&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|     &amp;lt;Section&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|///   &amp;lt;Sections&amp;gt;&lt;br /&gt;
|
LJCComments.SetComment isContinue:
|   &amp;lt;Sections&amp;gt;&lt;br /&gt;
|
---------------
LJCComments.SetComment line:
|/// &amp;lt;/Data&amp;gt;&lt;/pre&gt;
|
LJCComments.SetComment isContinue:
| &amp;lt;/Data&amp;gt;&lt;/pre&gt;
|
---------------
LJCComments.SetComment line:
|/// </remarks>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
ClassName:
|LJCGenDataGen|
**
LJCDocDataGen.ProcessClass summary:
|
 Provides methods to generate GenData XML files.
|
Syntax:
|class LJCGenDataGen|
Remarks:
|
 The GenData XML files  provide the  data for GenTextLib-LJCGenText to
 generate CodeDoc HTML  files.
 &amp;lt;p&amp;gt;
 The GenData XML is intended to display the XML Comments based on the Text
 Template that will be used.
 &amp;lt;/p&amp;gt;
 &amp;lt;p&amp;gt;
 The Text Section and Replacement names must
 match  those expected by the Template.
 &amp;lt;/p&amp;gt;
 &amp;lt;p&amp;gt;
 The number and names of sections, items and replacements depends on the GenData
 from the PHP files and the requirements of the HTML Template.
 &amp;lt;/p&amp;gt;
 This is the standard layout for the GenData XML files.
 &amp;lt;pre&amp;gt; &amp;amp;lt;Data xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&amp;lt;br /&amp;gt;
  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&amp;amp;gt;&amp;lt;br /&amp;gt;
   &amp;amp;lt;Sections&amp;amp;gt;&amp;lt;br /&amp;gt;
     &amp;amp;lt;Section&amp;amp;gt;&amp;lt;br /&amp;gt;
       &amp;amp;lt;Begin/&amp;amp;gt;&amp;lt;br /&amp;gt;
       &amp;amp;lt;Name&amp;amp;gt;Main&amp;amp;lt;/Name&amp;amp;gt;&amp;lt;br /&amp;gt;
       &amp;amp;lt;Items&amp;amp;gt;&amp;lt;br /&amp;gt;
         &amp;amp;lt;Item&amp;amp;gt;&amp;lt;br /&amp;gt;
           &amp;amp;lt;Replacements&amp;amp;gt;&amp;lt;br /&amp;gt;
             &amp;amp;lt;Replacement&amp;amp;gt;&amp;lt;br /&amp;gt;
               &amp;amp;lt;Name&amp;amp;gt;&amp;amp;lt;/Name&amp;amp;gt;&amp;lt;br /&amp;gt;
               &amp;amp;lt;Value&amp;amp;gt;&amp;amp;lt;/Value&amp;amp;gt;&amp;lt;br /&amp;gt;
             &amp;amp;lt;Replacement&amp;amp;gt;&amp;lt;br /&amp;gt;
           &amp;amp;lt;Replacements&amp;amp;gt;&amp;lt;br /&amp;gt;
         &amp;amp;lt;Item&amp;amp;gt;&amp;lt;br /&amp;gt;
       &amp;amp;lt;Items&amp;amp;gt;&amp;lt;br /&amp;gt;
     &amp;amp;lt;Section&amp;amp;gt;&amp;lt;br /&amp;gt;
   &amp;amp;lt;Sections&amp;amp;gt;&amp;lt;br /&amp;gt;
 &amp;amp;lt;/Data&amp;amp;gt;&amp;lt;/pre&amp;gt;
|
Code
---------------
LJCComments.SetComment line:
|		/// <summary>Initializes an object instance.</summary>
|
LJCComments.SetComment comment:
|Initializes an object instance.|
FunctionName:
|construct|
**
LJCDocDataGen.ProcessFunction summary:
|Initializes an object instance.|
Syntax:
|public function __construct()|
Returns
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/CreateLibXMLString/*' file='Doc/LJCGenDataGen.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Creates a Lib GenData XML string and optional file.</summary>|
LJCComments.SetComment comment:
|Creates a Lib GenData XML string and optional file.|
---------------
LJCComments.SetComment line:
|///     <param name="$docXMLString">The DocData XML string.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$codeFileSpec">The code file specification.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$writeXML">Indicates if the XML file is to be written.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$outputPath">The output path.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <code>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// $devPath = "c:/Users/Les/Documents/Visual Studio 2022/LJCPHPProjects";|
LJCComments.SetComment isContinue:
| $devPath = "c:/Users/Les/Documents/Visual Studio 2022/LJCPHPProjects";|
---------------
LJCComments.SetComment line:
|/// require_once "$devPath/GenDoc/GenDataLib/LJCGenDataGenLib.php";|
LJCComments.SetComment isContinue:
| require_once "$devPath/GenDoc/GenDataLib/LJCGenDataGenLib.php";|
---------------
LJCComments.SetComment line:
|/// require_once "$devPath/GenDoc/GenDataLib/LJCGenDataGenLib.php";|
LJCComments.SetComment isContinue:
| require_once "$devPath/GenDoc/GenDataLib/LJCGenDataGenLib.php";|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $docDataGen = new LJCDocDataGen();|
LJCComments.SetComment isContinue:
| $docDataGen = new LJCDocDataGen();|
---------------
LJCComments.SetComment line:
|/// $genDataGen = new LJCGenDAtaGen();|
LJCComments.SetComment isContinue:
| $genDataGen = new LJCGenDAtaGen();|
---------------
LJCComments.SetComment line:
|/// |
LJCComments.SetComment isContinue:
| |
---------------
LJCComments.SetComment line:
|/// $fileSpec = "SourceFile.php";|
LJCComments.SetComment isContinue:
| $fileSpec = "SourceFile.php";|
---------------
LJCComments.SetComment line:
|/// $docXMLString = $this->DocDataGen->CreateDocXMLString($fileSpec);|
LJCComments.SetComment isContinue:
| $docXMLString = $this->DocDataGen->CreateDocXMLString($fileSpec);|
---------------
LJCComments.SetComment line:
|/// $genXMLString = $this->GenDataGen->CreateLibXMLString($docXMLString|
LJCComments.SetComment isContinue:
| $genXMLString = $this->GenDataGen->CreateLibXMLString($docXMLString|
---------------
LJCComments.SetComment line:
|///   , $fileSpec);|
LJCComments.SetComment isContinue:
|   , $fileSpec);|
---------------
LJCComments.SetComment line:
|/// </code>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
FunctionName:
|CreateLibXMLString|
**
LJCDocDataGen.ProcessFunction summary:
|Creates a Lib GenData XML string and optional file.|
Syntax:
|public function CreateLibXMLString(string $docXMLString, string $codeFileSpec&lt;br /&gt;, bool $writeXML = false, string $outputPath = null) : string|
Returns
Remarks
Code:
| $devPath = &quot;c:/Users/Les/Documents/Visual Studio 2022/LJCPHPProjects&quot;;
 require_once &quot;$devPath/GenDoc/GenDataLib/LJCGenDataGenLib.php&quot;;
 require_once &quot;$devPath/GenDoc/GenDataLib/LJCGenDataGenLib.php&quot;;
 
 $docDataGen = new LJCDocDataGen();
 $genDataGen = new LJCGenDAtaGen();
 
 $fileSpec = &quot;SourceFile.php&quot;;
 $docXMLString = $this-&gt;DocDataGen-&gt;CreateDocXMLString($fileSpec);
 $genXMLString = $this-&gt;GenDataGen-&gt;CreateLibXMLString($docXMLString
   , $fileSpec);|
---------------
LJCComments.SetComment line:
|		/// <summary>Creates a Method Params section GenData XML string.</summary>
|
LJCComments.SetComment comment:
|Creates a Method Params section GenData XML string.|
---------------
LJCComments.SetComment line:
|		/// <param name="$method">The Method object.</param>
|
LJCComments.SetComment comment
FunctionName:
|CreateMethodParamString|
**
LJCDocDataGen.ProcessFunction summary:
|Creates a Method Params section GenData XML string.|
Syntax:
|public function CreateMethodParamString(LJCDocDataMethod $method) : ?string|
Returns
Remarks
Code
PropertyName:
|$HTMLPath|
**
LJCDocDataGen.ProcessProperty summary
Syntax:
|public string $HTMLPath;|
Returns
Remarks
---------------
LJCComments.SetComment line:
|	/// <include path='items/LJCGenDataXMLLib/*' file='Doc/LJCGenDataXMLLib.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// Contains Classes to generate supporting GenData XML text.
|
LJCComments.SetComment isContinue:
| Contains Classes to generate supporting GenData XML text.
|
---------------
LJCComments.SetComment line:
|/// </summary>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
**
LJCDocDataGen.ProcessLib summary:
|
 Contains Classes to generate supporting GenData XML text.
|
Remarks
---------------
LJCComments.SetComment line:
|	/// <include path='items/LJCGenDataXML/*' file='Doc/LJCGenDataXML.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Provides methods for creating GenData XML text.</summary>|
LJCComments.SetComment comment:
|Provides methods for creating GenData XML text.|
---------------
LJCComments.SetComment line:
|/// <remarks>
|
LJCComments.SetComment comment:
|
|
---------------
LJCComments.SetComment line:
|/// Contains static methods for  generating supporting GenData XML text.
|
LJCComments.SetComment isContinue:
| Contains static methods for  generating supporting GenData XML text.
|
---------------
LJCComments.SetComment line:
|/// </remarks>|
LJCComments.SetComment isContinue
LJCComments.SetComment comment
ClassName:
|LJCGenDataXML|
**
LJCDocDataGen.ProcessClass summary:
|Provides methods for creating GenData XML text.|
Syntax:
|class LJCGenDataXML|
Remarks:
|
 Contains static methods for  generating supporting GenData XML text.
|
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/ItemBegin/*' file='Doc/LJCGenDataXML.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Creates the Item begin string.</summary>|
LJCComments.SetComment comment:
|Creates the Item begin string.|
---------------
LJCComments.SetComment line:
|///     <param name="$name">The Item name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$indent">The indent count.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The Item Begin XML string.</returns>|
LJCComments.SetComment comment:
|The Item Begin XML string.|
LJCComments.SetComment comment
FunctionName:
|ItemBegin|
**
LJCDocDataGen.ProcessFunction summary:
|Creates the Item begin string.|
Syntax:
|public static function ItemBegin(string $name, int $indent) : string|
Returns:
|The Item Begin XML string.|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/ItemEnd/*' file='Doc/LJCGenDataXML.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Creates the Item end string.</summary>|
LJCComments.SetComment comment:
|Creates the Item end string.|
---------------
LJCComments.SetComment line:
|///     <param name="$indent">The indent count.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The Item End XML string.</returns>|
LJCComments.SetComment comment:
|The Item End XML string.|
LJCComments.SetComment comment
FunctionName:
|ItemEnd|
**
LJCDocDataGen.ProcessFunction summary:
|Creates the Item end string.|
Syntax:
|public static function ItemEnd(int $indent) : string|
Returns:
|The Item End XML string.|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/Replacement/*' file='Doc/LJCGenDataXML.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Creates the Replacement string.</summary>|
LJCComments.SetComment comment:
|Creates the Replacement string.|
---------------
LJCComments.SetComment line:
|///     <param name="$name">The Replacement name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$value">The Replacement value.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$indent">The indent count.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The Replacement XML string.</returns>|
LJCComments.SetComment comment:
|The Replacement XML string.|
LJCComments.SetComment comment
FunctionName:
|Replacement|
**
LJCDocDataGen.ProcessFunction summary:
|Creates the Replacement string.|
Syntax:
|public static function Replacement(string $name, ?string $value&lt;br /&gt;, int $indent) : ?string|
Returns:
|The Replacement XML string.|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/SectionBegin/*' file='Doc/LJCGenDataXML.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Creates the Section begin string.</summary>|
LJCComments.SetComment comment:
|Creates the Section begin string.|
---------------
LJCComments.SetComment line:
|///     <param name="$name">The Section name.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|///     <param name="$indent">The indent count.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The Section Begin XML string.</returns>|
LJCComments.SetComment comment:
|The Section Begin XML string.|
LJCComments.SetComment comment
FunctionName:
|SectionBegin|
**
LJCDocDataGen.ProcessFunction summary:
|Creates the Section begin string.|
Syntax:
|public static function SectionBegin(string $name, int $indent) : string|
Returns:
|The Section Begin XML string.|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <include path='items/SectionEnd/*' file='Doc/LJCGenDataXML.xml'/>
|
---------------
LJCComments.SetComment line:
|/// <summary>Creates the Section end string.</summary>|
LJCComments.SetComment comment:
|Creates the Section end string.|
---------------
LJCComments.SetComment line:
|///     <param name="$indent">The indent count.</param>|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|/// <returns>The Section End XML string.</returns>|
LJCComments.SetComment comment:
|The Section End XML string.|
LJCComments.SetComment comment
FunctionName:
|SectionEnd|
**
LJCDocDataGen.ProcessFunction summary:
|Creates the Section end string.|
Syntax:
|public static function SectionEnd(int $indent) : string|
Returns:
|The Section End XML string.|
Remarks
Code
---------------
LJCComments.SetComment line:
|		/// <param name="$fileName">The file name.</param>
|
LJCComments.SetComment comment
---------------
LJCComments.SetComment line:
|		/// <returns>The head XML string.</returns>
|
LJCComments.SetComment comment:
|The head XML string.|
FunctionName:
|XMLHead|
**
LJCDocDataGen.ProcessFunction summary
Syntax:
|public static function XMLHead(string $fileName) : string|
Returns:
|The head XML string.|
Remarks
Code
